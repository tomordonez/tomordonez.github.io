I"‘Î<p>This is a step by step tutorial to build a <strong>static website with Jekyll and Github Pages</strong>.</p>

<h2 id="summary">Summary</h2>

<ul>
  <li>Install Ruby</li>
  <li>Jekyll and Github Pages</li>
  <li>Customizing the theme</li>
  <li>Using SEO</li>
  <li>Creating blog posts</li>
  <li>Github Pages custom domain</li>
  <li>Change your DNS name server</li>
  <li>Deploying custom plugins</li>
  <li>Google Analytics</li>
  <li>Pagination</li>
  <li>Jekyll without Plugins</li>
  <li>Reading Time</li>
  <li>Search Box</li>
  <li>Text Expand/Collapse</li>
  <li>Open external site in new window</li>
</ul>

<h2 id="cheat-sheet-for-building-and-deploying">Cheat Sheet for Building and Deploying</h2>

<p>Build in development and test in localhost:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle exec jekyll serve
</code></pre></div></div>

<p>Backup development files to Github:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add .
$ git commit -m "Awesome commit message here"
$ git push -u origin master
</code></pre></div></div>

<p>Deploy to production:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ JEKYLL_ENV=production jgd
</code></pre></div></div>

<p>More details belowâ€¦</p>

<h2 id="install-ruby">Install Ruby</h2>

<p>Install RVM as seen <a href="http://rvm.io/">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
$ \curl -sSL https://get.rvm.io | bash -s stable
</code></pre></div></div>

<p>If you are on Linux/Gnome. As seen <a href="https://rvm.io/integration/gnome-terminal">here</a>. Go to the Terminal preferences and find a checkbox that says <code class="language-plaintext highlighter-rouge">Run command as a login shell</code>. This must be checked.</p>

<p>Close the terminal and open it again.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ source ~/.rvm/scripts/rvm
$ type rvm | head -n 1
</code></pre></div></div>

<p>This should say <code class="language-plaintext highlighter-rouge">rvm is a function</code></p>

<p>Restart the shell and Install Ruby. Stable version on 5/24/20 is <code class="language-plaintext highlighter-rouge">2.7.1</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rvm install 2.7.1
$ rvm use 2.7.1 --default
</code></pre></div></div>

<p>Create a gemset for the blog</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rvm use 2.7.1@blog --create
</code></pre></div></div>

<p>List gemsets with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rvm gemset list
</code></pre></div></div>

<p>Switch gemsets with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rvm gemset use name-of-gemset
</code></pre></div></div>

<h2 id="install-jekyll">Install Jekyll</h2>

<p>Setup Jekyll:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gem install bundler jekyll
</code></pre></div></div>

<p>Go to the root directory where you want to install. Then create a new jekyll blog.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ jekyll new blog
$ cd blog
</code></pre></div></div>

<p>This creates the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>404.html
about.markdown
_config.yml
Gemfile
Gemfile.lock
index.markdown
_posts/
</code></pre></div></div>

<p>Run the blog:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle exec jekyll serve
</code></pre></div></div>

<p>Open <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> and Ctrl+C to stop</p>

<h2 id="jekyll-and-markdown">Jekyll and Markdown</h2>

<p>Jekyll uses Kramdown. Github Pages uses a customized <code class="language-plaintext highlighter-rouge">CommonMark</code> markdown.</p>

<ul>
  <li><a href="https://jekyllrb.com/docs/configuration/markdown/">Jekyll Kramdown markdown</a></li>
  <li><a href="https://kramdown.gettalong.org/syntax.html">Kramdown syntax</a></li>
  <li><a href="https://commonmark.org/">CommonMark doc</a></li>
  <li><a href="https://github.com/github/jekyll-commonmark-ghpages">CommonMark Github Pages version</a></li>
</ul>

<h2 id="jekyll-and-github-pages">Jekyll and Github Pages</h2>

<p>Look at Github pages dependency <a href="https://pages.github.com/versions/">versions</a></p>

<p>As of 5/24/20:</p>

<ul>
  <li>jekyll: 3.8.5 (even though latest stable was 4.0.1)</li>
  <li>github pages: 204</li>
</ul>

<p>Modify the Gemfile to use Github pages as shown.</p>

<ul>
  <li>Comment this line: <code class="language-plaintext highlighter-rouge">gem "jekyll", "~&gt; 4.0.1"</code></li>
  <li>Uncomment this line: <code class="language-plaintext highlighter-rouge">gem "github-pages", group: :jekyll_plugins</code></li>
</ul>

<p>Upgrade:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle update
</code></pre></div></div>

<p>Output was:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note: jekyll version regressed from 4.0.1 to 3.8.5
</code></pre></div></div>

<p>Run bundle:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle install
</code></pre></div></div>

<p>Output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Bundle complete! 6 Gemfile dependencies, 85 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
</code></pre></div></div>

<p>Test again:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle exec jekyll serve
</code></pre></div></div>

<h2 id="more-about-github-pages">More about Github Pages</h2>

<p>Official docs <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/getting-started-with-github-pages">here</a>.</p>

<p>A few important details:</p>

<ul>
  <li>There are three types of sites: project, user, and organization.</li>
  <li>The default publishing source for project sites is the root of the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch. For user/org sites the default source might be <code class="language-plaintext highlighter-rouge">master</code>. Review below a section on setting up a user site with custom plugins with the gh-pages branch.</li>
  <li>The site cannot be larger than 1GB.</li>
  <li>Bandwidth limit of 100GB per month.</li>
</ul>

<h2 id="troubleshooting-dependency-errors">Troubleshooting dependency errors</h2>

<p>When testing the site. For <code class="language-plaintext highlighter-rouge">jekyll-3.8.5</code> it says <code class="language-plaintext highlighter-rouge">warning: Using the last argument as keyword parameters is deprecated</code>.</p>

<ul>
  <li>Also for <code class="language-plaintext highlighter-rouge">pathutil-0.16.2</code> it says the same.</li>
  <li>More <a href="https://github.com/jekyll/jekyll/issues/7947">here</a></li>
  <li>And <a href="https://github.com/jekyll/jekyll/pull/7948">here</a></li>
</ul>

<p>Edit the <code class="language-plaintext highlighter-rouge">Gemfile</code> and comment this line again <code class="language-plaintext highlighter-rouge">gem "github-pages", group: :jekyll_plugins</code>. Then add this one:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'jekyll', github: 'jekyll/jekyll'
</code></pre></div></div>

<p>If you have <code class="language-plaintext highlighter-rouge">plugins</code> update them to this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>group :jekyll_plugins do
    gem 'jekyll-feed', github: 'jekyll/jekyll-feed'
    gem 'jekyll-sitemap', github: 'jekyll/jekyll-sitemap'
    gem 'jekyll-paginate', github: 'jekyll/jekyll-paginate'
    gem 'jekyll-seo-tag', github: 'jekyll/jekyll-seo-tag'
    gem 'jekyll-redirect-from', github: 'jekyll/jekyll-redirect-from'
end
</code></pre></div></div>

<p>My <code class="language-plaintext highlighter-rouge">Gemfile</code> currently looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source "https://rubygems.org"

gem 'jekyll', github: 'jekyll/jekyll'

gem "minima", "~&gt; 2.5"

group :jekyll_plugins do
    gem 'jekyll-feed', github: 'jekyll/jekyll-feed'
    gem 'jekyll-sitemap', github: 'jekyll/jekyll-sitemap'
    gem 'jekyll-paginate', github: 'jekyll/jekyll-paginate'
    gem 'jekyll-seo-tag', github: 'jekyll/jekyll-seo-tag'
    gem 'jekyll-redirect-from', github: 'jekyll/jekyll-redirect-from'
end
</code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">bundle install</code></p>

<h2 id="using-a-theme-and-edit-_configyml">Using a theme and edit <code class="language-plaintext highlighter-rouge">_config.yml</code></h2>

<p>The default theme is <code class="language-plaintext highlighter-rouge">minima</code>. The <a href="https://github.com/jekyll/minima">docs</a> have good details on how to set it up.</p>

<p>It has instructions on how to set your <code class="language-plaintext highlighter-rouge">_config.yml</code></p>

<details>
	<summary>Here is a template:</summary>
	<pre>
	title: Name and Title of My Blog
	email: 
	description: &gt;-
	  Some awesome description here
	baseurl: ""
	url: "https://www.mywebsite.com"
	twitter_username: mytwitter
	github_username:  mygithub
	permalink: /:title/

	# Build settings
	theme: minima
	minima:
	  skin: solarized

	header_pages:
	  - about.md

	disqus:
	    shortname: mydisqus_shortname

	author:
	  name: My Name

	show_excerpts: true

	minima:
	  social_links:
	    twitter: mytwitter
	    github: mygithub
	    linkedin: mylinkedin_shortname

	google_analytics: myGAcode

	plugins:
	  - jekyll-feed
	  - jekyll-feed
	  - jekyll-sitemap
	  - jekyll-paginate
	  - jekyll-seo-tag
	  - jekyll-redirect-from

	exclude:
	  - .sass-cache/
	  - .jekyll-cache/
	  - gemfiles/
	  - Gemfile
	</pre>
</details>

<h2 id="customizing-the-theme-minima">Customizing the theme â€˜minimaâ€™</h2>

<p>The default theme is installed as a gem and you wonâ€™t see the source files in your blog directory. To find the source files run this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle info minima
</code></pre></div></div>

<p>My output was this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* minima (2.5.1)
Summary: A beautiful, minimal theme for Jekyll.
Homepage: https://github.com/jekyll/minima
Path: /home/tom/.rvm/gems/ruby-2.7.1@blog/gems/minima-2.5.1
</code></pre></div></div>

<p>If you open this path, the README file shows where files are located:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">_layouts</code> directory define the markup for your theme.</li>
  <li>The <code class="language-plaintext highlighter-rouge">_includes</code> directory has snippets of code that can be inserted in layouts.</li>
  <li>The <code class="language-plaintext highlighter-rouge">_sass</code> directory define the themeâ€™s styles.</li>
  <li>The <code class="language-plaintext highlighter-rouge">assets</code> directory contains the <code class="language-plaintext highlighter-rouge">main.scss</code>.</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">main.scss</code> imports sass files from the <code class="language-plaintext highlighter-rouge">_sass</code> directory. It gets processed into the themeâ€™s main stylesheet <code class="language-plaintext highlighter-rouge">main.css</code> called by <code class="language-plaintext highlighter-rouge">_layouts/default.html</code> via <code class="language-plaintext highlighter-rouge">_includes/head.html</code>.</p>

<p>To override the default structure and style, create the specific directory at the root of the blog, copy the file to that directory, and then edit the file.</p>

<p>For example:</p>

<ul>
  <li>To override the <code class="language-plaintext highlighter-rouge">_includes/head.html</code>.</li>
  <li>Create an <code class="language-plaintext highlighter-rouge">_includes</code> directory in the root of your blog.</li>
  <li>Copy <code class="language-plaintext highlighter-rouge">_includes/head.html</code> from minima gem folder to this directory.</li>
  <li>Edit that file.</li>
</ul>

<h2 id="updating-the-default-css">Updating the default CSS</h2>

<ul>
  <li>Go to the gem path.</li>
  <li>Copy the <code class="language-plaintext highlighter-rouge">assets/</code> folder to your blog root.</li>
  <li>Edit the <code class="language-plaintext highlighter-rouge">/assets/main.scss</code> file.</li>
</ul>

<h2 id="using-seo">Using SEO</h2>

<p>The <code class="language-plaintext highlighter-rouge">minima</code> theme comes with the plugin <code class="language-plaintext highlighter-rouge">jekyll-seo-tag</code> which is approved by Github Pages.</p>

<p>Follow the <a href="https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/usage.md">usage docs</a> and <a href="https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/advanced-usage.md">advanced usage</a>.</p>

<p>You can use the following in your post/page YAML header:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">title</code></li>
  <li><code class="language-plaintext highlighter-rouge">description</code></li>
</ul>

<h2 id="using-a-different-theme">Using a different theme</h2>

<p>I tried a theme that looked like <a href="https://wowthemesnet.github.io/mundana-theme-jekyll/index.html">Medium</a></p>

<p>Instead of installing Jekyll as shown above, do the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://github.com/wowthemesnet/mundana-theme-jekyll.git blog
$ cd blog
$ bundle
$ bundle exec jekyll serve
</code></pre></div></div>

<p>I liked it for a while but it had some weird bugs. I spent many hours trying to fix them but then I gave up and switched back to the default <code class="language-plaintext highlighter-rouge">minima</code> theme.</p>

<h2 id="creating-an-about-page">Creating an <code class="language-plaintext highlighter-rouge">about</code> page</h2>

<p>In your root blog create edit the default <code class="language-plaintext highlighter-rouge">about</code> and modify it as <code class="language-plaintext highlighter-rouge">about.md</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: page
title: "About"
permalink: "/about.html"
comments: false
---
</code></pre></div></div>

<h2 id="creating-blog-posts">Creating blog posts</h2>

<p>These go in the <code class="language-plaintext highlighter-rouge">_posts</code> folder. I got a template that I follow for each new blog post:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: "Title in Double Quotes"
author: tom
categories: [A category]
tags: [some tags here]
---

file: YYYY-MM-DD-title.md (or it won't show up)
title: Don't forget to update this
{%raw%}Add images with: ![Image Name]({{ site.baseurl }}/assets/images/add_image.jpg){%endraw%}
Add local URL with: [Local URL](../local-url)
</code></pre></div></div>

<h2 id="creating-redirects">Creating redirects</h2>

<p>Add this to the <code class="language-plaintext highlighter-rouge">Gemfile</code> in the <code class="language-plaintext highlighter-rouge">plugins</code> block:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'jekyll-redirect-from', github: 'jekyll/jekyll-redirect-from'
</code></pre></div></div>

<p>Then run <code class="language-plaintext highlighter-rouge">bundle install</code>.</p>

<p>As seen in the docs <a href="https://github.com/jekyll/jekyll-redirect-from">here</a></p>

<p>Add it to the <code class="language-plaintext highlighter-rouge">_config.yml</code> under <code class="language-plaintext highlighter-rouge">plugins</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- jekyll-redirect-from
</code></pre></div></div>

<p>My problem was that for my previous website, the blog posts had this format:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blog_post_name.html
</code></pre></div></div>

<p>This new website removes the <code class="language-plaintext highlighter-rouge">.html</code> and a lot of blog posts crawled by google are being sent to a <code class="language-plaintext highlighter-rouge">404 File not found page</code>.</p>

<p>I want to redirect <code class="language-plaintext highlighter-rouge">blog_post_name.html</code> to <code class="language-plaintext highlighter-rouge">blog_post_name/</code></p>

<p>In the blog post the header should show something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>title: "Blog Post Name"
redirect_from:
  - /blog_post_name.html
</code></pre></div></div>

<h2 id="404-page">404 page</h2>

<p>More about 404 pages <a href="https://help.github.com/en/github/working-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site">here</a></p>

<p>You can create a <code class="language-plaintext highlighter-rouge">404.md</code> file if you add this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: page
title: "Not Found"
permalink: "/404.html"
comments: false
redirect_from:
  - /index2.html
---
</code></pre></div></div>

<p>Use the <code class="language-plaintext highlighter-rouge">redirect_from:</code> to redirect bad URLs from Google search results. Or use the same approach for blog posts. You can also try to fix them in your Google Search Console.</p>

<h2 id="add-a-favicon">Add a Favicon</h2>

<p>Based on your theme, it should allow you to add a Favicon on the <code class="language-plaintext highlighter-rouge">_config.yml</code>. Otherwise you would need to add it directly to the <code class="language-plaintext highlighter-rouge">head.html</code>.</p>

<p>For the <code class="language-plaintext highlighter-rouge">minima</code> theme, the docs say that you can add an <code class="language-plaintext highlighter-rouge">_includes/custom-head.html</code> to your root folder and add your code for the favicon files. However, this didnâ€™t work for me as shown on <a href="https://github.com/jekyll/minima/issues/472">2.5.1 canâ€™t include custom-head.html</a>.</p>

<p>I added the favicon code directly to <code class="language-plaintext highlighter-rouge">head.html</code>.</p>

<h2 id="setup-github">Setup Github</h2>

<p>Go to Github:</p>

<ul>
  <li>Create a new repo with the format <code class="language-plaintext highlighter-rouge">username.github.io</code></li>
</ul>

<p>Setup the repo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git init
$ git remote add origin link-to-repo
</code></pre></div></div>

<h2 id="cname-robotstxt">CNAME, robots.txt</h2>

<p>If you have a custom domain, create a <code class="language-plaintext highlighter-rouge">CNAME</code> file, add a line with your website, and save it to your local blog root directory:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>www.yoursite.com
</code></pre></div></div>

<p>Create a <code class="language-plaintext highlighter-rouge">robots.txt</code> and add this line to the file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User-agent: *
</code></pre></div></div>

<p>You can also use <code class="language-plaintext highlighter-rouge">Disallow</code> for bad URLs.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User-agent: *
Disallow: /bad.html
Allow: /
</code></pre></div></div>

<h2 id="deploy-to-github">Deploy to Github</h2>

<p>If you want to cache your credentials</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global credential.helper 'cache --timeout=3600'
</code></pre></div></div>

<p>There are two way to build your blog, development and production.</p>

<p>Build in development and test in localhost:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle exec jekyll serve
</code></pre></div></div>

<p>Build in development uses <code class="language-plaintext highlighter-rouge">_config.yml</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ jekyll build
</code></pre></div></div>

<p>Build to production using an environment variable:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ JEKYLL_ENV=production jekyll build
</code></pre></div></div>

<p>If you prefer to use a separate deploy configuration you can add a <code class="language-plaintext highlighter-rouge">_config-deploy.yml</code> to your blog root.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cp _config.yml _config-deploy.yml
</code></pre></div></div>

<p>Add this line to <code class="language-plaintext highlighter-rouge">_config-deploy.yml</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>environment: production
</code></pre></div></div>

<p>Build the blog like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ jekyll build --config _config-deploy.yml
</code></pre></div></div>

<p>Then deploy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add .
$ git commit -m "Awesome commit message here"
$ git push -u origin master
</code></pre></div></div>

<p>You can also build to production using a gem called <code class="language-plaintext highlighter-rouge">jgd</code> as explained below in <code class="language-plaintext highlighter-rouge">Deploying custom plugins</code>.</p>

<h2 id="change-your-dns-name-server">Change your DNS name server</h2>

<p>Setup an account with Cloudflare if you donâ€™t have one. Find the DNS name server</p>

<p>In your DNS provider point it to Cloudflare.</p>

<h2 id="cloudflare-settings">Cloudflare settings</h2>

<p>Create these records in Cloudflare:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Type    Name               Content
ALIAS   yoursite.com       youruser.github.io
CNAME   www.yoursite.com   youruser.github.io
TXT     yoursite.com       youruser.github.io
</code></pre></div></div>

<p>Add <code class="language-plaintext highlighter-rouge">A</code> records as seen on <a href="https://help.github.com/articles/setting-up-an-apex-domain/">Setting up an Apex domain</a></p>

<p>Add <code class="language-plaintext highlighter-rouge">TXT</code> record to verify Google webmaster tools:</p>

<ul>
  <li>Add property</li>
  <li>Add TXT google verification code</li>
</ul>

<p>Setup these Page rules. As seen <a href="https://www.jonathan-petitcolas.com/2017/01/13/using-https-with-custom-domain-name-on-github-pages.html">here</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://www.yoursite.com/*
Cache Level: Cache Everything

https://yoursite.com/*
Forwarding URL: (Status Code: 301 - Permanent Redirect, URl: https://www.yoursite.com$1)

http://www.yoursite.com/*
Always Use HTTPS
</code></pre></div></div>

<p>In your Overview dashboard set these (if you are on the free plan)</p>

<ul>
  <li>Security level: medium</li>
  <li>SSL: Full</li>
  <li>Caching level: Standard</li>
</ul>

<h2 id="migrating-content">Migrating content</h2>

<p>Here is where I was challenged.</p>

<p>With the Pelican Python static website generator the files were named as <code class="language-plaintext highlighter-rouge">title.md</code>. With Jekyll they need to be in the format <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.md</code>.</p>

<p>For Pelican the header looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Title: Powerful things you can do with the Markdown editor"
Date: 2020-02-09 20:00
Category: Jekyll, tutorial
Tags: featured
Slug: powerful-things
Author: Tom Ordonez
Status: published
Summary: A blog post about Markdown editor.
</code></pre></div></div>

<p>For Jekyll it needs to look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title:  "Powerful things you can do with the Markdown editor"
author: tom
categories: [ Jekyll, tutorial ]
image: assets/images/11.jpg
tags: [featured]
---
</code></pre></div></div>

<p>How to make this change to about 100 blog posts?</p>

<p>I needed to extract the <code class="language-plaintext highlighter-rouge">Date</code> from the header and use it to rename the file. Then extract other content like the <code class="language-plaintext highlighter-rouge">Title</code>, <code class="language-plaintext highlighter-rouge">Category</code>, and <code class="language-plaintext highlighter-rouge">Tags</code>. Then replace this header with the new header.</p>

<p>Also the blog posts used this syntax to insert images in the content <code class="language-plaintext highlighter-rouge">{static}/images/</code> while Jekyll uses:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% raw %}
{ {site.baseurl} }/assets/images/
{% endraw %}
</code></pre></div></div>

<p>Read more in <a href="../python-files-os-module">Python, Files, and OS Module</a></p>

<h2 id="deploying-custom-plugins">Deploying custom plugins</h2>

<p>As shown on the <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages-and-jekyll#plugins">Github Pages docs</a>. Github Pages cannot build sites using unsupported plugins.</p>

<p>Here is the list of approved plugins. Go to <a href="https://pages.github.com/versions/">dependency versions</a>.</p>

<p>As shown in this blog post <a href="https://www.yegor256.com/2014/06/24/jekyll-github-deploy.html">Deploy Jekyll to Github Pages</a>. You can use a gem to setup deployment of Jekyll when you are using custom plugins.</p>

<p>Update your <code class="language-plaintext highlighter-rouge">Gemfile</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'jgd'
</code></pre></div></div>

<p>Run <code class="language-plaintext highlighter-rouge">bundle</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle
</code></pre></div></div>

<p>Output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fetching trollop 2.9.9
Installing trollop 2.9.9
Fetching jgd 1.12
Installing jgd 1.12

Post-install message from trollop:
!    The 'trollop' gem has been deprecated and has been replaced by 'optimist'.
!    See: https://rubygems.org/gems/optimist
!    And: https://github.com/ManageIQ/optimist
</code></pre></div></div>

<p>More about <code class="language-plaintext highlighter-rouge">trollop</code> in the <a href="https://www.manageiq.org/optimist/">official doc</a> and this tutorial: <a href="https://kundeveloper.com/blog/trollop/">writing a Ruby CLI using Trollop</a>.</p>

<p>To deploy use this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ JEKYLL_ENV=production jgd
</code></pre></div></div>

<h3 id="change-the-source-of-your-github-pages">Change the source of your Github Pages</h3>

<ul>
  <li>Go to your Github repo</li>
  <li>Settings</li>
  <li>Options</li>
  <li>Scroll down to Github Pages</li>
  <li>Source</li>
  <li>Change your branch from <code class="language-plaintext highlighter-rouge">master</code> to <code class="language-plaintext highlighter-rouge">gh-pages</code>.</li>
  <li>Save</li>
</ul>

<p>Then deploy again:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ JEKYLL_ENV=production jgd
</code></pre></div></div>

<details>
	<summary>Some of the output:</summary>
	<pre>
	[DEPRECATION] This gem has been renamed to optimist 
	and will no longer be supported. Please switch to optimist 
	as soon as possible.
	+ set -e
	+ set -o pipefail
	+ URL=https://github.com/...git
	+ BRANCH=gh-pages
	+ BRANCH_FROM=master
	+ DEPLOY_CONFIG=_config-deploy.yml
	+ BUNDLE=
	+ DRAFTS=
	++ pwd
	+ SRC=/home/.../blog
	++ mktemp -d -t jgd-XXX
	+ TEMP=/tmp/jgd-NAn
	+ trap 'rm -rf /tmp/jgd-NAn' EXIT
	+ CLONE=/tmp/jgd-NAn/clone
	+ COPY=/tmp/jgd-NAn/copy
	+ echo -e 'Cloning Github repository:'
	
	Cloning Github repository:
	+ git clone -b master https://github.com/... /tmp/jgd-NAn/clone
	
	Cloning into '/tmp/jgd-NAn/clone'...
	remote: Enumerating objects: 3025, done.   
	remote: Counting objects: 100% (3025/3025), done.                                     
	remote: Compressing objects: 100% (1920/1920), done.                                  
	remote: Total 3025 (delta 1272), 
	  reused 2692 (delta 954), pack-reused 0               
	Receiving objects: 100% (3025/3025), 31.22 MiB 
	  | 13.20 MiB/s, done.
	Resolving deltas: 100% (1272/1272), done.
	+ cp -R /tmp/jgd-NAn/clone /tmp/jgd-NAn/copy
	+ cd /tmp/jgd-NAn/clone
	+ echo -e '\nBuilding Jekyll site:'
	
	Building Jekyll site:
	+ rm -rf _site
	+ '[' -r _config-deploy.yml ']'
	+ jekyll build
	Configuration file: /tmp/jgd-NAn/clone/_config.yml
	            Source: /tmp/jgd-NAn/clone
	       Destination: /tmp/jgd-NAn/clone/_site
	 Incremental build: disabled. Enable with --incremental
	      Generating... 
	       Jekyll Feed: Generating feed for posts
	                    done in 1.67 seconds.
	 Auto-regeneration: disabled. Use --watch to enable.
	+ '[' '!' -e _site ']'
	+ cp -R _site /tmp/jgd-NAn
	+ cd /tmp/jgd-NAn
	+ rm -rf /tmp/jgd-NAn/clone
	+ mv /tmp/jgd-NAn/copy /tmp/jgd-NAn/clone
	+ cd /tmp/jgd-NAn/clone
	+ echo -e '\nPreparing gh-pages branch:'

	Preparing gh-pages branch:
	++ git branch -a
	++ grep origin/gh-pages
	+ '[' -z '' ']'
	+ git checkout --orphan gh-pages
	
	Switched to a new branch 'gh-pages'
	+ echo -e '\nDeploying into gh-pages branch:'

	Deploying into gh-pages branch:
	+ rm -rf 404.md about.md assets CNAME _config.yml Gemfile 
	  Gemfile.lock _includes index.markdown _layouts _posts
	+ cp -R /tmp/jgd-NAn/_site/404.html /tmp/jgd-NAn/_site/about.html
	+ rm -f README.md
	+ git add .
	++ date
	+ git commit -am 'new version Thu 08 Oct 2020 
	  12:10:05 AM EDT' --allow-empty
	[gh-pages (root-commit) a36ecd2] new version 
	  Thu 08 Oct 2020 12:10:05 AM EDT
	 819 files changed, 61268 insertions(+)
	 create mode 100644 .github/FUNDING.yml
	 create mode 100644 .gitignore
	 create mode 100644 .jekyll-cache/Jekyll/Cache/Jekyll--Cache/b7
	 ...

    + git push origin gh-pages
	+ sed 's|https://github.com/...|[skipped]|g'
	remote: 
	remote: Create a pull request for 'gh-pages' on GitHub by visiting:        
	remote:      https://github.com/.../pull/new/gh-pages         
	remote: 
	To [skipped]
	 * [new branch]      gh-pages -&gt; gh-pages
	+ echo -e '\nCleaning up:'

	Cleaning up:
	+ rm -rf /tmp/jgd-NAn/clone
	+ rm -rf ''
	+ rm -rf /tmp/jgd-NAn
	</pre>
</details>

<h2 id="related-posts---jekyll-plugin">Related Posts - Jekyll Plugin</h2>

<p>This is a custom Jekyll plugin. Documentation <a href="https://github.com/toshimaru/jekyll-tagging-related_posts">here</a>.</p>

<p>Update your <code class="language-plaintext highlighter-rouge">Gemfile</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'jekyll-tagging-related_posts'
</code></pre></div></div>

<p>Run <code class="language-plaintext highlighter-rouge">bundle</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ bundle
</code></pre></div></div>

<p>Output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fetching nuggets 1.6.0
Installing nuggets 1.6.0
Fetching jekyll-tagging 1.1.0
Installing jekyll-tagging 1.1.0
Fetching jekyll-tagging-related_posts 1.1.0 
Installing jekyll-tagging-related_posts 1.1.0

Post-install message from nuggets:

nuggets-1.6.0 [2018-07-12]:

* Added &lt;tt&gt;JSON.*_{multi,canonical}&lt;/tt&gt;.

Post-install message from jekyll-tagging:

jekyll-tagging-1.1.0 [2017-03-07]:

* Added ability to append extra data to all tag pages. (tfe)
* Provides compatibility to the current jekyll (3.4.1).
* A few fixes. (felipe)
* Some documentation improvements. (wsmoak, jonathanpberger)
* Prooves who is the worst open source maintainer. (pattex ^__^)
</code></pre></div></div>

<p>Update <code class="language-plaintext highlighter-rouge">_config.yml</code> and <code class="language-plaintext highlighter-rouge">_config-deploy.yml</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins:
  - jekyll/tagging
  - jekyll-tagging-related_posts
</code></pre></div></div>

<p>Create a <code class="language-plaintext highlighter-rouge">_layouts</code> directory in blog root:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mkdir _layouts
</code></pre></div></div>

<p>Copy the <code class="language-plaintext highlighter-rouge">post.html</code> layout from the <code class="language-plaintext highlighter-rouge">minima</code> theme Gem to this new directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cp /home/tom/.rvm/gems/ruby-2.7.1@blog/gems/minima-2.5.1/_layouts/post.html _layouts/
</code></pre></div></div>

<p>Add this code to <code class="language-plaintext highlighter-rouge">post.html</code> after the blog post content and before disqus code.</p>

<p>{% raw %}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if site.related_posts.size &gt;= 1 %}
&lt;div&gt;
  &lt;h3&gt;Related Posts&lt;/h3&gt;
  &lt;ul&gt;
  {% for related_post in site.related_posts limit: 5 %}
    &lt;li&gt;&lt;a href="{{ related_post.url }}"&gt;{{ related_post.title }}&lt;/a&gt;&lt;/li&gt;
  {% endfor %}
  &lt;/ul&gt;
&lt;/div&gt;
{% endif %}
</code></pre></div></div>

<p>{% endraw %}</p>

<h2 id="google-analytics">Google Analytics</h2>

<p>The default theme <code class="language-plaintext highlighter-rouge">minima</code> comes with this line in the <code class="language-plaintext highlighter-rouge">_config.yml</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>google_analytics: UA-XXXXXX
</code></pre></div></div>

<p>Enter your Google Analytics code there.</p>

<p>For reference, this is inserted into <code class="language-plaintext highlighter-rouge">_includes/head.html</code>.</p>

<p>{% raw %}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{%- if jekyll.environment == 'production' and site.google_analytics -%}
	{%- include google-analytics.html -%}
{%- endif -%}
</code></pre></div></div>

<p>{% endraw %}</p>

<p>Therefore the blog needs to be deployed either using the <code class="language-plaintext highlighter-rouge">production</code> environment variable or a different deploy config file as previously shown.</p>

<p>Using the environment variable:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ JEKYLL_ENV=production jekyll build
</code></pre></div></div>

<p>If you are using the gem <code class="language-plaintext highlighter-rouge">jgd</code> then deploy like this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ JEKYLL_ENV=production jgd
</code></pre></div></div>

<h2 id="pagination">Pagination</h2>

<p>Jekyll comes with a default plugin <code class="language-plaintext highlighter-rouge">jekyll-paginate</code> that you can set by adding the line <code class="language-plaintext highlighter-rouge">paginate: 5</code> to <code class="language-plaintext highlighter-rouge">_config.yml</code>. This is the Jekyll <a href="https://jekyllrb.com/docs/pagination/">doc</a>.</p>

<p>Go to <code class="language-plaintext highlighter-rouge">_config.yml</code> and make sure this line is under <code class="language-plaintext highlighter-rouge">plugins</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins:
  - jekyll-paginate
</code></pre></div></div>

<p>Then add another line (outside of plugins):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>paginate: 5
</code></pre></div></div>

<p>If your themeâ€™s index is <code class="language-plaintext highlighter-rouge">index.markdown</code>, change it to <code class="language-plaintext highlighter-rouge">index.html</code> or you will get this error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pagination: Pagination is enabled, but I couldn't find an index.html
page to use as the pagination template. Skipping pagination.
</code></pre></div></div>

<p>Update your <code class="language-plaintext highlighter-rouge">_layouts/home.html</code>. Change this line, from this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for post in site.posts
</code></pre></div></div>

<p>To this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for post in paginator.posts
</code></pre></div></div>

<p>For pagination links, add the code as shown on <a href="https://jekyllrb.com/docs/pagination/#render-the-paginated-posts">Jekyllâ€™s Render the paginated posts</a>. Before the closing <code class="language-plaintext highlighter-rouge">endif</code> of <code class="language-plaintext highlighter-rouge">if site.posts.size &gt; 0</code>.</p>

<p>You can center the CSS of pagination in <code class="language-plaintext highlighter-rouge">assets/main.scss</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.pagination {
	display: flex;
}
.previous, a.previous {
	flex: 1;
}
.page_number {
	flex: 1;
}
next, a.next {
	flex: 1;
}
</code></pre></div></div>

<h2 id="jekyll-without-plugins">Jekyll without Plugins</h2>

<p>An alternative option to using custom plugins restricted by Jekyll is by not using plugins at all.</p>

<p>Here is a list of features to use <a href="https://jekyllcodex.org/without-plugins/">Jekyll without plugins</a>.</p>

<h3 id="reading-time">Reading Time</h3>

<p>Similar to Medium you can show the time it will take to read the blog post.</p>

<p>Here is the documentation to <a href="https://jekyllcodex.org/without-plugin/reading-time-indicator/#">reading time</a></p>

<p>Create the file <code class="language-plaintext highlighter-rouge">reading-time.html</code> in your <code class="language-plaintext highlighter-rouge">_includes</code> and add the code shown on the doc.</p>

<p>Go to your <code class="language-plaintext highlighter-rouge">_layouts/post.html</code> and include the <code class="language-plaintext highlighter-rouge">reading-time.html</code> line within the <code class="language-plaintext highlighter-rouge">header</code> tag, before the closing paragraph. You can test to see if it shows correctly on your blog post such as <code class="language-plaintext highlighter-rouge">Aug 29, 2020 â€¢ tom â€¢ 3 min read</code>.</p>

<p>Deploy the source to <code class="language-plaintext highlighter-rouge">master</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ jekyll build
$ git add .
$ git commit -m "Added reading time"
$ git push -u origin master
</code></pre></div></div>

<p>If you installed the <code class="language-plaintext highlighter-rouge">jgd</code> gem, then deploy static pages to the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ JEKYLL_ENV=production jgd
</code></pre></div></div>

<h3 id="search-box">Search Box</h3>

<p>Here is the documentation to <a href="https://jekyllcodex.org/without-plugin/search-lunr/#">Search with Lunr.js</a></p>

<p>Save the file <code class="language-plaintext highlighter-rouge">search-lunr.html</code> in <code class="language-plaintext highlighter-rouge">_includes</code>. In this file, you can exclude the types of documents to search. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if page.url contains '.xml' or page.url contains 'assets' or page.url contains '.json' or page.url contains 'about.html'
</code></pre></div></div>

<p>Download the file <code class="language-plaintext highlighter-rouge">lunr.js</code> into your <code class="language-plaintext highlighter-rouge">js</code> folder, then make sure that <code class="language-plaintext highlighter-rouge">search-lunr.html</code> indicates the correct location of the file. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src="/assets/js/lunr.js"
</code></pre></div></div>

<p>I copied the <code class="language-plaintext highlighter-rouge">default.html</code> layout file from my Gem location to the <code class="language-plaintext highlighter-rouge">_layouts</code> directory:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp /home/tom/.rvm/gems/ruby-2.7.1@blog/gems/minima-2.5.1/_layouts/default.html _layouts/
</code></pre></div></div>

<p>Inside the <code class="language-plaintext highlighter-rouge">default.html</code> layout page, include the <code class="language-plaintext highlighter-rouge">search-lunr.html</code> as indicated in the docs inside curly percentage brackets. Add this in the <code class="language-plaintext highlighter-rouge">main</code> class, before the <code class="language-plaintext highlighter-rouge">content</code> tag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include search-lunr.html
</code></pre></div></div>

<p>Customize the CSS for the search box. At the bottom of <code class="language-plaintext highlighter-rouge">search-lunr.html</code> there is code with the form. You can wrap this in a class:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="search"&gt;
    &lt;form onSubmit="return lunr_search(document.getElementById('lunrsearch').value);"&gt;
        &lt;p&gt;&lt;input type="text" class="form-control" id="lunrsearch" name="q" maxlength="255" value="" placeholder="Search" /&gt;&lt;/p&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre></div></div>

<p>Then in <code class="language-plaintext highlighter-rouge">assets/main.scss</code> you can try something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.search input {
    height: 30px;
    width: 60%;
    padding-left: 10px;
    border: 1px solid #D9D9D9;
    border-radius: 10px;
    font-size: 16px;
}
</code></pre></div></div>

<h2 id="text-expandcollapse-or-collapbsible-markdown">Text Expand/Collapse or Collapbsible Markdown</h2>

<p>I often add whole output to every command I use. This can take a large space in a blog post and might disrupt reading focus.</p>

<p>There are three options for hiding/display text that can be expanded, also known by these keywords: text expand, expand/collapse, collapsible markdown, details element.</p>

<p>Use whatever works best.</p>

<h3 id="text-expand">Text Expand</h3>

<p>This is a JS that might need some tweaking. When you click on <code class="language-plaintext highlighter-rouge">read more</code> it expands the section but it scrolls back to the top.</p>

<p>This is the doc for <a href="https://jekyllcodex.org/without-plugin/text-expand/">Jekyll Text Expand</a>.</p>

<p>Download the file <code class="language-plaintext highlighter-rouge">text-expand.html</code> into the <code class="language-plaintext highlighter-rouge">_includes</code> directory. Then edit the <code class="language-plaintext highlighter-rouge">_layouts/default.html</code> and add this before the closing <code class="language-plaintext highlighter-rouge">body</code> tag:</p>

<p>{% raw %}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include text-expand.html %}
</code></pre></div></div>

<p>{% endraw %}</p>

<p>Then you can use the <code class="language-plaintext highlighter-rouge">expand</code> tag in a blog post by adding only one line for each of the open/closing tag such as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[expand]
Long content here
and here
...
[/expand]
</code></pre></div></div>

<h3 id="collapbsible-markdown-with-details-element">Collapbsible Markdown with Details element</h3>

<p>This uses the details disclosure element: <code class="language-plaintext highlighter-rouge">details</code>. More details in the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details">Mozilla details element doc</a>.</p>

<p>You have to wrap your content like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;details&gt;
	&lt;summary&gt;Click to expand&lt;/summary&gt;
	Long content here
	and here
&lt;/details&gt;
</code></pre></div></div>

<p>To add a code block, you need to have a previous empty line, enclose the code block with three tildes <code class="language-plaintext highlighter-rouge">~~~</code>, optionally you can add the language at the end of the first enclosing tildes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;details&gt;
	&lt;summary&gt;Click to expand&lt;/summary&gt;
	
	~~~ python
	Code here
	~~~
&lt;/details&gt;
</code></pre></div></div>

<p>However, you can encounter this issue <a href="https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d#gistcomment-2710296">Details is not formatted correctly in Jekyll/Github pages</a>. You can enclose the content with the <code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code> tag.</p>

<p>I am using this for my long content output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;details&gt;
	&lt;summary&gt;Click to expand&lt;/summary&gt;
	&lt;pre&gt;
		
	Long content here
	&lt;/pre&gt;

&lt;/details&gt;
</code></pre></div></div>

<p>Here is an example:</p>

<details>
	<summary>Click to expand</summary>
	<pre>
	Long content here
	</pre>
</details>

<p>I also customized the CSS:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>details {
	padding-bottom: 20px;
	color: grey;
}
</code></pre></div></div>

<h3 id="the-text-in-details-not-processed-correctly">The text in details not processed correctly</h3>

<p>I havenâ€™t tested this. This blog post shows <a href="http://movb.de/jekyll-details-support.html">adding support for HTML5 details element to Jekyll</a>. It uses a custom plugin.</p>

<p>Add the <code class="language-plaintext highlighter-rouge">ruby</code> code into <code class="language-plaintext highlighter-rouge">_plugins/details_tag.rb</code>.</p>

<p>Then use like this:</p>

<p>{% raw %}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% details Click to expand %}

	~~~ python
	Code here
	~~~
{% enddetails %}
</code></pre></div></div>

<p>{% endraw %}</p>

<p>More troubleshooting in <a href="https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d">using details in Github</a> and <a href="https://gist.github.com/joyrexus/16041f2426450e73f5df9391f7f7ae5f">collapsible markdown</a>.</p>

<h2 id="open-external-site-in-new-window">Open external site in new window</h2>

<p>By default linking to external sites open in the same window using this syntax:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[External Title](link to external site)
</code></pre></div></div>

<p>Jekyll uses <code class="language-plaintext highlighter-rouge">kramdown</code> and you can link like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[External Title](link to external site){:target="_blank"}
</code></pre></div></div>

<p>What I find annoying about this, is that it adds a weird highlighted row in SublimeText. I also think itâ€™s a weird syntax to remember.</p>

<p>An alternative option is this JS called <a href="https://jekyllcodex.org/without-plugin/new-window-fix">new window fix</a></p>

<p>Download the code into <code class="language-plaintext highlighter-rouge">_includes/new-window-fix.html</code> and remove the <code class="language-plaintext highlighter-rouge">PDF</code> section if you donâ€™t need it.</p>

<p>Add this to your <code class="language-plaintext highlighter-rouge">_layouts/default.html</code> before the closing <code class="language-plaintext highlighter-rouge">body</code> tag.</p>

<p>{% raw %}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include new-window-fix.html %}
</code></pre></div></div>

<p>{% endraw %}</p>

<h2 id="add-external-site-to-menu">Add external site to menu</h2>

<p>There isnâ€™t a clear way to add an external link to the menu as discussed on <a href="https://github.com/jekyll/minima/issues/207">navigation external links</a>.</p>

<p>This <a href="https://github.com/jekyll/minima/issues/207#issuecomment-377095111">comment</a> shows a quick fix to add the external link to <code class="language-plaintext highlighter-rouge">_includes/header.html</code>. I added a link to my Linkedin profile as shown:</p>

<p>{% raw %}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="trigger"&gt;
  {%- for path in page_paths -%}
    {%- assign my_page = site.pages | where: "path", path | first -%}
    {%- if my_page.title -%}
    &lt;a class="page-link" href="{{ my_page.url | relative_url }}"&gt;{{ my_page.title | escape }}&lt;/a&gt;
    &lt;a class="page-link" href="https://www.linkedin.com/in/tomordonez/"&gt;Linkedin&lt;/a&gt;
    {%- endif -%}
  {%- endfor -%}
&lt;/div&gt;
</code></pre></div></div>

<p>{% endraw %}</p>

<p>The <code class="language-plaintext highlighter-rouge">header_pages</code> has to be enabled in <code class="language-plaintext highlighter-rouge">_config.yml</code> for the menu to show. I have an about page here:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>header_pages:
  - about.md
</code></pre></div></div>
:ET