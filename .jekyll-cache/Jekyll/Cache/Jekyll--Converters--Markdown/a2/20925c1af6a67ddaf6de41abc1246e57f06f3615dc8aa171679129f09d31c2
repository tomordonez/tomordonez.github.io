I"-<p>D3 is a great JavaScript library for data visualization. However, like every technology, it can be annoying when you don’t know why things don’t work as expected.</p>

<p>A good way for troubleshooting D3 is by using the browser console.</p>

<p>Let’s run a small project as shown on the D3 tutorial above. It can be as simple as creating an <code class="language-plaintext highlighter-rouge">index.html</code> and linking to the <code class="language-plaintext highlighter-rouge">D3.js</code> library.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;script type="text/javascript" src="https://d3js.org/d3.v5.min.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>Then run the webserver like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python -m http.server 8888 --bind 127.0.0.1
</code></pre></div></div>

<p>Open the browser on: <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8888/</code>. For this test I used Firefox 72.</p>

<p>Open the console on the browser. (You can use <code class="language-plaintext highlighter-rouge">clear()</code> to clear the output)</p>

<h2 id="d3-methods">D3 Methods</h2>

<p>On the console, type <code class="language-plaintext highlighter-rouge">d3</code>. Then expand the result, which shows all these methods. Now you can investigate which methods are available:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{…}
​
__esModule: true
​
active: function active()​
arc: function arc()​
area: function ry()​
areaRadial: function ly()​
ascending: function n()​
axisBottom: function axisBottom()​
axisLeft: function axisLeft()​
axisRight: function axisRight()​
...
...
it has about 500 methods...
</code></pre></div></div>

<p>For example, two useful methods are <code class="language-plaintext highlighter-rouge">d3.min</code> and <code class="language-plaintext highlighter-rouge">d3.max</code>.</p>

<p>Let’s create an array:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>numbers = [3, 9, 1, 0, 2, 8, 2];
</code></pre></div></div>

<p>It shows this output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Array(7) [ 3, 9, 1, 0, 2, 8, 2 ]
</code></pre></div></div>

<p>Then the min and max can be easily calculated:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d3.min(numbers)
0

d3.max(numbers)
9
</code></pre></div></div>

<p>This can be helpful when using <code class="language-plaintext highlighter-rouge">scales</code> to define the input domain.</p>

<h2 id="array-methods">Array methods</h2>

<p>Type the name of the array we created</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>numbers
</code></pre></div></div>

<p>Expand the result to see the values of the array and the array methods</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(7) […]
​0: 3
​1: 9
​2: 1
​3: 0
​4: 2
​5: 8
​6: 2
​length: 7
​
&lt;prototype&gt;: []
​​concat: function concat()
​​constructor: function Array()
​​copyWithin: function copyWithin()
​​entries: function entries()
​​every: function every()
​​fill: function fill()
​​filter: function filter()
​​find: function find()
​​findIndex: function findIndex()
​​flat: function flat()
​​flatMap: function flatMap()
​​forEach: function forEach()
​​includes: function includes()
​​indexOf: function indexOf()
​​join: function join()
​​keys: function keys()
​​lastIndexOf: function lastIndexOf()
​​length: 0
​​map: function map()
​​pop: function pop()
​​push: function push()
​​reduce: function reduce()
​​reduceRight: function reduceRight()
​​reverse: function reverse()
​​shift: function shift()
​​slice: function slice()
​​some: function some()
​​sort: function sort()
​​splice: function splice()
​​toLocaleString: function toLocaleString()
​​toSource: function toSource()
​​toString: function toString()
​​unshift: function unshift()
​​values: function values()
​​Symbol(Symbol.iterator): function values()
​​Symbol(Symbol.unscopables): Object { copyWithin: true, entries: true, fill: true, … }
​​&lt;prototype&gt;: Object { … } ​
</code></pre></div></div>

<p>There is a <code class="language-plaintext highlighter-rouge">sort</code> function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>numbers.sort()
Array(7) [ 0, 1, 2, 2, 3, 8, 9 ]
</code></pre></div></div>

<p>There is also <code class="language-plaintext highlighter-rouge">length</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>numbers.length
7
</code></pre></div></div>

<h2 id="object-methods">Object Methods</h2>

<p>Let’s create an object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>simpsons = { name: "Homer", age: 40, city: "Springfield"};
</code></pre></div></div>

<p>Type <code class="language-plaintext highlighter-rouge">simpsons</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Object { name: "Homer", age: 40, city: "Springfield" }
</code></pre></div></div>

<p>Create an array from this object:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>simpsonsArray = d3.values(simpsons)
Array(3) [ "Homer", 40, "Springfield" ]
</code></pre></div></div>

<p>To see methods available for <code class="language-plaintext highlighter-rouge">Object</code> simpsons, type <code class="language-plaintext highlighter-rouge">simpsons</code> and expand the output.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{…}
​age: 40
​city: "Springfield"
​name: "Homer"
​
&lt;prototype&gt;: {…}
​​__defineGetter__: function __defineGetter__()
​​__defineSetter__: function __defineSetter__()
​​__lookupGetter__: function __lookupGetter__()
​​__lookupSetter__: function __lookupSetter__()
​​__proto__: 
​​constructor: function Object()
​​hasOwnProperty: function hasOwnProperty()
​​isPrototypeOf: function isPrototypeOf()
​​propertyIsEnumerable: function propertyIsEnumerable()
​​toLocaleString: function toLocaleString()
​​toSource: function toSource()
​​toString: function toString()
​​valueOf: function valueOf()
​​&lt;get __proto__()&gt;: function __proto__()
​​&lt;set __proto__()&gt;: function __proto__()
</code></pre></div></div>

<h2 id="consolelog-on-callback-function">Console.log on callback function</h2>

<p>On your D3 script, use <code class="language-plaintext highlighter-rouge">console.log</code> on a callback function to see the data before and after such as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var someFunction (d) {
	console.log("Before something happens");
	console.log(d);
	somethingHappens(d);
	console.log("After something happens");
	console.log(d);
	}
</code></pre></div></div>

<h2 id="d3nest-reformats-a-date-object-to-string">d3.nest reformats a Date object to string</h2>

<p>As seen <a href="https://stackoverflow.com/questions/25576853/d3-nest-formatting-date-incorrectly">here</a> and <a href="https://github.com/d3/d3-collection/issues/19">here</a>.</p>

<p>If you are using <code class="language-plaintext highlighter-rouge">d3.nest()</code> to group data that has a <code class="language-plaintext highlighter-rouge">Date</code>. Nest will force the value into a string.</p>

<p>Given a dataset where you parse the year:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const parseTime = d3.timeParse("%Y");
</code></pre></div></div>

<p>After loading <code class="language-plaintext highlighter-rouge">dataset</code>, then creating an array of objects:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const data = dataset.map(d =&gt; {
	return {
	  year: parseTime(d.year),
	  count: +d.sale
	};
})
</code></pre></div></div>

<p>The parsed <code class="language-plaintext highlighter-rouge">d.year</code> stored into <code class="language-plaintext highlighter-rouge">year</code> should be like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Date Sat Jan 01 2011 00:00:00 GMT-0500 (Eastern Standard Time)
</code></pre></div></div>

<p>If you want to summarize the data and calculate amount per year:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const salesYear = d3.nest()
.key(d =&gt; d.year)
.rollup(amount =&gt; d3.sum(amount, d =&gt; d.sale))
.entries(data);
</code></pre></div></div>

<p>However, <code class="language-plaintext highlighter-rouge">.key(d =&gt; d.year)</code> forces the <code class="language-plaintext highlighter-rouge">Date</code> object to <code class="language-plaintext highlighter-rouge">String</code> like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Sat Jan 01 2011 00:00:00 GMT-0500 (Eastern Standard Time)"
</code></pre></div></div>

<p>If you were to plot <code class="language-plaintext highlighter-rouge">Sales Amount vs Year</code> by using a scale that maps <code class="language-plaintext highlighter-rouge">Year</code> to <code class="language-plaintext highlighter-rouge">Date</code> objects. You will get a <code class="language-plaintext highlighter-rouge">NaN</code>. Because now <code class="language-plaintext highlighter-rouge">Year</code> is not a <code class="language-plaintext highlighter-rouge">Date</code> object, but a <code class="language-plaintext highlighter-rouge">String</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const line = d3.line()
   .x(d =&gt; xScale(d.year))
   .y(d =&gt; yScale(d.amount));
</code></pre></div></div>

<p>You need to convert the <code class="language-plaintext highlighter-rouge">Date string</code> back to <code class="language-plaintext highlighter-rouge">Date object</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const line = d3.line()
	.x(d =&gt; xScale(new Date(d.year)))
	.y(d =&gt; yScale(d.amount));
</code></pre></div></div>

<h2 id="d3-examples">D3 examples</h2>

<p>There are two websites that have a lot of examples. However, keep in mind some use different versions of D3, and the syntax might change in different versions:</p>

<ul>
  <li><a href="https://bl.ocks.org/">Blocks</a></li>
  <li><a href="https://observablehq.com/">Observable</a></li>
  <li><a href="https://github.com/d3/d3/wiki">Docs</a></li>
</ul>
:ET