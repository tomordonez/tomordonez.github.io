I"P<p>A short tutorial about Python context manager: “with” statement.</p>

<p><img src="/assets/images/python-context-manager.jpg" alt="Python Context Manager" /></p>

<p>Sources:</p>

<ul>
  <li>This <a href="http://arnavk.com/posts/python-context-managers/" target="_blank">blog post</a> about context managers.</li>
  <li>The Python <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" target="_blank">docs</a>.</li>
</ul>

<p>Here is a popular example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import csv

with open('output.csv', 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
</code></pre></div></div>

<p>The context manager <code class="language-plaintext highlighter-rouge">with</code> is used for allocation and releasing of resources.</p>

<p>This is alternative to doing this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import csv

csvfile = open('output.csv', 'w', newline='')
csvwriter = csv.writer(csvfile)
csvfile.close()
</code></pre></div></div>

<p>Which is also similar to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import csv

csvfile = open('output.csv', 'w', newline='')

try:
    csvwriter = csv.writer(csvfile)
finally:
    csvfile.close()
</code></pre></div></div>

<p>The blog post from the sources list has a good example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setup()
try:
    do_something()
finally:
    teardown()
</code></pre></div></div>

<p>Similar to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>contextmanager.__enter__()
try:
    do_something()
finally:
    contextmanager.__exit__()
</code></pre></div></div>

<h2 id="context-manager-protocol">Context Manager protocol</h2>

<p>The context manager protocol follows two methods:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">__enter__</code></li>
  <li><code class="language-plaintext highlighter-rouge">__exit__</code></li>
</ul>

<p>As seen in the Python docs. It “defines a runtime context that is entered before the statement body is executed and exited when the statement ends”.</p>

<p>Following the same example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import csv

with open('output.csv', 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
</code></pre></div></div>

<p>For <code class="language-plaintext highlighter-rouge">contextmanager.__enter__()</code>:</p>

<ul>
  <li>It returns an object assigned to the variable <code class="language-plaintext highlighter-rouge">csvfile</code> after <code class="language-plaintext highlighter-rouge">as</code></li>
</ul>

<p>For <code class="language-plaintext highlighter-rouge">contextmanager.__exit__()</code>:</p>

<ul>
  <li>Exits the runtime context.</li>
  <li>Returns a boolean flag indicating if an exception should be supressed.</li>
</ul>

<p>Get more details <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" target="_blank">here</a>.ref=”https://docs.python.org/3/library/stdtypes.html#typecontextmanager” target=”_blank”&gt;here&lt;/a&gt;.</p>
:ET