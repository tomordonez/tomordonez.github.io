I"Û<p>Loading a CSV file in D3 with Promises. Also load CSV, JSON, DSV, and TSV files in D3.</p>

<p>More about <a href="../d3-and-incompatible-versions/">D3 and Incompatible Versions</a>.</p>

<p>D3 version 5 uses a feature called <code class="language-plaintext highlighter-rouge">Promises</code>. Use this syntax:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d3.csv("file.csv").then(function(dataset) {
    console.log(dataset);
});
</code></pre></div></div>

<p>The console shows this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PromiseÂ {&lt;pending&gt;}

(4) [{â€¦}, {â€¦}, {â€¦}, {â€¦}, columns: Array(2)]
    0: {year: "1950", population: "5"}
    1: {year: "1951", population: "10"}
    2: {year: "1955", population: "15"}
    3: {year: "1959", population: "20"}
    columns: (2) ["year", "population"]
    length: 4
    __proto__: Array(0)
</code></pre></div></div>

<p>Or use this syntax, it shows the same console output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var mydata = d3.csv("file.csv")

mydata.then(function(dataset) {
    console.log(dataset);
});
</code></pre></div></div>

<p>Or you can load multiple datasets in D3 and Promises like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var data1 = d3.csv("file1.csv")
var data2 = d3.csv("file2.csv")

Promise.all([data1, data2]).then(someFunction)

function someFunction(values) {
    somethingFunHere(values);
}
</code></pre></div></div>

<p>More about <strong>D3 Promises</strong> in the <a href="https://observablehq.com/@observablehq/introduction-to-promises">Observable blog</a> and <a href="https://datawanderings.com/2018/08/15/d3-js-v5-promise-syntax-examples/">this</a> blog post.</p>

<h2 id="loading-data-with-csv-dsv-tsv-or-json">Loading data with CSV, DSV, TSV or JSON</h2>

<p>There are a few methods to load data in D3:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">d3.dsv</code> this means <code class="language-plaintext highlighter-rouge">delimiter separated values</code></li>
  <li><code class="language-plaintext highlighter-rouge">d3.csv</code></li>
  <li><code class="language-plaintext highlighter-rouge">d3.tsv</code></li>
  <li><code class="language-plaintext highlighter-rouge">d3.json</code></li>
</ul>

<p>You can use <code class="language-plaintext highlighter-rouge">d3.dsv</code> like this and explicitly define the separator:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d3.dsv(",", "file.csv").then(function(dataset) {
    console.log(dataset);
});
</code></pre></div></div>

<p>Console shows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Promise {&lt;pending&gt;}

(4) [{â€¦}, {â€¦}, {â€¦}, {â€¦}, columns: Array(2)]
    0: {year: "1950", population: "5"}
    1: {year: "1951", population: "10"}
    2: {year: "1955", population: "15"}
    3: {year: "1959", population: "20"}
    columns: (2) ["year", "population"]
    length: 4
    __proto__: Array(0)
</code></pre></div></div>

<p>Or use <code class="language-plaintext highlighter-rouge">d3.csv</code> as I have shown before:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d3.csv("file.csv").then(function(dataset) {
    console.log(dataset);
});
</code></pre></div></div>

<p>Or use <code class="language-plaintext highlighter-rouge">d3.json</code> like this. Letâ€™s create a <code class="language-plaintext highlighter-rouge">data.json</code> and add this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[
  {
    "year": 1950,
    "population": 5
  },
  {
    "year": 1951,
    "population": 10
  },
  {
    "year": 1955,
    "population": 15
  },
  {
    "year": 1959,
    "population": 20
  }
]
</code></pre></div></div>

<p>Then load the data:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d3.json("data.json").then(function(dataset) {
    console.log(dataset);
});
</code></pre></div></div>

<p>Console shows the same output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Promise {&lt;pending&gt;}

(4) [{â€¦}, {â€¦}, {â€¦}, {â€¦}]
    0: {year: 1950, population: 5}
    1: {year: 1951, population: 10}
    2: {year: 1955, population: 15}
    3: {year: 1959, population: 20}
    length: 4
    __proto__: Array(0)
</code></pre></div></div>

<p>Next: <a href="../d3-creating-a-bar-chart/">D3 Creating a Bar Chart</a></p>
:ET