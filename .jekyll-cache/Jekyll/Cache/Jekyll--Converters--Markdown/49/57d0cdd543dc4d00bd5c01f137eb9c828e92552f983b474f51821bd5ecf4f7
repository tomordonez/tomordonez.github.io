I"؝<p>Add images with: <img src="/assets/images/add_image.jpg" alt="Image Name" />
Add local URL with: <a href="../local-url">Local URL</a></p>

<p>This is a tutorial to extract data from the Google Maps API using Python.</p>

<h2 id="get-a-google-maps-api-key">Get a Google Maps API key</h2>

<p>As shown in <a href="https://developers.google.com/places/web-service/get-api-key">get API key</a>.</p>

<p>Go to GCP (Google Cloud Platform) &gt; APIs &amp; Services &gt; Credentials.</p>

<p>Click on <code class="language-plaintext highlighter-rouge">Create Credentials</code> then <code class="language-plaintext highlighter-rouge">API key</code>.</p>

<h2 id="enable-a-google-maps-api-service">Enable a Google Maps API service</h2>

<ul>
  <li>Go to the Menu</li>
  <li>Scroll down to Google Maps</li>
  <li>Then APIs</li>
  <li>Click <code class="language-plaintext highlighter-rouge">Places API</code></li>
  <li>Click <code class="language-plaintext highlighter-rouge">Enable</code></li>
</ul>

<p>These are all available API services:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Places API
Maps SDK for Android
Directions API
Distance Matrix API
Maps Elevation API
Maps Embed API
Geocoding API
Geolocation API
Maps JavaScript API
Roads API
Maps SDK for iOS
Time Zone API
Maps Static API
Street View Static API
</code></pre></div></div>

<h2 id="api-key--settings--application-restrictions">API Key &gt; Settings &gt; Application Restrictions</h2>

<p>Without restrictions the API key created has a warning icon.</p>

<p>Edit the Settings for the API key.</p>

<p>Edit the <code class="language-plaintext highlighter-rouge">name</code>. For example: <code class="language-plaintext highlighter-rouge">Google Maps Places API Key</code></p>

<p>Then <code class="language-plaintext highlighter-rouge">Application Restrictions</code> controls which websites or IP addresses or applications can use the API key. You can only choose one of:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">None</code>: for testing purposes only.</li>
  <li><code class="language-plaintext highlighter-rouge">HTTP websites</code>:for API clients that run on a web browser. These types of applications expose the API publicly. Use a service account as shown <a href="https://cloud.google.com/docs/authentication/getting-started">here</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">IP addresses</code>: web servers, cron jobs, etc.</li>
  <li>Android apps</li>
  <li>iOS apps</li>
</ul>

<p>More about this in <a href="https://developers.google.com/maps/api-key-best-practices">API key best practices</a>, <a href="https://developers.google.com/maps/api-key-best-practices#api_key_table">more best practices</a>, and <a href="https://cloud.google.com/docs/authentication/api-keys#api_key_restrictions">API key restrictions</a></p>

<p>One of the best practices says this:</p>

<p>You may use an unrestricted API with the Google Maps API. However, it is recommended to restrict the API keys in the following scenarios:</p>

<ul>
  <li>The test environment is public</li>
  <li>The applications that uses the API key is ready to be used in production.</li>
</ul>

<p>Not sure if this is recommended. I am only going to pull data from a local test environment. I could set it to <code class="language-plaintext highlighter-rouge">None</code>. For now I set it to <code class="language-plaintext highlighter-rouge">IP addresses</code> and entered my public IP address.</p>

<h2 id="api-key--settings--api-restrictions">API Key &gt; Settings &gt; API restrictions</h2>

<p>As shown in <a href="https://cloud.google.com/docs/authentication/api-keys#api_restrictions">API restrictions</a>, it says that all API keys used in production should use API restrictions.</p>

<p>The <code class="language-plaintext highlighter-rouge">API restrictions</code> specify the enabled APIs that can be called:</p>

<ul>
  <li>Don’t restrict the key</li>
  <li>Restrict the key</li>
</ul>

<p>First I am going to test finding a place.</p>

<p>Select <code class="language-plaintext highlighter-rouge">Restrict the key</code> and from the drop down choose</p>

<ul>
  <li>Places API.</li>
</ul>

<p>Then click <code class="language-plaintext highlighter-rouge">Save</code>.</p>

<p>The API key now has a green check mark.</p>

<p>These are all the <code class="language-plaintext highlighter-rouge">API restrictions</code> options:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BigQuery API
BigQuery Storage API
Cloud Datastore API
Cloud Debugger API
Cloud Logging API
Cloud Monitoring API
Cloud SQL
Cloud Storage
Cloud Trace API
Google Cloud APIs
Google Cloud Storage JSON API
Places API
Service Management API
Service Usage API
</code></pre></div></div>

<h2 id="google-maps-places-api">Google Maps Places API</h2>

<p>More about the Places API <a href="https://developers.google.com/places/web-service/intro">here</a></p>

<p>Each service uses an <code class="language-plaintext highlighter-rouge">HTTP</code> request and returns <code class="language-plaintext highlighter-rouge">JSON</code>. The services use a <code class="language-plaintext highlighter-rouge">place_id</code> to uniquely identify a place. This is important to review duplicates later.</p>

<p>Find the Place ID of a place <a href="https://developers.google.com/places/web-service/place-id">here</a></p>

<h2 id="place-search">Place Search</h2>

<p>Resources:</p>

<ul>
  <li><a href="https://developers.google.com/places/web-service/search">Google Maps Docs</a></li>
</ul>

<p>As shown on the docs, <code class="language-plaintext highlighter-rouge">Places API</code> lets you search for place information using categories, establishments, points of interest, and geographic locations. Search by proximity or by string. It returns a list of places along with summary information.</p>

<p><strong>Types of Requests</strong></p>

<ul>
  <li>Find Place</li>
  <li>Nearby Search</li>
  <li>Text Search</li>
</ul>

<h2 id="find-place-requests">Find Place requests</h2>

<p>Input is a text. Output is a place. Input can be a name, address, or phone number. It cannot be a lat/long number. The request must be a string. The <code class="language-plaintext highlighter-rouge">URL</code> has this form:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://maps.googleapis.com/maps/api/place/findplacefromtext/output?parameters
</code></pre></div></div>

<p><strong>Required parameters</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">key</code>: Your API key</li>
  <li><code class="language-plaintext highlighter-rouge">input</code>: A string that can be a name, address, or phone number.</li>
  <li><code class="language-plaintext highlighter-rouge">inputtype</code>: Use <code class="language-plaintext highlighter-rouge">textquery</code> or <code class="language-plaintext highlighter-rouge">phonenumber</code>.</li>
</ul>

<p>Example, using Google Maps Python client library. I will explain the setup later:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.find_place(input="1600 Amphitheatre Parkway, Mountain View, CA", input_type="textquery")
&gt;&gt;&gt; place
{'candidates': [{'place_id': 'ChIJtYuu0V25j4ARwu5e4wwRYgE'}], 'status': 'OK'}
</code></pre></div></div>

<p><strong>Other parameters</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">language</code>: For example English <code class="language-plaintext highlighter-rouge">language="en"</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">locationbias</code>: Find a specific area by using a <code class="language-plaintext highlighter-rouge">radius</code> and <code class="language-plaintext highlighter-rouge">lat/long</code>. If this is not used, the API uses IP address.</li>
  <li><code class="language-plaintext highlighter-rouge">fields</code>: Types of data to return.</li>
</ul>

<h3 id="language">Language</h3>

<p><a href="https://developers.google.com/maps/faq#languagesupport">Language codes</a>.</p>

<h3 id="locationbias">locationbias</h3>

<p>Use like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>circle:radius@lat,lng
</code></pre></div></div>

<p>For example. Search for <code class="language-plaintext highlighter-rouge">steakhouse</code> within 2000 meters of Google’s HQ office.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=steakhouse&amp;inputtype=textquery&amp;fields=photos,formatted_address,name,opening_hours,rating&amp;locationbias=circle:2000@37.4222339,-122.0854804&amp;key=YOUR_API_KEY
</code></pre></div></div>

<h3 id="fields">Fields</h3>

<p>More in the <a href="https://developers.google.com/places/web-service/search#Fields">official docs</a></p>

<p>This is where it gets interesting…Billing.</p>

<p>Types of Fields:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Basic</code>: business_status, formatted_address, geometry, icon,name, permanently_closed, photos, place_id, plus_code, types</li>
  <li><code class="language-plaintext highlighter-rouge">Contact</code>: opening_hours</li>
  <li><code class="language-plaintext highlighter-rouge">Atmosphere</code>: price_level, rating, user_ratings_total</li>
</ul>

<p>Some services don’t allow to specify a type of field and different billing charges apply if one of them is triggered.</p>

<p>A way to test this is looking at the response and see if it contains a field for one of these types.</p>

<p>Example using Google Maps API Python client library:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.find_place(input="stakehouse", input_type="textquery", location_bias="circle:2000@37.4222339,-122.0854804", language="en")

&gt;&gt;&gt; place
{'candidates': [{'place_id': 'ChIJsUEYn56wj4ARMg1qK1EVHyw'}], 'status': 'OK'}
</code></pre></div></div>

<p>It doesn’t return much. Let’s use <code class="language-plaintext highlighter-rouge">Basic fields</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.find_place(input="stakehouse", input_type="textquery", fields=["name", "formatted_address", "business_status", "geometry", "photos", "types"], location_bias="circle:2000@37.4222339,-122.0854804", language="en")

&gt;&gt;&gt; place
{'candidates': [{'business_status': 'CLOSED_TEMPORARILY', 'formatted_address': '545 San Antonio Rd Suite 31, Mountain View, CA 94040, United States', 'geometry': {'location': {'lat': 37.4032079, 'lng': -122.1118804}, 'viewport': {'northeast': {'lat': 37.40471237989271, 'lng': -122.1105114701073}, 'southwest': {'lat': 37.40201272010727, 'lng': -12.1132111298927}}}, 'name': "Paul Martin's America Mountain View", 'photos': [{'height': 4048, 'html_attributions': ['&lt;a href="https://maps.google.com/maps/contrib/11203600442766896285"&gt;Casey DuBose&lt;/a&gt;'], 'photo_reference': 'CmRaAAAAit6MjPA4tMxwkAx61ZquIzBYndTl5zAcCV-bjUPhl0dm0S3giXjEANdqAvxvxsJvCehIChMcOCPVJwxIzHAQWW9Igv01P_R-gilhmU52I0MSRgBgWXh4g5N7wRQDPQKEhC2y0uoOD03_XFjS6o7xi0UGhTiLFIHq8rbIF68PRZaCoEjumKy_Q', 'width': 3036}], 'types': ['restaurant', 'food', 'point_of_interest', 'establishment']}], 'status': 'OK'}
</code></pre></div></div>

<p>Let’s confirm by searching for <code class="language-plaintext highlighter-rouge">Paul Martin's America Mountain View</code>:</p>

<ul>
  <li>Restaurant</li>
  <li>Temporarily closed</li>
  <li>545 San Antonio Rd Suite 31, Mountain View, CA 94040</li>
  <li>10 min drive, 3.1 miles from Google’s office.</li>
  <li>4.2 stars (628 reviews)</li>
  <li>$$$</li>
</ul>

<p>Let’s use the <code class="language-plaintext highlighter-rouge">Contact</code> (opening_hours) and <code class="language-plaintext highlighter-rouge">Atmosphere</code> (price_level, rating, user_ratings_total) fields to see if we get the same data:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.find_place(input="stakehouse", input_type="textquery", fields=["name", "formatted_address", "business_status", "geometry", "photos", "types", "opening_hours", "price_level", "rating", "user_ratings_total"], location_bias="circle:2000@37.4222339,-122.0854804", language="en")

&gt;&gt;&gt; place
{'candidates': [{'business_status': 'CLOSED_TEMPORARILY', 'formatted_address': '545 San Antonio Rd Suite 31, Mountain View, CA 94040, United States', 'geometry': {'location' {'lat': 37.4032079, 'lng': -122.1118804}, 'viewport': {'northeast': {'lat': 37.40471237989271, 'lng': -122.1105114701073}, 'southwest': {'lat': 37.40201272010727, 'lng': -12.1132111298927}}}, 'name': "Paul Martin's America Mountain View", 'photos': [{'height': 4048, 'html_attributions': ['&lt;a href="https://maps.google.com/maps/contrib/11203600442766896285"&gt;Casey DuBose&lt;/a&gt;'], 'photo_reference': 'CmRaAAAAAUrcGJCnapLA_JhEgpZqkZy4f_B7a_jCCGESU-WWMBi50Q8ILEV818OWisSjzvBzfHA_WtdDn_45BLmrtZV5KSsrPNpxpH6mb47NSp56qzeazy9TSUje4I6ZMT4A7BIEhCJ2IM68_GY0kwK4w1IttDpGhRU3BWNHXrsBJnv2oPseqsUAyElUA', 'width': 3036}], 'price_level': 3, 'rating': 4.2, 'types': ['restaurant', 'food', 'point_of_interest' 'establishment'], 'user_ratings_total': 628}], 'status': 'OK'}
</code></pre></div></div>

<h2 id="nearby-search-requests">Nearby Search Requests</h2>

<p>Search within a specific area. Details in <a href="https://developers.google.com/places/web-service/search#PlaceSearchRequests">Google Maps Docs</a>.</p>

<p><strong>The warning on the Doc says</strong></p>

<ul>
  <li>It returns all available data fields</li>
  <li>You will be billed if it triggers types of fields (basic, contact, atmosphere)</li>
  <li>You can’t constraint to return only specific fields</li>
  <li>To keep from paying data you don’t need. Then use <code class="language-plaintext highlighter-rouge">Find Place Requests</code></li>
</ul>

<p>I used this service and it triggers all types of fields. You will be billed for every SKU. More about billing later.</p>

<p>The <code class="language-plaintext highlighter-rouge">URL</code> has this form:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://maps.googleapis.com/maps/api/place/nearbysearch/output?parameters
</code></pre></div></div>

<p><strong>Required Parameters</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">key</code></li>
  <li><code class="language-plaintext highlighter-rouge">location</code>: Specified as <code class="language-plaintext highlighter-rouge">latitude,longitude</code></li>
  <li><code class="language-plaintext highlighter-rouge">radius</code>: Defined in <code class="language-plaintext highlighter-rouge">meters</code> with a max of <code class="language-plaintext highlighter-rouge">50,000</code> (31 miles)</li>
</ul>

<p><strong>Optional Parameters</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">keyword</code>: Matching all content that Google indexed for this place (name, address, type, customer reviews)</li>
  <li><code class="language-plaintext highlighter-rouge">language</code>: Same as before. See <a href="https://developers.google.com/maps/faq#languagesupport">Language codes</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">rankyby</code>: Use <code class="language-plaintext highlighter-rouge">distance</code> and one or more of <code class="language-plaintext highlighter-rouge">keyword</code> or <code class="language-plaintext highlighter-rouge">language</code>, to rank in ascending order from specified <code class="language-plaintext highlighter-rouge">location</code></li>
  <li><code class="language-plaintext highlighter-rouge">type</code>: See <a href="https://developers.google.com/places/web-service/supported_types">location type</a></li>
  <li><code class="language-plaintext highlighter-rouge">pagetoken</code>: Returns up to 20 results from a previous search</li>
</ul>

<p>Example, using Google Maps Python client library:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=5000, keyword="startup", language="en")

&gt;&gt;&gt; place
{'html_attributions': [], 'results': [], 'status': 'ZERO_RESULTS'}

&gt;&gt;&gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=10000, keyword="startup", language="en")

&gt;&gt;&gt; place
{'html_attributions': [], 'next_page_token': 'CqQCGQEAALespF2ND-o3SI0I5SZR267A4XxtZ4LDBCBCG8SJ_IRp9ttbncIziuYJtpUNuP3pPan80VgualTqejpOwMQyHVIIKNv7MKqdJTBwVpbb6SOoSjskx6yDgaB
d5WGiKBfi7TkrCtxe5yOvJYbU6t5KH2jLrqHMLg_4woyq0_TuZTICEpU1veSLv49pLfltDXPg0bKjZSwXejRSUrwFmSfEfRlopfUhBPZNFgGhl1_Qg2XG8R9aHhrPDNhYUoZWQ3HejWw3xVeMpS5_4w_43Qy0wRemnVCPSw7FHz3o
AoCfFDFtGp66i3LlQlwQ2Vdraen-NyxoMOLKonL4YfSYst-6kyFzzCIy_Cr-w6VKCCoGJmPxLR07fjZoiE-c6pCfqepxIQC67lM0MvZV-sSAKkgp8eQRoUnTTz_OZwMEsZqsG7PzWFuQffv7Y', 'results': [{'business_st
tus': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.4522222, 'lng': -122.1661111}, 'viewport': {'northeast': {'lat': 37.45368197989271, 'lng': -122.1650791201073}, 'sou
hwest': {'lat': 37.45098232010727, 'lng': -122.1677787798927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '83aa3dba2f9f4aeb
b49ed92f74abe010398f16a', 'name': 'BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp; Event Space', 'opening_hours': {'open_now': False}, 'photos': [{'height': 1
24, 'html_attributions': ['&lt;a href="https://maps.google.com/maps/contrib/109071310568073474532"&gt;Boost Ventures&lt;/a&gt;'], 'photo_reference': 'CmRaAAAAVHi9Mc5N4rwtg7oSunQr545R18P
sgHgh92ODUQ4pL_Sc_s6nhBkk4_xK027AdctQEofpwVFlpTTkM2Bs-URTUqISKYOZqWBFgupe7NDTUSb68oC32Y8AV5x5iUbh65OEhAO71DTWNwWYDK2X04iPiaMGhTPZrlZvJcTN38b7lcMAXhOMevL5g', 'width': 2152}],
'place_id': 'ChIJS7Ac0Qu7j4ARkgnXFqygEM8', 'plus_code': {'compound_code': 'FR2M+VH Menlo Park, California', 'global_code': '849VFR2M+VH'}, 'rating': 4.8, 'reference': 'ChIJS
Ac0Qu7j4ARkgnXFqygEM8', 'scope': 'GOOGLE', 'types': ['point_of_interest', 'establishment'], 'user_ratings_total': 63, 'vicinity': '68 Willow Rd, Menlo Park'}, {'business_sta
us': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.458447, 'lng': -122.1729745}, 'viewport': {'northeast': {'lat': 37.45983937989272, 'lng': -122.1715244701073}, 'south
est': {'lat': 37.45713972010728, 'lng': -122.1742241298927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '1a4337e0ce2b385bb9
05778fbc45fb6a0daba2c', 'name': 'Startup Capital Ventures', '

&gt;&gt;&gt; [item['name'] for item in place['results']]
['BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp; Event Space', 'Startup Capital Ventures', 'Startup Rabbit', 'Cab Startup', 'Startup Launchpad, Inc', 'BootUpWorld', 'Startup Realty', 'Plug and Play Tech Center', 'Mercury', 'Palo-Alto Startup House', 'Bay Area Startups Services, Inc', 'Nuro', 'The Hive', 'Starship Technologies', EquityBee', 'Fyde', 'HelloStartups', 'sFoundation Inc.', 'Y Combinator', 'Osaka Innovation Hub Silicon Valley Office']
</code></pre></div></div>

<h2 id="text-search-requests">Text Search Requests</h2>

<p>Returns information for a set of places based on a string. Details in <a href="https://developers.google.com/places/web-service/search#TextSearchRequests">Google Maps Docs</a>. For example <code class="language-plaintext highlighter-rouge">startups in Mountain View</code>. The service is used for ambiguous address queries. More in <a href="https://developers.google.com/maps/documentation/geocoding/best-practices">Geocoding addresses best practices</a>.</p>

<p>Other examples:</p>
<ul>
  <li>Incomplete addresses</li>
  <li>Poorly formatted addresses</li>
  <li>Non-address components like business names</li>
</ul>

<p><strong>The warning on the Doc says</strong></p>

<ul>
  <li>It returns all available data fields</li>
  <li>You will be billed if it triggers types of fields (basic, contact, atmosphere)</li>
  <li>You can’t constraint to return only specific fields</li>
  <li>To keep from paying data you don’t need. Then use <code class="language-plaintext highlighter-rouge">Find Place Requests</code></li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">URL</code> has this form:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://maps.googleapis.com/maps/api/place/textsearch/output?parameters
</code></pre></div></div>

<p><strong>Required Parameters</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">key</code></li>
  <li><code class="language-plaintext highlighter-rouge">query</code>: Search string. This parameter becomes optional when you use <code class="language-plaintext highlighter-rouge">type</code></li>
</ul>

<p><strong>Optional Parameters</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">region</code>: Country code top level domain. <a href="https://en.wikipedia.org/wiki/CcTLD">Wikipedia</a></li>
  <li><code class="language-plaintext highlighter-rouge">location</code>: A <code class="language-plaintext highlighter-rouge">latitude,longitude</code>. You must use <code class="language-plaintext highlighter-rouge">radius</code></li>
  <li><code class="language-plaintext highlighter-rouge">radius</code>: Distance in meters, <code class="language-plaintext highlighter-rouge">50,000</code> max (31 miles)</li>
  <li><code class="language-plaintext highlighter-rouge">language</code> For example <code class="language-plaintext highlighter-rouge">language="en"</code></li>
  <li><code class="language-plaintext highlighter-rouge">pagetoken</code>: Used to fetch the next page.</li>
  <li><code class="language-plaintext highlighter-rouge">type</code>: Restrict to a type of place as seen in <a href="https://developers.google.com/places/web-service/supported_types">supported types</a></li>
</ul>

<h2 id="geocoding-request">Geocoding Request</h2>

<p>You can use these two services:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Geocoding</code> to convert an address to <code class="language-plaintext highlighter-rouge">latitude,longitude</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">Reverse Geocoding</code> to find the address from <code class="language-plaintext highlighter-rouge">lat/long</code> or from <code class="language-plaintext highlighter-rouge">place_id</code></li>
</ul>

<p>More details in the <a href="https://developers.google.com/maps/documentation/geocoding/start?_ga=2.123719563.1220042606.1591276309-1631786869.1590631794">Geocoding API</a></p>

<p>Here is the <code class="language-plaintext highlighter-rouge">URL</code> example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;key=YOUR_API_KEY
</code></pre></div></div>

<p>Using the Google Maps API Python client library:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.geocode(address="1600 Amphitheatre Parkway, Mountain View, CA")

googlemaps.exceptions.ApiError: REQUEST_DENIED (This API project is not authorized to use this API.)
</code></pre></div></div>

<p>Mmm. What happened? I didn’t enable the Geocode API or create a Key for this service.</p>

<h3 id="enable-geocoding-api">Enable Geocoding API</h3>

<ul>
  <li>Go to GCP</li>
  <li>Menu &gt; Google Maps &gt; APIs</li>
  <li>Click <code class="language-plaintext highlighter-rouge">Geocoding API</code> (Billing: $5/1K requests 0-100K req/mo)</li>
  <li>Click <code class="language-plaintext highlighter-rouge">Enable</code></li>
</ul>

<h3 id="create-a-geocoding-api-key">Create a Geocoding API Key</h3>

<p>Create a different API key for this service as seen on <a href="https://developers.google.com/maps/api-key-best-practices">API key best practices</a></p>

<ul>
  <li>Go to GCP</li>
  <li>Menu &gt; APIs &amp; Services &gt; Credentials</li>
  <li>Create Credentials &gt; API key</li>
  <li>A message says <code class="language-plaintext highlighter-rouge">API key created</code></li>
  <li>Click on <code class="language-plaintext highlighter-rouge">Restrict Key</code></li>
  <li>Change name to <code class="language-plaintext highlighter-rouge">Google Maps Geocoding API key</code></li>
  <li>Choose an <code class="language-plaintext highlighter-rouge">Application Restriction</code></li>
  <li>For <code class="language-plaintext highlighter-rouge">API restrictions</code> change to <code class="language-plaintext highlighter-rouge">Restrict key</code> and select <code class="language-plaintext highlighter-rouge">Geocoding API</code></li>
  <li>Click <code class="language-plaintext highlighter-rouge">Save</code></li>
</ul>

<p>Try again. I will explain the setup later:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps_geo.geocode(address="1600 Amphitheatre Parkway, Mountain View, CA")

&gt;&gt;&gt; place
[{'access_points': [{'access_point_type': 'TYPE_SEGMENT', 'location': {'latitude': 37.4213102, 'longitude': -122.0852443}, 'location_on_segment': {'latitude': 37.4212816, 'lngitude': -122.0852472}, 'place_id': 'ChIJpdYZQgK6j4ARnmfrthhmnZ8', 'segment_position': 0.5404474139213562, 'unsuitable_travel_modes': []}], 'address_components': [{'long_nae': '1600', 'short_name': '1600', 'types': ['street_number']}, {'long_name': 'Amphitheatre Parkway', 'short_name': 'Amphitheatre Pkwy', 'types': ['route']}, {'long_name': 'Muntain View', 'short_name': 'Mountain View', 'types': ['locality', 'political']}, {'long_name': 'Santa Clara County', 'short_name': 'Santa Clara County', 'types': ['administative_area_level_2', 'political']}, {'long_name': 'California', 'short_name': 'CA', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'sort_name': 'US', 'types': ['country', 'political']}, {'long_name': '94043', 'short_name': '94043', 'types': ['postal_code']}], 'formatted_address': '1600 Amphitheatre Pkwy, ountain View, CA 94043, USA', 'geometry': {'location': {'lat': 37.4223105, 'lng': -122.0846329}, 'location_type': 'ROOFTOP', 'viewport': {'northeast': {'lat': 37.423659480295, 'lng': -122.0832839197085}, 'southwest': {'lat': 37.42096151970851, 'lng': -122.0859818802915}}}, 'place_id': 'ChIJtYuu0V25j4ARwu5e4wwRYgE', 'plus_code': {'compound_code' 'CWC8+W4 Mountain View, CA, United States', 'global_code': '849VCWC8+W4'}, 'types': ['street_address']}]
</code></pre></div></div>

<h2 id="python-client-library-or-httpclient-or-requests">Python client library or http.client or requests</h2>

<p>You can use any of these options:</p>

<ul>
  <li>Google Maps has a Python client library. <a href="https://github.com/googlemaps/google-maps-services-python">Github</a></li>
  <li><code class="language-plaintext highlighter-rouge">http.client</code> is a Python native library, part of the <code class="language-plaintext highlighter-rouge">urllib.request</code> module. <a href="https://docs.python.org/3/library/urllib.request.html">Python docs</a></li>
  <li><code class="language-plaintext highlighter-rouge">requests</code> is a Python external library. <a href="https://requests.readthedocs.io/en/master/">Readthedocs</a></li>
</ul>

<p>A quick search of <code class="language-plaintext highlighter-rouge">requests vs http.client</code> shows <code class="language-plaintext highlighter-rouge">Why is Python 3 http.client so much faster than python-requests?</code>. An answer says that <code class="language-plaintext highlighter-rouge">http.client</code> is at a lower level on the stack, while <code class="language-plaintext highlighter-rouge">requests</code> can be slower because it adds other features. <a href="https://stackoverflow.com/questions/39435443/why-is-python-3-http-client-so-much-faster-than-python-requests">Stackoverflow</a>.</p>

<p>Another more popular query was <code class="language-plaintext highlighter-rouge">requests vs urllib</code>, which shows <a href="https://stackoverflow.com/questions/2018026/what-are-the-differences-between-the-urllib-urllib2-urllib3-and-requests-modul">this</a> question: <code class="language-plaintext highlighter-rouge">What are the differences between the urllib, urllib2, urllib3 and requests module?</code>. The answer with the most votes recommends to use <code class="language-plaintext highlighter-rouge">requests</code> for its simplicity and added features.</p>

<p>The Google Maps Python client library requires <code class="language-plaintext highlighter-rouge">requests</code> upon installation. I think that this library might be just a wrapper for requests.</p>

<h2 id="google-maps-api-with-google-maps-python-client-library">Google Maps API with Google Maps Python client library</h2>

<p>Resources:</p>

<ul>
  <li><a href="https://github.com/googlemaps/google-maps-services-python">Github</a></li>
  <li><a href="https://github.com/googlemaps/google-maps-services-python/tree/master/tests">Tests</a></li>
  <li><a href="https://googlemaps.github.io/google-maps-services-python/docs/index.html">Docs</a></li>
</ul>

<p>Install:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip install -U googlemaps --user
</code></pre></div></div>

<p>Output of installation was:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Downloading https://files.pythonhosted.org/packages/cb/87/5cbe65cd19defe67472db7afd84963a77fbbbe4a764320a67d4a64282b61/googlemaps-4.4.1.tar.gz
Requirement already satisfied, skipping upgrade: requests&lt;3.0,&gt;=2.20.0 in /usr/lib/python3.7/site-packages (from googlemaps) (2.22.0)
Requirement already satisfied, skipping upgrade: chardet&lt;3.1.0,&gt;=3.0.2 in /usr/lib/python3.7/site-packages (from requests&lt;3.0,&gt;=2.20.0-&gt;googlemaps) (3.0.4)
Requirement already satisfied, skipping upgrade: idna&lt;2.9,&gt;=2.5 in /usr/lib/python3.7/site-packages (from requests&lt;3.0,&gt;=2.20.0-&gt;googlemaps) (2.8)
Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/lib/python3.7/site-packages (from requests&lt;3.0,&gt;=2.20.0-&gt;googlemaps) (1.25.7)
Installing collected packages: googlemaps
 Running setup.py install for googlemaps ... done
Successfully installed googlemaps-4.4.1
</code></pre></div></div>

<p>Docs on the Python shell:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; help(googlemaps)
</code></pre></div></div>

<p>Setup code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import googlemaps
&gt;&gt;&gt; gmaps = googlemaps.Client(key='YOUR KEY')
</code></pre></div></div>

<p>Search for a stakehouse near Google’s office:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.find_place(input="stakehouse", input_type="textquery", location_bias="circle:2000@37.4222339,-122.0854804", language="en")

&gt;&gt;&gt; place
{'candidates': [{'place_id': 'ChIJsUEYn56wj4ARMg1qK1EVHyw'}], 'status': 'OK'}
</code></pre></div></div>

<p>It doesn’t return much. Let’s use <code class="language-plaintext highlighter-rouge">Basic fields</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.find_place(input="stakehouse", input_type="textquery", fields=["name", "formatted_address", "business_status", "geometry", "photos", "types"], location_bias="circle:2000@37.4222339,-122.0854804", language="en")

&gt;&gt;&gt; place
{'candidates': [{'business_status': 'CLOSED_TEMPORARILY', 'formatted_address': '545 San Antonio Rd Suite 31, Mountain View, CA 94040, United States', 'geometry': {'location': {'lat': 37.4032079, 'lng': -122.1118804}, 'viewport': {'northeast': {'lat': 37.40471237989271, 'lng': -122.1105114701073}, 'southwest': {'lat': 37.40201272010727, 'lng': -12.1132111298927}}}, 'name': "Paul Martin's America Mountain View", 'photos': [{'height': 4048, 'html_attributions': ['&lt;a href="https://maps.google.com/maps/contrib/11203600442766896285"&gt;Casey DuBose&lt;/a&gt;'], 'photo_reference': 'CmRaAAAAit6MjPA4tMxwkAx61ZquIzBYndTl5zAcCV-bjUPhl0dm0S3giXjEANdqAvxvxsJvCehIChMcOCPVJwxIzHAQWW9Igv01P_R-gilhmU52I0MSRgBgWXh4g5N7wRQDPQKEhC2y0uoOD03_XFjS6o7xi0UGhTiLFIHq8rbIF68PRZaCoEjumKy_Q', 'width': 3036}], 'types': ['restaurant', 'food', 'point_of_interest', 'establishment']}], 'status': 'OK'}
</code></pre></div></div>

<p>Search for anything that contains <code class="language-plaintext highlighter-rouge">startup</code> near Google’s office within <code class="language-plaintext highlighter-rouge">5,000 meters</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=5000, keyword="startup", language="en")

&gt;&gt;&gt; place
{'html_attributions': [], 'results': [], 'status': 'ZERO_RESULTS'}
</code></pre></div></div>

<p>No results. Let’s try again within <code class="language-plaintext highlighter-rouge">10,000 meters</code> (Max is 50,000)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=10000, keyword="startup", language="en")

&gt;&gt;&gt; place
{'html_attributions': [], 'next_page_token': 'CqQCGQEAALespF2ND-o3SI0I5SZR267A4XxtZ4LDBCBCG8SJ_IRp9ttbncIziuYJtpUNuP3pPan80VgualTqejpOwMQyHVIIKNv7MKqdJTBwVpbb6SOoSjskx6yDgaB
d5WGiKBfi7TkrCtxe5yOvJYbU6t5KH2jLrqHMLg_4woyq0_TuZTICEpU1veSLv49pLfltDXPg0bKjZSwXejRSUrwFmSfEfRlopfUhBPZNFgGhl1_Qg2XG8R9aHhrPDNhYUoZWQ3HejWw3xVeMpS5_4w_43Qy0wRemnVCPSw7FHz3o
AoCfFDFtGp66i3LlQlwQ2Vdraen-NyxoMOLKonL4YfSYst-6kyFzzCIy_Cr-w6VKCCoGJmPxLR07fjZoiE-c6pCfqepxIQC67lM0MvZV-sSAKkgp8eQRoUnTTz_OZwMEsZqsG7PzWFuQffv7Y', 'results': [{'business_st
tus': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.4522222, 'lng': -122.1661111}, 'viewport': {'northeast': {'lat': 37.45368197989271, 'lng': -122.1650791201073}, 'sou
hwest': {'lat': 37.45098232010727, 'lng': -122.1677787798927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '83aa3dba2f9f4aeb
b49ed92f74abe010398f16a', 'name': 'BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp; Event Space', 'opening_hours': {'open_now': False}, 'photos': [{'height': 1
24, 'html_attributions': ['&lt;a href="https://maps.google.com/maps/contrib/109071310568073474532"&gt;Boost Ventures&lt;/a&gt;'], 'photo_reference': 'CmRaAAAAVHi9Mc5N4rwtg7oSunQr545R18P
sgHgh92ODUQ4pL_Sc_s6nhBkk4_xK027AdctQEofpwVFlpTTkM2Bs-URTUqISKYOZqWBFgupe7NDTUSb68oC32Y8AV5x5iUbh65OEhAO71DTWNwWYDK2X04iPiaMGhTPZrlZvJcTN38b7lcMAXhOMevL5g', 'width': 2152}],
'place_id': 'ChIJS7Ac0Qu7j4ARkgnXFqygEM8', 'plus_code': {'compound_code': 'FR2M+VH Menlo Park, California', 'global_code': '849VFR2M+VH'}, 'rating': 4.8, 'reference': 'ChIJS
Ac0Qu7j4ARkgnXFqygEM8', 'scope': 'GOOGLE', 'types': ['point_of_interest', 'establishment'], 'user_ratings_total': 63, 'vicinity': '68 Willow Rd, Menlo Park'}, {'business_sta
us': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.458447, 'lng': -122.1729745}, 'viewport': {'northeast': {'lat': 37.45983937989272, 'lng': -122.1715244701073}, 'south
est': {'lat': 37.45713972010728, 'lng': -122.1742241298927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '1a4337e0ce2b385bb9
05778fbc45fb6a0daba2c', 'name': 'Startup Capital Ventures', '

&gt;&gt;&gt; [item['name'] for item in place['results']]
['BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp; Event Space', 'Startup Capital Ventures', 'Startup Rabbit', 'Cab Startup', 'Startup Launchpad, Inc', 'BootUpWorld', 'Startup Realty', 'Plug and Play Tech Center', 'Mercury', 'Palo-Alto Startup House', 'Bay Area Startups Services, Inc', 'Nuro', 'The Hive', 'Starship Technologies', EquityBee', 'Fyde', 'HelloStartups', 'sFoundation Inc.', 'Y Combinator', 'Osaka Innovation Hub Silicon Valley Office']
</code></pre></div></div>

<p>Find the lat,long of Google’s office:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; gmaps_geo = googlemaps.Client(key='YOUR GEOCODING KEY')
&gt;&gt;&gt; place = gmaps_geo.geocode(address="1600 Amphitheatre Parkway, Mountain View, CA")

&gt;&gt;&gt; place
[{'access_points': [{'access_point_type': 'TYPE_SEGMENT', 'location': {'latitude': 37.4213102, 'longitude': -122.0852443}, 'location_on_segment': {'latitude': 37.4212816, 'lngitude': -122.0852472}, 'place_id': 'ChIJpdYZQgK6j4ARnmfrthhmnZ8', 'segment_position': 0.5404474139213562, 'unsuitable_travel_modes': []}], 'address_components': [{'long_nae': '1600', 'short_name': '1600', 'types': ['street_number']}, {'long_name': 'Amphitheatre Parkway', 'short_name': 'Amphitheatre Pkwy', 'types': ['route']}, {'long_name': 'Muntain View', 'short_name': 'Mountain View', 'types': ['locality', 'political']}, {'long_name': 'Santa Clara County', 'short_name': 'Santa Clara County', 'types': ['administative_area_level_2', 'political']}, {'long_name': 'California', 'short_name': 'CA', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'sort_name': 'US', 'types': ['country', 'political']}, {'long_name': '94043', 'short_name': '94043', 'types': ['postal_code']}], 'formatted_address': '1600 Amphitheatre Pkwy, ountain View, CA 94043, USA', 'geometry': {'location': {'lat': 37.4223105, 'lng': -122.0846329}, 'location_type': 'ROOFTOP', 'viewport': {'northeast': {'lat': 37.423659480295, 'lng': -122.0832839197085}, 'southwest': {'lat': 37.42096151970851, 'lng': -122.0859818802915}}}, 'place_id': 'ChIJtYuu0V25j4ARwu5e4wwRYgE', 'plus_code': {'compound_code' 'CWC8+W4 Mountain View, CA, United States', 'global_code': '849VCWC8+W4'}, 'types': ['street_address']}]
</code></pre></div></div>

<p>Pulling the 2nd page and next pages:</p>

<p><strong>TODO</strong></p>

<h2 id="google-maps-api-with-python-requests">Google Maps API with Python Requests</h2>

<p>This is how you use <code class="language-plaintext highlighter-rouge">requests</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import requests

userdata = {"firstname": "Homer", "lastname": "Simpson", "password": "beer123"}
resp = requests.post('http://www.springfield.com/user', data=userdata)
resp.json()
</code></pre></div></div>

<p><strong>TODO</strong></p>

<h2 id="google-maps-api-with-python-httpclient">Google Maps API with Python http.client</h2>

<p>In comparison to <code class="language-plaintext highlighter-rouge">http.client</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import http.client

conn = http.client.HTTPSConnection("springfield.com)
key = api_key
auth_token = {'Authorization': 'key '+key}
payload = "{}"
headers = auth_token
params = '/api/v3/?page_size='+str(quantity)
  
conn.request("GET", params, payload, headers=headers)

# Get the response, decode the bytes response
response = conn.getresponse()
string = response.read().decode()

# Load the string into JSON
json_data = json.loads(string)
</code></pre></div></div>

<p><strong>TODO</strong></p>

<h2 id="google-maps-api-billing">Google Maps API Billing</h2>

<p><strong>TODO</strong></p>
:ET