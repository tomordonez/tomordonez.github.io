I"¨<p>Applying D3 Scales scaleBand and scaleLinear in a bar chart.</p>

<p>Follow these to understand the code below:</p>

<ul>
  <li><a href="../setup-d3-step-by-step/">Setup D3 Step by Step</a></li>
  <li><a href="../d3-drawing-svg/">D3 Drawing SVG</a></li>
  <li><a href="../d3-creating-a-bar-chart/">D3 Creating a Bar Chart</a></li>
  <li><a href="../d3-using-scales/">D3 Using Scales</a></li>
  <li><a href="../d3-linear-scale/">D3 Linear Scale</a></li>
  <li><a href="../d3-band-scale/">D3 Band Scale</a></li>
</ul>

<p>Here is a summary:</p>

<ul>
  <li>Set the width and height of the SVG canvas</li>
  <li>Set padding for the canvas</li>
  <li>Create a function to parse CSV dates from string to type date</li>
  <li>Use promises to load the CSV</li>
  <li>Scale the width and height of each rectangle of the bar chart</li>
  <li>Create rectangle elements and append the data to the DOM</li>
</ul>

<h2 id="d3-scales-in-a-bar-chart">D3 Scales in a Bar Chart</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select("body")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

var parseTime = d3.timeParse("%Y");

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv("file.csv", rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(d3.range(dataset.length))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, function(d) { return d.population; })])
               .range([h - padding, padding]);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", function(d, i) {
           return xScale(i);
       })
       .attr("y", function(d) {
           return yScale(d.population);
       })
       .attr("width", xScale.bandwidth())
       .attr("height", function(d) {
           return h - padding - yScale(d.population);
       })
       .attr("fill", "teal");
});
</code></pre></div></div>

<p>The result is this bar chart:</p>

<div id="d3-barchart-vis"></div>

<p>The <code class="language-plaintext highlighter-rouge">HTML</code> is this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;svg width="500" height="300"&gt;
    &lt;rect x="52" y="205" width="101" height="55" fill="teal"&gt;&lt;/rect&gt;
    &lt;rect x="164" y="150" width="101" height="110" fill="teal"&gt;&lt;/rect&gt;
    &lt;rect x="276" y="95" width="101" height="165" fill="teal"&gt;&lt;/rect&gt;
    &lt;rect x="388" y="40" width="101" height="220" fill="teal"&gt;&lt;/rect&gt;
&lt;/svg&gt;
</code></pre></div></div>

<p>You can use <code class="language-plaintext highlighter-rouge">console.log()</code> to test the output such as in here:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svg.selectAll("rect")
   .data(dataset)
   .enter()
   .append("rect")
   .attr("x", function(d, i) {

       console.log("x");
       console.log(d);
       console.log(xScale.domain());
       console.log(xScale.range());
       console.log(xScale.paddingInner());
       console.log(xScale.paddingOuter());
       console.log(xScale.bandwidth());
       console.log(xScale(i));

       return xScale(i);
   })
</code></pre></div></div>

<script type="text/javascript" src="../assets/js/d3.min.js"></script>

<script type="text/javascript" src="../assets/js/d3-barchart-vis.js"></script>

:ET