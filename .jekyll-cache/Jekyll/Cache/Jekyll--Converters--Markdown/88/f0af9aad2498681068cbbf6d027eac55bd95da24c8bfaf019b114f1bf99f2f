I"'é<p>What is the best time to run? According to science it depends on the ozone levels where you live.</p>

<p>(I published this story last year in another website. I updated some code and plots)</p>

<h2 id="the-best-time-to-run-in-san-francisco-is-at-6am">The best time to run in San Francisco is at 6am.</h2>

<p><img src="/assets/images/ozone-sf-2016.jpg" alt="Best time to run in San Francisco" /></p>

<h2 id="the-best-time-to-run-in-miami-is-at-6am-or-7am-but-not-at-noon">The best time to run in Miami is at 6am or 7am but not at noon.</h2>

<p><img src="/assets/images/ozone-miami-2016.jpg" alt="Best time to run in Miami" /></p>

<p>I studied ozone levels from a data set that showed hourly measurements of ozone levels for different cities in the US for 2016.</p>

<h2 id="ozone-who">Ozone who?</h2>

<p>Wikipedia says that ozone is a pale blue gas with a bad smell.</p>

<ul>
  <li>Ozone odour is sharp, smells like chlorine and is measured in parts per billion (ppb).</li>
  <li>Concentrations of 100ppb and above damages respiratory tissues. Which makes ozone a respiratory hazard near ground level.</li>
</ul>

<p>You might also know ozone as in ‚Äúozone layer‚Äù. Which is a portion of the stratosphere. About 20 miles above the ground.</p>

<p>Just to give you a better reference. Perhaps you remember the pilot saying ‚ÄúWe are at 35,000 feet now you can watch a movie and eat peanuts‚Äù. The ozone layer is at about 100,000 feet.</p>

<p>The ozone layer prevents UV light from reaching the surface. Which is actually good. But ozone at surface level. Not good.</p>

<p>Bad ozone is due to‚Ä¶drum roll‚Ä¶fossil fuel burning.</p>

<h2 id="example-of-fossil-fuel-burning">Example of fossil fuel burning</h2>

<p><img src="/assets/images/ozone-factory-bad.jpg" alt="Fossil fuel burning" /></p>

<h2 id="factories-burning-fossil-fuel">Factories burning fossil fuel</h2>

<p><img src="/assets/images/ozone-factory-very-bad.jpg" alt="Factories burning fossil fuel" /></p>

<h2 id="cars-in-traffic-burning-fossil-fuel">Cars in traffic burning fossil fuel</h2>

<p><img src="/assets/images/ozone-traffic-bad.jpg" alt="Cars burning fossil fuel" /></p>

<h2 id="data-about-ozone-levels">Data About Ozone Levels</h2>

<p>Now that you know how bad ozone is created let‚Äôs look at some data.</p>

<p>The Environmental Protection Agency (EPA) website has data sets about ozone levels in the US since 1980.</p>

<p>I downloaded 2 data sets:</p>

<p>Hourly ozone levels in the US from 2016. The zip file was 69MB. Uncompressed, the csv file is 2.1GB.</p>

<p>The other data set was daily AQI by county from 2016. The zip file was 1.6MB and the csv file was 26.4MB.</p>

<p><code class="language-plaintext highlighter-rouge">AQI</code> stands for <code class="language-plaintext highlighter-rouge">Air Quality Index</code>. A measure developed by EPA to explain pollution levels to the general public.</p>

<p>I used <code class="language-plaintext highlighter-rouge">Rstudio</code> to open and analyze the data. Rstudio is an open source software for <code class="language-plaintext highlighter-rouge">R</code>, a programming language for statistical computing.</p>

<h2 id="loading-the-data-into-rstudio">Loading the data into Rstudio</h2>

<p>This process comes from the Coursera class ‚ÄúManaging Data Analysis‚Äù.</p>

<p>Setup the project:</p>

<ol>
  <li>File New Project</li>
  <li>New Directory</li>
  <li>Empty Project</li>
  <li>Enter name and browse to subdirectory</li>
</ol>

<h2 id="install-readr">Install <code class="language-plaintext highlighter-rouge">readr</code></h2>

<p>If you don‚Äôt have the package <code class="language-plaintext highlighter-rouge">readr</code> you need to install it. It will take about 5 minutes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; install.packages("readr")
</code></pre></div></div>

<p>The library <code class="language-plaintext highlighter-rouge">readr</code> is needed to read <code class="language-plaintext highlighter-rouge">rectangular data</code> such as <code class="language-plaintext highlighter-rouge">csv</code>.</p>

<p>Then load the library:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; library(readr)
</code></pre></div></div>

<h2 id="load-the-csv-file-with-read_csv">Load the <code class="language-plaintext highlighter-rouge">CSV</code> file with <code class="language-plaintext highlighter-rouge">read_csv</code></h2>

<p>Load the <code class="language-plaintext highlighter-rouge">CSV</code> file and create an object. The function <code class="language-plaintext highlighter-rouge">read_csv</code> converts the <code class="language-plaintext highlighter-rouge">csv</code> file into a data frame. If you don‚Äôt specify the types for columns, strange things happen.</p>

<p>For example the data set has a column called <code class="language-plaintext highlighter-rouge">Time.Local</code>, which by default is of type integer. If you run a plot using Time.Local you will get the time in seconds instead of hours, such as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3600, representing 1am
7200, representing 2am
and so on...
</code></pre></div></div>

<p>The column type has to be set to <code class="language-plaintext highlighter-rouge">c</code> character so that <code class="language-plaintext highlighter-rouge">Time.Local</code> can take values like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00:00
01:00
02:00
and so on...
</code></pre></div></div>

<p>Setting the column types depend on the columns.</p>

<p>But how do you set them up if you haven‚Äôt loaded the data?</p>

<p>The data source should have a description of the data. In this case there is more information about this data set on the <a href="http://aqsdr1.epa.gov/aqsweb/aqstmp/airdata/FileFormats.html#_hourly_data_files" target="_blank">EPA website</a>.</p>

<p><img src="/assets/images/ozone-data-set-format-1.png" alt="Ozone Data Set Format" /></p>

<p><img src="/assets/images/ozone-data-set-format-2.png" alt="Ozone Data Set Format" /></p>

<p><img src="/assets/images/ozone-data-set-format-3.png" alt="Ozone Data Set Format" /></p>

<p>Here is the line to load the <code class="language-plaintext highlighter-rouge">CSV</code> into the object <code class="language-plaintext highlighter-rouge">ozone</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; ozone &lt;- read_csv("ozone_data_2016.csv", 
col_types = "ccccinnccccccncnnccccccc")
</code></pre></div></div>

<h2 id="get-the-names-of-the-columns">Get the names of the columns</h2>

<p>If you call this function: <code class="language-plaintext highlighter-rouge">names(ozone)</code> you get this result:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; names(ozone)
 [1] "State Code"      "County Code"         "Site Num"           
 [4] "Parameter Code"  "POC"                 "Latitude"           
 [7] "Longitude"       "Datum"               "Parameter Name"     
[10] "Date Local"      "Time Local"          "Date GMT"           
[13] "Time GMT"        "Sample Measurement"  "Units of Measure"   
[16] "MDL"             "Uncertainty"         "Qualifier"          
[19] "Method Type"     "Method Code"         "Method Name"        
[22] "State Name"      "County Name"         "Date of Last Change"
</code></pre></div></div>

<p>By definition <code class="language-plaintext highlighter-rouge">names</code> is used to get or set the name of an object.</p>

<p>If the object is a dataframe it gets the names of the columns.</p>

<h2 id="normalize-the-column-names">Normalize the column names</h2>

<p>If you call this function: <code class="language-plaintext highlighter-rouge">make.names(names(ozone))</code> you get this result:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; make.names(names(ozone))
 [1] "State.Code"      "County.Code"         "Site.Num"           
 [4] "Parameter.Code"  "POC"                 "Latitude"           
 [7] "Longitude"       "Datum"               "Parameter.Name"     
[10] "Date.Local"      "Time.Local"          "Date.GMT"           
[13] "Time.GMT"        "Sample.Measurement"  "Units.of.Measure"   
[16] "MDL"             "Uncertainty"         "Qualifier"          
[19] "Method.Type"     "Method.Code"         "Method.Name"        
[22] "State.Name"      "County.Name"         "Date.of.Last.Change"
</code></pre></div></div>

<p>By definition <code class="language-plaintext highlighter-rouge">make.names</code> is used to make syntactically valid names out of character vectors. The <code class="language-plaintext highlighter-rouge">help</code> page explains that syntactically valid names consist of letters, numbers and dot or underline and start with a letter or the dot but not followed by a number. For instance <code class="language-plaintext highlighter-rouge">.2file</code> is not a valid name.</p>

<p>I am thinking that one of the reasons for this conversion is the problem of spaces in character strings. For instance, when using files and directories in Linux. You need to escape the space with <code class="language-plaintext highlighter-rouge">\ </code>. Otherwise you should not use spaces when naming files or directories.</p>

<p>To normalize the column names, and replace spaces with periods, use: <code class="language-plaintext highlighter-rouge">make.names(names(ozone))</code>.</p>

<h2 id="replace-the-names-of-columns">Replace the names of columns</h2>

<p>Finally, this is used to set this conversion back to the <code class="language-plaintext highlighter-rouge">names</code> object:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; names(ozone) &lt;- make.names(names(ozone))
</code></pre></div></div>

<p>Now, when you call <code class="language-plaintext highlighter-rouge">names(ozone)</code> the spaces are replaced by dots.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; names(ozone)
 [1] "State.Code"      "County.Code"         "Site.Num"           
 [4] "Parameter.Code"  "POC"                 "Latitude"           
 [7] "Longitude"       "Datum"               "Parameter.Name"     
[10] "Date.Local"      "Time.Local"          "Date.GMT"           
[13] "Time.GMT"        "Sample.Measurement"  "Units.of.Measure"   
[16] "MDL"             "Uncertainty"         "Qualifier"          
[19] "Method.Type"     "Method.Code"         "Method.Name"        
[22] "State.Name"      "County.Name"         "Date.of.Last.Change"
</code></pre></div></div>

<h2 id="reviewing-the-top-and-bottom">Reviewing the top and bottom</h2>

<p>Check the number of rows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; nrow(ozone)
[1] 9124268
</code></pre></div></div>

<p>Check the number of columns:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; ncol(ozone)
[1] 24
</code></pre></div></div>

<p>Then check the top of the file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; head(ozone[, c(6:7, 10)])

# A tibble: 6 x 3
Latitude Longitude Date.Local
      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;     
1     30.5     -87.9 2016-03-01
2     30.5     -87.9 2016-03-01
3     30.5     -87.9 2016-03-01
4     30.5     -87.9 2016-03-01
5     30.5     -87.9 2016-03-01
6     30.5     -87.9 2016-03-01
</code></pre></div></div>

<p>Check the bottom of the file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; tail(ozone[, c(6:7, 10)])

# A tibble: 6 x 3
Latitude Longitude Date.Local
    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;     
1     18.2     -65.9 2016-12-31
2     18.2     -65.9 2016-12-31
3     18.2     -65.9 2016-12-31
4     18.2     -65.9 2016-12-31
5     18.2     -65.9 2016-12-31
6     18.2     -65.9 2016-12-31
</code></pre></div></div>

<h2 id="check-the-number-of-records-for-each-hour">Check the number of records for each hour</h2>

<p>Using the <code class="language-plaintext highlighter-rouge">table</code> function. This function ‚Äúuses the cross classifying factors to build a contingency table of counts at each combination of factor levels‚Äù.</p>

<p>In this case I know that the ozone levels are measured every hour from midnight to noon to 11pm. I would like to know the number of records for each hour.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>table(ozone$Time.Local)
</code></pre></div></div>

<p>This results in:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00:00  01:00  02:00  03:00  04:00  05:00  06:00  07:00  08:00  
369489 373144 359722 358576 363421 385829 386222 384176 381303 
09:00  10:00  11:00  12:00  13:00  14:00  15:00  16:00
379689 379424 380814 381202 383439 385152 386580 387565
17:00  18:00  19:00  20:00  21:00  22:00  23:00 
388252 388576 388656 388650 387492 377278 379617
</code></pre></div></div>

<h2 id="what-does-this-data-mean">What does this data mean?</h2>

<p>I selected and filtered parts of the data to understand more about it.</p>

<p>Was the data grouped by state? Or was the data grouped by hour?</p>

<p>I learned that there are monitors all around the US that can measure ozone levels.</p>

<h2 id="install-dplyr">Install <code class="language-plaintext highlighter-rouge">dplyr</code></h2>

<p>The next step requires to use the library <code class="language-plaintext highlighter-rouge">dplyr</code>. Which is the next iteration of <code class="language-plaintext highlighter-rouge">plyr</code>, a set of tools for splitting, applying and combining data. <code class="language-plaintext highlighter-rouge">dplyr</code> ‚Äúprovides a flexible grammar of data manipulation‚Ä¶focused on tools for working with data frames‚Äù.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; install.packages("dplyr")
</code></pre></div></div>

<p>This might ask to restart the <code class="language-plaintext highlighter-rouge">R</code> session before installing. Then try again. Now load the library.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; library(dplyr)
</code></pre></div></div>

<h2 id="us-states-in-the-data-set">US States in the data set</h2>

<p>I wanted to see which states were included in the data set I loaded.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; select(ozone, State.Name) %&gt;% unique

# A tibble: 52 x 1
State.Name          
   &lt;chr&gt;               
 1 Alabama             
 2 Alaska              
 3 Arizona             
 4 Arkansas            
 5 California          
 6 Colorado            
 7 Connecticut         
 8 Delaware            
 9 District Of Columbia
10 Florida             
# ... with 42 more rows
</code></pre></div></div>

<h2 id="ozone-levels-in-florida">Ozone levels in Florida</h2>

<p>I filtered the data set to see the ozone levels in Florida on July 9, 2016 at 6am for all counties</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; filter(ozone, State.Name == "Florida", 
Date.Local == "2016-07-09", 
Time.Local == "06:00") %&gt;% select(County.Name, 
    Sample.Measurement)
</code></pre></div></div>

<p>The result was:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># A tibble: 58 x 2
   County.Name Sample.Measurement
         &lt;chr&gt;              &lt;dbl&gt;
 1     Alachua              0.002
 2       Baker              0.001
 3         Bay              0.017
 4     Brevard              0.014
 5     Brevard              0.016
 6     Broward              0.005
 7     Broward              0.004
 8     Broward              0.004
 9     Broward              0.008
10     Collier              0.004
# ... with 48 more rows
</code></pre></div></div>

<h2 id="convert-ppm-parts-per-million-to-ppm-per-billion">Convert PPM (parts per million) to PPM (per billion)</h2>

<p>The sample measurement has units of <code class="language-plaintext highlighter-rouge">ppm</code> (parts per million).</p>

<p>To convert to <code class="language-plaintext highlighter-rouge">ppb</code> (parts per billion) you just move the dot three times to the right.</p>

<p>For instance, the first row that says <code class="language-plaintext highlighter-rouge">0.002 ppm</code> converts to <code class="language-plaintext highlighter-rouge">2 ppb</code>.</p>

<p>I learned that the EPA has an <code class="language-plaintext highlighter-rouge">AQI</code> calculator to convert from ppb to AQI (air quality index).</p>

<p>In the AQI calculator you have a few choices as shown here:</p>

<p><img src="/assets/images/aqi-calculator-ppb-to-aqi.png" alt="AQI air quality index calculator" /></p>

<ul>
  <li>Select a pollutant: O3 - Ozone (8hr avg) or (1hr avg)</li>
  <li>Units required: ppb</li>
  <li>Enter the concentration</li>
  <li>Calculate</li>
</ul>

<p>The way to choose between 8hr and 1hr is:</p>

<p><code class="language-plaintext highlighter-rouge">AQI</code> values of <code class="language-plaintext highlighter-rouge">301</code> or greater are calculated with 1-hr ozone concentrations.</p>

<h2 id="aqi-categories">AQI Categories</h2>

<p>The EPA has a great website to learn more about the <a href="https://airnow.gov/index.cfm?action=aqibasics.aqi#good" target="_blank">
Air Quality Index (AQI)</a>.</p>

<p>The AQI is categorized like this:</p>

<ul>
  <li><strong>0-50</strong>. Good. Green</li>
  <li><strong>51-100</strong>. Moderate. Yellow</li>
  <li><strong>101-150</strong>. Unhealthy for sensitive groups. Orange</li>
  <li><strong>151-200</strong>. Unhealthy. Red</li>
  <li><strong>201-300</strong>. Very unhealthy. Purple</li>
  <li><strong>301-500</strong>. Hazardous. Maroon.</li>
</ul>

<p>This information was very helpful to understand the data</p>

<h2 id="very-unhealthy-jefferson-county-alabama">Very Unhealthy Jefferson county, Alabama</h2>

<p>I filtered the data to find ozone measurements above 0.100 ppm (aka 100ppb). Which calculates to an AQI of 187 (Unhealthy).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; filter(ozone, Sample.Measurement &gt; 0.1) 
%&gt;% select(State.Name, County.Name, Date.Local, 
    Time.Local, Sample.Measurement)

# A tibble: 1,407 x 5
State.Name   County.Name Date.Local Time.Local Sample.Measurement
.    &lt;chr&gt;      &lt;chr&gt;     &lt;date&gt;     &lt;time&gt;         &lt;dbl&gt;
1    Alabama   Jefferson   2016-02-23   12:00:00   0.346
2    Alabama   Jefferson   2016-02-23   13:00:00   0.202
3    Alabama   Russell     2016-04-18   14:00:00   0.101
4    Alaska    Matanuska   2016-04-08   02:00:00   0.102
5    Arizona   Gila        2016-11-26   17:00:00   0.145
6    Arkansas  Crittenden  2016-06-10   13:00:00   0.107
7    Arkansas  Crittenden  2016-06-10   14:00:00   0.113
8    Arkansas  Crittenden  2016-06-10   15:00:00   0.104
9  California  Alameda     2016-06-03   15:00:00   0.102
10 California  Alameda     2016-07-26   15:00:00   0.102
# ... with 1,575 more rows
</code></pre></div></div>

<p>This shows that on <code class="language-plaintext highlighter-rouge">February 23, 2016</code> at noon, there was a measurement of <code class="language-plaintext highlighter-rouge">346ppb</code> in Jefferson county, Alabama.</p>

<p>Converted to AQI results in <code class="language-plaintext highlighter-rouge">276</code> aka ‚ÄúVery Unhealthy‚Äù and very close to ‚ÄúHazardous‚Äù, which is described as ‚ÄúHealth warnings of emergency conditions. The entire population is more likely to be affected.‚Äù</p>

<p>After a quick Google search I found that Jefferson county is amongst the top most polluted counties in the US. Yikes!</p>

<p><img src="/assets/images/jefferson-county-alabama.png" alt="Air quality in Jefferson County, Alabama" /></p>

<p>I read on Wikipedia that before Detroit. This county was the largest bankruptcy in the US with corruption being a big cause. Not sure if there is a correlation between corruption and air quality level.</p>

<p>It is worth exploring this data into more detail to find some correlation and try to answer a lot of interesting questions. Such as the correlation of corruption and air quality level.</p>

<p>For now let‚Äôs just look at hourly data from some cities to see when is the best time to run.</p>

<h2 id="plotting-the-best-time-to-run">Plotting the best time to run</h2>

<p>I know the names of some state counties in Florida. For example, for Miami, I know that the county is called ‚ÄúMiami Dade‚Äù but I wasn‚Äôt sure how they added this value into the data set. If they put ‚ÄúDade‚Äù or ‚ÄúMiami‚Äù or what combination of Miami and Dade.</p>

<p>For each state I created vectors with the names of counties. I visualized the vectors into a table and then created a filter for the specific county.</p>

<p>Finally, I plotted <code class="language-plaintext highlighter-rouge">Time vs Sample Measurement</code>.</p>

<p>I suffered a little bit making these plots, as noted below.</p>

<h2 id="plotting-workflow">Plotting Workflow</h2>

<p>For example, look at the plotting workflow for Miami.</p>

<p>I created a vector with Florida counties:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; florida.counties &lt;- filter(ozone, 
    State.Name == "Florida") %&gt;% 
    select(County.Name) %&gt;% unique
</code></pre></div></div>

<p>Then created a view:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; View(florida.counties)
</code></pre></div></div>

<p><img src="/assets/images/florida-counties.png" alt="Florida Counties" /></p>

<p>On the view I saw they had it as <code class="language-plaintext highlighter-rouge">Miami-Dade</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; ozone.miami.2016 &lt;- filter(ozone, 
    County.Name == "Miami-Dade") %&gt;% 
    select(Date.Local, Time.Local, 
        Sample.Measurement)
</code></pre></div></div>

<h2 id="troubleshooting-drawing-the-plot">Troubleshooting drawing the Plot</h2>

<p>I filtered by county name and then plotted <code class="language-plaintext highlighter-rouge">Time.Local</code> vs <code class="language-plaintext highlighter-rouge">Sample.Measurement</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; plot(ozone.miami.2016$Time.Local, 
    ozone.miami.2016$Sample.Measurement)
</code></pre></div></div>

<p>The output was an error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error in plot.window(...) : need finite 
'xlim' values
In addition: Warning messages:
1: In xy.coords(x, y, xlabel, ylabel, log)
 : NAs introduced by coercion
2: In min(x) : no non-missing arguments
 to min; returning Inf
3: In max(x) : no non-missing arguments
 to max; returning -Inf
</code></pre></div></div>

<p>The error says that one of the coordinates is a vector with <code class="language-plaintext highlighter-rouge">NAs</code>.</p>

<p>I looked up the types for each variable:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; class(ozone.miami.2016$Time.Local)
[1] "character"
&gt; class(ozone.miami.2016$Sample.Measurement)
[1] "numeric"
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Time.Local</code> is of type <code class="language-plaintext highlighter-rouge">character</code> and <code class="language-plaintext highlighter-rouge">Sample.Measurement</code> is of type <code class="language-plaintext highlighter-rouge">numeric</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; head(ozone$Time.Local)
[1] "15:00" "16:00" "17:00" "18:00" "19:00" "20:00"

&gt; head(ozone$Sample.Measurement)
[1] 0.041 0.041 0.042 0.041 0.038 0.038
</code></pre></div></div>

<p>You cannot plot character vs numeric.</p>

<p>To prove that <code class="language-plaintext highlighter-rouge">Time.Local</code> was a vector with <code class="language-plaintext highlighter-rouge">NAs</code> I used the function <code class="language-plaintext highlighter-rouge">strptime</code>.</p>

<p>The function <code class="language-plaintext highlighter-rouge">strptime</code> is used to convert between character representations and objects of classes ‚ÄúPOSIXlt‚Äù and ‚ÄúPOSIXct‚Äù representing calendar dates and times.</p>

<p>I read more about <code class="language-plaintext highlighter-rouge">POSIXt</code> and it seems to be a complicated topic as described <a href="http://biostat.mc.vanderbilt.edu/wiki/pub/Main/ColeBeck/datestimes.pdf" target="_blank">here</a>. I don‚Äôt want to get into much detail about this now.</p>

<p>The <code class="language-plaintext highlighter-rouge">strptime</code> function is used like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strptime(x, format, tz = "")
  
x: An object to be converted: a character vector
for strptime, an object which can be converted to
"POSIXlt" for strftime.

format: A character string. The default for
the format methods is "%Y-%m-%d %H:%M:%S".

tz: A character string specifying the
time zone to be used for the conversion
</code></pre></div></div>

<p>I ran the <code class="language-plaintext highlighter-rouge">strptime</code> function like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; strptime(ozone.miami.2016$Time.Local, '%H:%M:%S')
</code></pre></div></div>

<p>The result was something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] NA NA NA NA NA NA NA
NA NA NA NA NA NA NA NA 
NA NA NA NA NA NA NA NA 
NA NA NA
</code></pre></div></div>

<p>As far as the error saying:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>In xy.coords(x, y, xlabel, ylabel, log)
 : NAs introduced by coercion
</code></pre></div></div>

<p>I assume that <code class="language-plaintext highlighter-rouge">plot</code> is trying to make <code class="language-plaintext highlighter-rouge">Time.Local</code> which is a character element into numeric data. And when it fails to do this, it is returning NAs. (although I might be wrong about this).</p>

<h2 id="plotting-best-time-to-run">Plotting Best Time to Run</h2>

<p>Instead I thought that there is a way to plot <code class="language-plaintext highlighter-rouge">Time.Local</code> as a factor.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; plot(factor(ozone.miami.2016$Time.Local), 
ozone.miami.2016$Sample.Measurement, 
main = "Best Time to Run in Miami", 
xlab = "Hour", ylab = "Ozone level in ppm")
</code></pre></div></div>

<h2 id="troubleshooting-lower-case-and-upper-case-variables">Troubleshooting lower case and UPPER case variables</h2>

<p>I also suffered a little bit with lower case and upper case variables.</p>

<p>To get the list of <code class="language-plaintext highlighter-rouge">State.Name</code> I did:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; unique(ozone$State.Name)
 [1] "Alabama"      "Alaska"     "Arizona"             
 [4] "Arkansas"     "California" "Colorado"            
 [7] "Connecticut"  "Delaware"   "District Of Columbia"
[10] "Florida"      "Georgia"
</code></pre></div></div>

<p>To get the <code class="language-plaintext highlighter-rouge">County.Name</code> for <code class="language-plaintext highlighter-rouge">District of Columbia</code> I did this but didn‚Äôt get any results:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; filter(ozone, State.Name == "District of Columbia") %&gt;% 
select(County.Name) %&gt;% unique
# A tibble: 0 x 1
# ... with 1 variables: County.Name &lt;chr&gt;
</code></pre></div></div>

<p>I realized that I didn‚Äôt use the exact case. Instead of <code class="language-plaintext highlighter-rouge">Of</code>, I used <code class="language-plaintext highlighter-rouge">of</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; filter(ozone, State.Name == "District Of Columbia")
 %&gt;% select(County.Name) %&gt;% unique
# A tibble: 1 x 1
           County.Name
                 &lt;chr&gt;
1 District of Columbia
</code></pre></div></div>

<p>I figured that normalizing the data is a pain in the butt.</p>

<p>I followed the same process to plot Miami, Washington DC, San Francisco and Los Angeles.</p>

<h2 id="summary-how-to-plot-in-r">Summary how to Plot in R</h2>

<p>Get a list of States:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unique(ozone$State.Name)
</code></pre></div></div>

<p>Find the County Name. This will give you a table of County names:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>florida.counties &lt;- filter(ozone, State.Name == "Florida") 
%&gt;% select(County.Name) %&gt;% unique

View(florida.counties)
</code></pre></div></div>

<p>In this case I found the county for Miami Dade to be <code class="language-plaintext highlighter-rouge">Miami-Dade</code>.</p>

<p>Filter the data and create an object:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ozone.miami.2016 &lt;- filter(ozone, County.Name == "Miami-Dade")
 %&gt;% select(Date.Local, Time.Local, Sample.Measurement)
</code></pre></div></div>

<p>Create a plot with this object and add titles:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plot(factor(ozone.miami.2016$Time.Local), 
ozone.miami.2016$Sample.Measurement, main = 
"Best Time to Run in Miami", xlab = "Hour", 
ylab = "Ozone level in ppm")
</code></pre></div></div>

<h2 id="best-time-to-run-in-miami">Best Time To Run in Miami</h2>

<p><img src="/assets/images/ozone-miami-2016.jpg" alt="Best time to run in Miami" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; summary(ozone.miami.2016$Sample.Measurement)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02000 0.02900 0.02985 0.04000 0.09200
</code></pre></div></div>

<p><strong>Best time to run in Miami</strong></p>

<p>Looking at the ozone levels in Miami:</p>

<ul>
  <li>The lowest ozone levels in Miami are at 6am and 7am.</li>
  <li>The highest ozone levels in Miami are between 12pm and 5pm.</li>
  <li>At night the ozone levels are lower but not as low as in early morning.</li>
</ul>

<p><strong>The best time to run in Miami seems to be between 6am to 8am.</strong></p>

<h2 id="best-time-to-run-in-washington-dc">Best Time to Run in Washington DC</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dc.counties &lt;- filter(ozone, State.Name == 
    "District Of Columbia") %&gt;% select(County.Name) 
    %&gt;% unique

View(dc.counties)

ozone.dc.2016 &lt;- filter(ozone, County.Name == 
    "District of Columbia") %&gt;% select(Date.Local, 
        Time.Local, Sample.Measurement)

plot(factor(ozone.dc.2016$Time.Local),
 ozone.dc.2016$Sample.Measurement, 
 main = "Best Time to Run in DC", 
 xlab = "Hour", ylab = "Ozone level in ppm")
</code></pre></div></div>

<p><img src="/assets/images/ozone-dc-2016.jpg" alt="Best time to run in Washington DC" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; summary(ozone.dc.2016$Sample.Measurement)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01500 0.02500 0.02575 0.03500 0.09000
</code></pre></div></div>

<p>Ozone levels in Washington DC:</p>

<ul>
  <li>The lowest ozone levels in Washington DC are between 5am to 7am.</li>
  <li>The highest ozone levels are from 9am until 7pm. With the highest around noon.</li>
  <li>At night there are lower ozone levels after 8pm.</li>
</ul>

<p><strong>The best time to run in Washington DC in the morning is between 5am and 7am. Then at night, after 8pm.</strong></p>

<h2 id="best-time-to-run-in-san-francisco">Best Time to Run in San Francisco</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ca.counties &lt;- filter(ozone, State.Name == 
    "California") %&gt;% select(County.Name) 
    %&gt;% unique

View(ca.counties)

ozone.sf.2016 &lt;- filter(ozone, County.Name == 
    "San Francisco") %&gt;% select(Date.Local, 
        Time.Local, Sample.Measurement)

plot(factor(ozone.sf.2016$Time.Local), 
ozone.sf.2016$Sample.Measurement, main = 
"Best Time to Run in San Francisco", 
xlab = "Hour", ylab = "Ozone level in ppm")
</code></pre></div></div>

<p><img src="/assets/images/ozone-sf-2016.jpg" alt="Best time to run in San Francisco" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; summary(ozone.sf.2016$Sample.Measurement)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01600 0.02300 0.02243 0.03100 0.07000
</code></pre></div></div>

<p>Ozone levels in San Francisco:</p>

<ul>
  <li>The lowest ozone levels in San Francisco are between 5am and 7am.</li>
  <li>The highest ozone levels are between 12pm and 3pm.</li>
</ul>

<p><strong>The best time to run in San Francisco is between 5am and 7am. Then at night, after 7pm.</strong></p>

<h2 id="best-time-to-run-in-los-angeles">Best Time to Run in Los Angeles</h2>

<p><img src="/assets/images/ozone-la-2016.jpg" alt="Best time to run in Los Angeles" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; summary(ozone.la.2016$Sample.Measurement)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-0.00300  0.01300  0.02800  0.02864  0.04100  0.14800
</code></pre></div></div>

<p>Los Angeles has a very interesting plot. There are a lot of points away of the median, within the following ranges:</p>

<ul>
  <li><strong>51-100</strong>. Moderate. Yellow</li>
  <li><strong>101-150</strong>. Unhealthy for sensitive groups. Orange</li>
  <li><strong>151-200</strong>. Unhealthy. Red</li>
</ul>

<p>There is a maximum ozone measurement of <code class="language-plaintext highlighter-rouge">0.148</code>. Which is very close to the <code class="language-plaintext highlighter-rouge">Red</code> range, aka ‚ÄúEveryone may begin to experience health effects; members of sensitive groups may experience more serious health effects.‚Äù</p>

<p>Ozone levels in Los Angeles:</p>

<ul>
  <li>The lowest ozone levels in Los Angeles are between 4am and 6am.</li>
  <li>The highest ozone levels are between 11am and about 7pm.</li>
  <li>Then it drops around 9pm.</li>
</ul>

<p><strong>The best time to run in Los Angeles is between 4am and 6am. Don‚Äôt go out for a run between 11am and 7pm. Then you can try around 9pm.</strong></p>

<h2 id="improving-this-analysis">Improving this analysis</h2>

<ul>
  <li>I wanted to plot a comparison of the ozone levels at multiple counties for a specific time. I wasn‚Äôt sure how to do this.</li>
  <li>I wonder if there is a positive correlation between corruption and air quality level.</li>
</ul>
:ET