<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://www.tomordonez.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.tomordonez.com/" rel="alternate" type="text/html" /><updated>2020-11-04T10:02:25-05:00</updated><id>https://www.tomordonez.com/feed.xml</id><title type="html">Tom Ordonez</title><subtitle>A blog about analytics, data science, software engineering, and other thoughts.</subtitle><author><name>Tom Ordonez</name></author><entry><title type="html">Responsive Testing with Localhost and iPhone</title><link href="https://www.tomordonez.com/responsive-testing-with-localhost-iphone/" rel="alternate" type="text/html" title="Responsive Testing with Localhost and iPhone" /><published>2020-08-29T00:00:00-04:00</published><updated>2020-08-29T00:00:00-04:00</updated><id>https://www.tomordonez.com/responsive-testing-with-localhost-iphone</id><content type="html" xml:base="https://www.tomordonez.com/responsive-testing-with-localhost-iphone/">&lt;p&gt;I learned the hard way that the responsive design features from Chrome and Firefox developer tools are not an exact representation of the mobile interface.&lt;/p&gt;

&lt;p&gt;My development laptop runs on Linux Fedora, 8GB RAM, and just 64GB of disk. No way to run an iPhone simulator. I had Android installed but it was taking way too much space.&lt;/p&gt;

&lt;p&gt;I am on a quest to learn React Native to develop a set of ideas and get more hands-on experience developing apps, while also studying GCP, and following a product owner mindset. I recently completed a web design course with HTML, CSS, and JavaScript. I’ve been using Chrome and Firefox developer tools heavily to keep in mind the responsive design experience.&lt;/p&gt;

&lt;p&gt;For my last exercise in JavaScript I made a grid that changes color when you mouse over a cell. When you double click on a specific cell it changes to a different color. It works well on the browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grid-color-web-javascript.jpg&quot; alt=&quot;Grid on Web&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With Developer tools set to responsive design iPhone 6/7/8. Moving the mouse over the grid doesn’t do anything. However, you can click on a cell and the color changes. The behavior remains when you double click on a cell and it shows the correct programmed color.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grid-color-responsive-javascript.jpg&quot; alt=&quot;Grid with Responsive Design on Firefox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I deployed the grid to my website. Tested this on Safari and the behavior was different. Touching a cell didn’t do anything. Double tapping the cell changed the color. Triple tapping the cell didn’t do anything. The behavior changed completely from web to mobile.&lt;/p&gt;

&lt;p&gt;Why isn’t there a mobile simulator in Linux? Android is way too heavy and can’t install Xcode.&lt;/p&gt;

&lt;h2 id=&quot;access-localhost-from-iphone&quot;&gt;Access Localhost from iPhone&lt;/h2&gt;

&lt;p&gt;My next quest was a quick google away. I am sure you can access localhost from a phone. This took a lot of troubleshooting.&lt;/p&gt;

&lt;p&gt;The quick answer is found &lt;a href=&quot;https://stackoverflow.com/questions/3132105/how-do-you-access-a-website-running-on-localhost-from-iphone-browser/45396972&quot;&gt;on this Stackoverflow post&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find the local IP address of the computer&lt;/li&gt;
  &lt;li&gt;From your phone browse to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP:Port&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your localhost runs like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First you need to find the local IP number given to the laptop. Let’s say it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.35&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then from mobile you can browse to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;192.168.1.35:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;port-number-and-firewall&quot;&gt;Port Number and Firewall&lt;/h2&gt;

&lt;p&gt;If this doesn’t work you can try enabling incoming traffic to the port number on your firewall.&lt;/p&gt;

&lt;p&gt;This is for GNOME/Linux:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo firewall-cmd --state
running

$ firewall-cmd --help
Usage: firewall-cmd [OPTIONS...]

$ firewall-cmd --list-ports
1025-65535/udp 1025-65535/tcp

$ sudo firewall-cmd --add-port=1234/tcp

$ firewall-cmd --list-ports
1025-65535/udp 1025-65535/tcp 1234/tcp

$ sudo firewall-cmd --remove-port=1234/tcp

$ firewall-cmd --list-ports
1025-65535/udp 1025-65535/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More about firewalld &lt;a href=&quot;https://docs.fedoraproject.org/en-US/quick-docs/firewalld/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;run-localhost-on-0000&quot;&gt;Run localhost on 0.0.0.0&lt;/h2&gt;

&lt;p&gt;This is what worked for me. Running the server on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;More about the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/questions/20778771/what-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run your server like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -m http.server 1234 --bind 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Find the IP number of the laptop. Let’s say it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.35&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then from your mobile (iPhone or Android or any).&lt;/p&gt;

&lt;p&gt;Browse to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;192.168.1.35:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can test your responsive design on your mobile.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/grid-color-mobile-javascript.jpg&quot; alt=&quot;Grid on Mobile&quot; /&gt;&lt;/p&gt;</content><author><name>tom</name></author><category term="mobile" /><category term="web design" /><summary type="html">I learned the hard way that the responsive design features from Chrome and Firefox developer tools are not an exact representation of the mobile interface.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/1.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Setup Docker in Google Cloud Platform GCP</title><link href="https://www.tomordonez.com/setup-docker-google-cloud-platform-gcp/" rel="alternate" type="text/html" title="Setup Docker in Google Cloud Platform GCP" /><published>2020-08-27T00:00:00-04:00</published><updated>2020-08-27T00:00:00-04:00</updated><id>https://www.tomordonez.com/setup-docker-google-cloud-platform-gcp</id><content type="html" xml:base="https://www.tomordonez.com/setup-docker-google-cloud-platform-gcp/">&lt;p&gt;I am studying the Google Cloud Platform. I’d like to take the Associate Cloud Engineer certificate in a few months.&lt;/p&gt;

&lt;p&gt;I heard about Docker for a while but never used it. Long story short. Goodbye Virtualbox.&lt;/p&gt;

&lt;h2 id=&quot;create-a-vm-instance&quot;&gt;Create a VM instance&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Open a GCP account. Free trial has $300 credit to be used in 90 days&lt;/li&gt;
  &lt;li&gt;Create a project &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesome-proj&lt;/code&gt; (top left, next to GCP logo)&lt;/li&gt;
  &lt;li&gt;Switch to this project (if your default project is something else)&lt;/li&gt;
  &lt;li&gt;Add a VM instance (Search type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VM&lt;/code&gt;. Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add a VM instance&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Instance Name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesome-vm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Right sidebar says “You have $300 free trial credits. $24.67 monthly estimate”&lt;/li&gt;
  &lt;li&gt;Labels: (nothing)&lt;/li&gt;
  &lt;li&gt;Region: leave default&lt;/li&gt;
  &lt;li&gt;Machine configuration Series: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N1&lt;/code&gt; (default)&lt;/li&gt;
  &lt;li&gt;Machine configuration Machine type: Change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n1-standard-2: 2vCPU, 7.5GB memory&lt;/code&gt; if you wish to run big data tutorials (the recommended/default option was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n1-standard-1: 1vCPU, 3.75GB memory&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Sidebar price changed from $24.67 monthly estimate to $48.95&lt;/li&gt;
  &lt;li&gt;Container (checkbox): (nothing)&lt;/li&gt;
  &lt;li&gt;Boot disk: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Debian GNU/Linux 9&lt;/code&gt; (default)&lt;/li&gt;
  &lt;li&gt;Leave everything else default&lt;/li&gt;
  &lt;li&gt;Click Create&lt;/li&gt;
  &lt;li&gt;Check that the instance is created (green check mark)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;connect-to-the-instance&quot;&gt;Connect to the instance&lt;/h2&gt;

&lt;p&gt;(using ssh on browser)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to Google Cloud Platform logo. This shows the Project dashboard&lt;/li&gt;
  &lt;li&gt;Go to Resources. Click on Compute Engine &amp;gt; 1 instance&lt;/li&gt;
  &lt;li&gt;The VM instance is listed. Click on SSH&lt;/li&gt;
  &lt;li&gt;A popup says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connecting. Transferring SSH keys to the VM.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It opens SSH on browser&lt;/li&gt;
  &lt;li&gt;Use the top right icons to customize the shell, upload/download files, customize copy/paste&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update the instance&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-docker&quot;&gt;Install Docker&lt;/h2&gt;

&lt;p&gt;Docker install details &lt;a href=&quot;https://docs.docker.com/engine/install/debian/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
$ sudo apt-key fingerprint 0EBFCD88
$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;
$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Check the install&lt;/strong&gt;
(Need to use sudo to run docker commands)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service docker status
$ sudo docker run hello-world
$ sudo docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sunlab-docker&quot;&gt;Sunlab Docker&lt;/h2&gt;

&lt;p&gt;This is an example of a container setup for Big Data.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker run -it --privileged=true --cap-add=SYS_ADMIN -m 6144m -h bootcamp.local --name bigbox -p 2222:22 -p 9530:9530 -p 8888:8888 -v /:/mnt/host sunlab/bigbox:latest /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;playing-with-docker&quot;&gt;Playing with Docker&lt;/h2&gt;

&lt;p&gt;The terminal prompt now is root:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bootcamp /]# whoami
root

[root@bootcamp /]# ls
anaconda-post.log  bigdata-bootcamp  bin  data  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  scripts  srv  sys  tini  tmp  usr  var
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Detach the instance (keyboard shortcut one after the other fast)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl + p, ctrl + q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reattach the instance…&lt;/p&gt;

&lt;p&gt;Why can’t I find the shell? mmm right. It’s SSH on the browser.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attach the instance:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo docker attach bigbox

[root@bootcamp /]# ls
anaconda-post.log  bigdata-bootcamp  bin  data  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  scripts  srv  sys  tini  tmp  usr  var
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Start Services&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@bootcamp /]# /scripts/start-services.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some of the output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting zookeeper ... STARTED
Started Hadoop proxyserver
Started Hadoop namenode
Started Hadoop datanode (hadoop-hdfs-datanode)
Started Hadoop resourcemanager
Started Hadoop historyserver
Started Hadoop nodemanager
Starting Spark worker (spark-worker)
Starting Spark master (spark-master)
Started HBase master daemon (hbase-master)
Started HBase thrift daemon (hbase-thrift)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;editing-files&quot;&gt;Editing files&lt;/h2&gt;

&lt;p&gt;I read that you don’t have to install an editor in the Docker container. Here are two options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Edit the file locally, copy to VM instance, copy from host to Docker container&lt;/li&gt;
  &lt;li&gt;Edit the file in the VM instance with Vim, copy from host to Docker container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edit file locally&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit your file: awesome-file&lt;/li&gt;
  &lt;li&gt;Detach the instance (if attached): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl+p, ctrl+q&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy to VM instance using SSH on browser, top right wheel icon, Upload file&lt;/li&gt;
  &lt;li&gt;Copy file from host to container: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo docker cp awesome-file bigbox:/bigdata-bootcamp/sample/hadoop/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edit file in the VM instance&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Edit your file with Vim (if you dare to)&lt;/li&gt;
  &lt;li&gt;Follow same process to copy from host to docker.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>tom</name></author><category term="docker" /><category term="google cloud" /><category term="GCP" /><summary type="html">I am studying the Google Cloud Platform. I’d like to take the Associate Cloud Engineer certificate in a few months.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/1.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Google Maps API with Python</title><link href="https://www.tomordonez.com/google-maps-api-python/" rel="alternate" type="text/html" title="Google Maps API with Python" /><published>2020-05-30T00:00:00-04:00</published><updated>2020-05-30T00:00:00-04:00</updated><id>https://www.tomordonez.com/google-maps-api-python</id><content type="html" xml:base="https://www.tomordonez.com/google-maps-api-python/">&lt;p&gt;This is a tutorial to extract data from the Google Maps API using Python.&lt;/p&gt;

&lt;h2 id=&quot;get-a-google-maps-api-key&quot;&gt;Get a Google Maps API key&lt;/h2&gt;

&lt;p&gt;As shown in &lt;a href=&quot;https://developers.google.com/places/web-service/get-api-key&quot;&gt;get API key&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go to the GCP dashboard:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;APIs &amp;amp; Services&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Credentials&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Credentials&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enable-a-google-maps-api-service&quot;&gt;Enable a Google Maps API service&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the Menu&lt;/li&gt;
  &lt;li&gt;Scroll down to Google Maps&lt;/li&gt;
  &lt;li&gt;Then APIs&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Places API&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all available API services:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Places API
Maps SDK for Android
Directions API
Distance Matrix API
Maps Elevation API
Maps Embed API
Geocoding API
Geolocation API
Maps JavaScript API
Roads API
Maps SDK for iOS
Time Zone API
Maps Static API
Street View Static API
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;api-key--settings--application-restrictions&quot;&gt;API Key &amp;gt; Settings &amp;gt; Application Restrictions&lt;/h2&gt;

&lt;p&gt;Without restrictions the API key created has a warning icon.&lt;/p&gt;

&lt;p&gt;Edit the Settings for the API key.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;. For example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Maps Places API Key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application Restrictions&lt;/code&gt; controls which websites or IP addresses or applications can use the API key. You can only choose one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;: for testing purposes only.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP websites&lt;/code&gt;:for API clients that run on a web browser. These types of applications expose the API publicly. Use a service account as shown &lt;a href=&quot;https://cloud.google.com/docs/authentication/getting-started&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP addresses&lt;/code&gt;: web servers, cron jobs, etc.&lt;/li&gt;
  &lt;li&gt;Android apps&lt;/li&gt;
  &lt;li&gt;iOS apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;google-maps-api-key-best-practices&quot;&gt;Google Maps API key best practices&lt;/h2&gt;

&lt;p&gt;More about this in &lt;a href=&quot;https://developers.google.com/maps/api-key-best-practices&quot;&gt;API key best practices&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/maps/api-key-best-practices#api_key_table&quot;&gt;more best practices&lt;/a&gt;, and &lt;a href=&quot;https://cloud.google.com/docs/authentication/api-keys#api_key_restrictions&quot;&gt;API key restrictions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best practices says:&lt;/p&gt;

&lt;p&gt;You may use an unrestricted API with the Google Maps API. However, it is recommended to restrict the API keys in the following scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The test environment is public&lt;/li&gt;
  &lt;li&gt;The applications that uses the API key is ready to be used in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not sure if this is recommended. I am only going to pull data from a local test environment. I could set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;. For now I set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP addresses&lt;/code&gt; and entered my public IP address.&lt;/p&gt;

&lt;h2 id=&quot;api-key--settings--api-restrictions&quot;&gt;API Key &amp;gt; Settings &amp;gt; API restrictions&lt;/h2&gt;

&lt;p&gt;As shown in &lt;a href=&quot;https://cloud.google.com/docs/authentication/api-keys#api_restrictions&quot;&gt;API restrictions&lt;/a&gt;, it says that all API keys used in production should use API restrictions.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API restrictions&lt;/code&gt; specify the enabled APIs that can be called:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t restrict the key&lt;/li&gt;
  &lt;li&gt;Restrict the key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First I am going to test finding a place.&lt;/p&gt;

&lt;p&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Restrict the key&lt;/code&gt; and from the drop down choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Places API&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The API key now has a green check mark.&lt;/p&gt;

&lt;p&gt;These are all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API restrictions&lt;/code&gt; options:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BigQuery API
BigQuery Storage API
Cloud Datastore API
Cloud Debugger API
Cloud Logging API
Cloud Monitoring API
Cloud SQL
Cloud Storage
Cloud Trace API
Google Cloud APIs
Google Cloud Storage JSON API
Places API
Service Management API
Service Usage API
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;google-maps-places-api&quot;&gt;Google Maps Places API&lt;/h2&gt;

&lt;p&gt;More about the Places API &lt;a href=&quot;https://developers.google.com/places/web-service/intro&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each service uses an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; request and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;. The services use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;place_id&lt;/code&gt; to uniquely identify a place. This is important to review duplicates later.&lt;/p&gt;

&lt;p&gt;Find the Place ID of a place &lt;a href=&quot;https://developers.google.com/places/web-service/place-id&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;place-search&quot;&gt;Place Search&lt;/h2&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/places/web-service/search&quot;&gt;Google Maps Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As shown on the docs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Places API&lt;/code&gt; lets you search for place information using categories, establishments, points of interest, and geographic locations. Search by proximity or by string. It returns a list of places along with summary information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of Requests&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find Place&lt;/li&gt;
  &lt;li&gt;Nearby Search&lt;/li&gt;
  &lt;li&gt;Text Search&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;find-place-requests&quot;&gt;Find Place requests&lt;/h2&gt;

&lt;p&gt;Input is a text. Output is a place. Input can be a name, address, or phone number. It cannot be a lat/long number. The request must be a string. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; has this form:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://maps.googleapis.com/maps/api/place/findplacefromtext/output?parameters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Required parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;: Your API key&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt;: A string that can be a name, address, or phone number.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputtype&lt;/code&gt;: Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textquery&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phonenumber&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example, using Google Maps Python client library. I will explain the setup later:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.find_place(input=&quot;1600 Amphitheatre Parkway, Mountain View, CA&quot;, input_type=&quot;textquery&quot;)
&amp;gt;&amp;gt;&amp;gt; place
{'candidates': [{'place_id': 'ChIJtYuu0V25j4ARwu5e4wwRYgE'}], 'status': 'OK'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Other parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;: For example English &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language=&quot;en&quot;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationbias&lt;/code&gt;: Find a specific area by using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radius&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat/long&lt;/code&gt;. If this is not used, the API uses IP address.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fields&lt;/code&gt;: Types of data to return.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;language&quot;&gt;Language&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/maps/faq#languagesupport&quot;&gt;Language codes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;locationbias&quot;&gt;locationbias&lt;/h3&gt;

&lt;p&gt;Use like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;circle:radius@lat,lng
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example. Search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steakhouse&lt;/code&gt; within 2000 meters of Google’s HQ office.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=steakhouse&amp;amp;inputtype=textquery&amp;amp;fields=photos,formatted_address,name,opening_hours,rating&amp;amp;locationbias=circle:2000@37.4222339,-122.0854804&amp;amp;key=YOUR_API_KEY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fields&quot;&gt;Fields&lt;/h3&gt;

&lt;p&gt;More in the &lt;a href=&quot;https://developers.google.com/places/web-service/search#Fields&quot;&gt;official docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where it gets interesting…Billing.&lt;/p&gt;

&lt;p&gt;Types of Fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic&lt;/code&gt;: business_status, formatted_address, geometry, icon,name, permanently_closed, photos, place_id, plus_code, types&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contact&lt;/code&gt;: opening_hours&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Atmosphere&lt;/code&gt;: price_level, rating, user_ratings_total&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some services don’t allow to specify a type of field and different billing charges apply if one of them is triggered.&lt;/p&gt;

&lt;p&gt;A way to test this is looking at the response and see if it contains a field for one of these types.&lt;/p&gt;

&lt;p&gt;Example using Google Maps API Python client library:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.find_place(input=&quot;stakehouse&quot;, input_type=&quot;textquery&quot;, location_bias=&quot;circle:2000@37.4222339,-122.0854804&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'candidates': [{'place_id': 'ChIJsUEYn56wj4ARMg1qK1EVHyw'}], 'status': 'OK'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It doesn’t return much. Let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic fields&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.find_place(input=&quot;stakehouse&quot;, input_type=&quot;textquery&quot;, fields=[&quot;name&quot;, &quot;formatted_address&quot;, &quot;business_status&quot;, &quot;geometry&quot;, &quot;photos&quot;, &quot;types&quot;], location_bias=&quot;circle:2000@37.4222339,-122.0854804&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'candidates': [{'business_status': 'CLOSED_TEMPORARILY', 'formatted_address': '545 San Antonio Rd Suite 31, Mountain View, CA 94040, United States', 'geometry': {'location': {'lat': 37.4032079, 'lng': -122.1118804}, 'viewport': {'northeast': {'lat': 37.40471237989271, 'lng': -122.1105114701073}, 'southwest': {'lat': 37.40201272010727, 'lng': -12.1132111298927}}}, 'name': &quot;Paul Martin's America Mountain View&quot;, 'photos': [{'height': 4048, 'html_attributions': ['&amp;lt;a href=&quot;https://maps.google.com/maps/contrib/11203600442766896285&quot;&amp;gt;Casey DuBose&amp;lt;/a&amp;gt;'], 'photo_reference': 'CmRaAAAAit6MjPA4tMxwkAx61ZquIzBYndTl5zAcCV-bjUPhl0dm0S3giXjEANdqAvxvxsJvCehIChMcOCPVJwxIzHAQWW9Igv01P_R-gilhmU52I0MSRgBgWXh4g5N7wRQDPQKEhC2y0uoOD03_XFjS6o7xi0UGhTiLFIHq8rbIF68PRZaCoEjumKy_Q', 'width': 3036}], 'types': ['restaurant', 'food', 'point_of_interest', 'establishment']}], 'status': 'OK'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s confirm by searching for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paul Martin's America Mountain View&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Restaurant&lt;/li&gt;
  &lt;li&gt;Temporarily closed&lt;/li&gt;
  &lt;li&gt;545 San Antonio Rd Suite 31, Mountain View, CA 94040&lt;/li&gt;
  &lt;li&gt;10 min drive, 3.1 miles from Google’s office.&lt;/li&gt;
  &lt;li&gt;4.2 stars (628 reviews)&lt;/li&gt;
  &lt;li&gt;$$$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contact&lt;/code&gt; (opening_hours) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Atmosphere&lt;/code&gt; (price_level, rating, user_ratings_total) fields to see if we get the same data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.find_place(input=&quot;stakehouse&quot;, input_type=&quot;textquery&quot;, fields=[&quot;name&quot;, &quot;formatted_address&quot;, &quot;business_status&quot;, &quot;geometry&quot;, &quot;photos&quot;, &quot;types&quot;, &quot;opening_hours&quot;, &quot;price_level&quot;, &quot;rating&quot;, &quot;user_ratings_total&quot;], location_bias=&quot;circle:2000@37.4222339,-122.0854804&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'candidates': [{'business_status': 'CLOSED_TEMPORARILY', 'formatted_address': '545 San Antonio Rd Suite 31, Mountain View, CA 94040, United States', 'geometry': {'location' {'lat': 37.4032079, 'lng': -122.1118804}, 'viewport': {'northeast': {'lat': 37.40471237989271, 'lng': -122.1105114701073}, 'southwest': {'lat': 37.40201272010727, 'lng': -12.1132111298927}}}, 'name': &quot;Paul Martin's America Mountain View&quot;, 'photos': [{'height': 4048, 'html_attributions': ['&amp;lt;a href=&quot;https://maps.google.com/maps/contrib/11203600442766896285&quot;&amp;gt;Casey DuBose&amp;lt;/a&amp;gt;'], 'photo_reference': 'CmRaAAAAAUrcGJCnapLA_JhEgpZqkZy4f_B7a_jCCGESU-WWMBi50Q8ILEV818OWisSjzvBzfHA_WtdDn_45BLmrtZV5KSsrPNpxpH6mb47NSp56qzeazy9TSUje4I6ZMT4A7BIEhCJ2IM68_GY0kwK4w1IttDpGhRU3BWNHXrsBJnv2oPseqsUAyElUA', 'width': 3036}], 'price_level': 3, 'rating': 4.2, 'types': ['restaurant', 'food', 'point_of_interest' 'establishment'], 'user_ratings_total': 628}], 'status': 'OK'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nearby-search-requests&quot;&gt;Nearby Search Requests&lt;/h2&gt;

&lt;p&gt;Search within a specific area. Details in &lt;a href=&quot;https://developers.google.com/places/web-service/search#PlaceSearchRequests&quot;&gt;Google Maps Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The warning on the Doc says&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It returns all available data fields&lt;/li&gt;
  &lt;li&gt;You will be billed if it triggers types of fields (basic, contact, atmosphere)&lt;/li&gt;
  &lt;li&gt;You can’t constraint to return only specific fields&lt;/li&gt;
  &lt;li&gt;To keep from paying data you don’t need. Then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Find Place Requests&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used this service and it triggers all types of fields. You will be billed for every SKU. More about billing later.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; has this form:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://maps.googleapis.com/maps/api/place/nearbysearch/output?parameters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Required Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt;: Specified as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latitude,longitude&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radius&lt;/code&gt;: Defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meters&lt;/code&gt; with a max of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50,000&lt;/code&gt; (31 miles)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Optional Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyword&lt;/code&gt;: Matching all content that Google indexed for this place (name, address, type, customer reviews)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;: Same as before. See &lt;a href=&quot;https://developers.google.com/maps/faq#languagesupport&quot;&gt;Language codes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rankyby&lt;/code&gt;: Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distance&lt;/code&gt; and one or more of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyword&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;, to rank in ascending order from specified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;: See &lt;a href=&quot;https://developers.google.com/places/web-service/supported_types&quot;&gt;location type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pagetoken&lt;/code&gt;: Returns up to 20 results from a previous search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example, using Google Maps Python client library:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=5000, keyword=&quot;startup&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'html_attributions': [], 'results': [], 'status': 'ZERO_RESULTS'}

&amp;gt;&amp;gt;&amp;gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=10000, keyword=&quot;startup&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'html_attributions': [], 'next_page_token': 'CqQCGQEAALespF2ND-o3SI0I5SZR267A4XxtZ4LDBCBCG8SJ_IRp9ttbncIziuYJtpUNuP3pPan80VgualTqejpOwMQyHVIIKNv7MKqdJTBwVpbb6SOoSjskx6yDgaB
d5WGiKBfi7TkrCtxe5yOvJYbU6t5KH2jLrqHMLg_4woyq0_TuZTICEpU1veSLv49pLfltDXPg0bKjZSwXejRSUrwFmSfEfRlopfUhBPZNFgGhl1_Qg2XG8R9aHhrPDNhYUoZWQ3HejWw3xVeMpS5_4w_43Qy0wRemnVCPSw7FHz3o
AoCfFDFtGp66i3LlQlwQ2Vdraen-NyxoMOLKonL4YfSYst-6kyFzzCIy_Cr-w6VKCCoGJmPxLR07fjZoiE-c6pCfqepxIQC67lM0MvZV-sSAKkgp8eQRoUnTTz_OZwMEsZqsG7PzWFuQffv7Y', 'results': [{'business_st
tus': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.4522222, 'lng': -122.1661111}, 'viewport': {'northeast': {'lat': 37.45368197989271, 'lng': -122.1650791201073}, 'sou
hwest': {'lat': 37.45098232010727, 'lng': -122.1677787798927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '83aa3dba2f9f4aeb
b49ed92f74abe010398f16a', 'name': 'BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp;amp; Event Space', 'opening_hours': {'open_now': False}, 'photos': [{'height': 1
24, 'html_attributions': ['&amp;lt;a href=&quot;https://maps.google.com/maps/contrib/109071310568073474532&quot;&amp;gt;Boost Ventures&amp;lt;/a&amp;gt;'], 'photo_reference': 'CmRaAAAAVHi9Mc5N4rwtg7oSunQr545R18P
sgHgh92ODUQ4pL_Sc_s6nhBkk4_xK027AdctQEofpwVFlpTTkM2Bs-URTUqISKYOZqWBFgupe7NDTUSb68oC32Y8AV5x5iUbh65OEhAO71DTWNwWYDK2X04iPiaMGhTPZrlZvJcTN38b7lcMAXhOMevL5g', 'width': 2152}],
'place_id': 'ChIJS7Ac0Qu7j4ARkgnXFqygEM8', 'plus_code': {'compound_code': 'FR2M+VH Menlo Park, California', 'global_code': '849VFR2M+VH'}, 'rating': 4.8, 'reference': 'ChIJS
Ac0Qu7j4ARkgnXFqygEM8', 'scope': 'GOOGLE', 'types': ['point_of_interest', 'establishment'], 'user_ratings_total': 63, 'vicinity': '68 Willow Rd, Menlo Park'}, {'business_sta
us': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.458447, 'lng': -122.1729745}, 'viewport': {'northeast': {'lat': 37.45983937989272, 'lng': -122.1715244701073}, 'south
est': {'lat': 37.45713972010728, 'lng': -122.1742241298927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '1a4337e0ce2b385bb9
05778fbc45fb6a0daba2c', 'name': 'Startup Capital Ventures', '

&amp;gt;&amp;gt;&amp;gt; [item['name'] for item in place['results']]
['BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp;amp; Event Space', 'Startup Capital Ventures', 'Startup Rabbit', 'Cab Startup', 'Startup Launchpad, Inc', 'BootUpWorld', 'Startup Realty', 'Plug and Play Tech Center', 'Mercury', 'Palo-Alto Startup House', 'Bay Area Startups Services, Inc', 'Nuro', 'The Hive', 'Starship Technologies', EquityBee', 'Fyde', 'HelloStartups', 'sFoundation Inc.', 'Y Combinator', 'Osaka Innovation Hub Silicon Valley Office']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;text-search-requests&quot;&gt;Text Search Requests&lt;/h2&gt;

&lt;p&gt;Returns information for a set of places based on a string. Details in &lt;a href=&quot;https://developers.google.com/places/web-service/search#TextSearchRequests&quot;&gt;Google Maps Docs&lt;/a&gt;. For example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startups in Mountain View&lt;/code&gt;. The service is used for ambiguous address queries. More in &lt;a href=&quot;https://developers.google.com/maps/documentation/geocoding/best-practices&quot;&gt;Geocoding addresses best practices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Incomplete addresses&lt;/li&gt;
  &lt;li&gt;Poorly formatted addresses&lt;/li&gt;
  &lt;li&gt;Non-address components like business names&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The warning on the Doc says&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It returns all available data fields&lt;/li&gt;
  &lt;li&gt;You will be billed if it triggers types of fields (basic, contact, atmosphere)&lt;/li&gt;
  &lt;li&gt;You can’t constraint to return only specific fields&lt;/li&gt;
  &lt;li&gt;To keep from paying data you don’t need. Then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Find Place Requests&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; has this form:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://maps.googleapis.com/maps/api/place/textsearch/output?parameters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Required Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt;: Search string. This parameter becomes optional when you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Optional Parameters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt;: Country code top level domain. &lt;a href=&quot;https://en.wikipedia.org/wiki/CcTLD&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt;: A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latitude,longitude&lt;/code&gt;. You must use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radius&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radius&lt;/code&gt;: Distance in meters, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50,000&lt;/code&gt; max (31 miles)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt; For example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language=&quot;en&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pagetoken&lt;/code&gt;: Used to fetch the next page.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;: Restrict to a type of place as seen in &lt;a href=&quot;https://developers.google.com/places/web-service/supported_types&quot;&gt;supported types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;geocoding-request&quot;&gt;Geocoding Request&lt;/h2&gt;

&lt;p&gt;You can use these two services:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Geocoding&lt;/code&gt; to convert an address to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latitude,longitude&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reverse Geocoding&lt;/code&gt; to find the address from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat/long&lt;/code&gt; or from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;place_id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details in the &lt;a href=&quot;https://developers.google.com/maps/documentation/geocoding/start?_ga=2.123719563.1220042606.1591276309-1631786869.1590631794&quot;&gt;Geocoding API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;amp;key=YOUR_API_KEY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the Google Maps API Python client library:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.geocode(address=&quot;1600 Amphitheatre Parkway, Mountain View, CA&quot;)

googlemaps.exceptions.ApiError: REQUEST_DENIED (This API project is not authorized to use this API.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mmm. What happened? I didn’t enable the Geocode API or create a Key for this service.&lt;/p&gt;

&lt;h3 id=&quot;enable-geocoding-api&quot;&gt;Enable Geocoding API&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Go to GCP&lt;/li&gt;
  &lt;li&gt;Menu &amp;gt; Google Maps &amp;gt; APIs&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Geocoding API&lt;/code&gt; (Billing: $5/1K requests 0-100K req/mo)&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-a-geocoding-api-key&quot;&gt;Create a Geocoding API Key&lt;/h3&gt;

&lt;p&gt;Create a different API key for this service as seen on &lt;a href=&quot;https://developers.google.com/maps/api-key-best-practices&quot;&gt;API key best practices&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to GCP&lt;/li&gt;
  &lt;li&gt;Menu &amp;gt; APIs &amp;amp; Services &amp;gt; Credentials&lt;/li&gt;
  &lt;li&gt;Create Credentials &amp;gt; API key&lt;/li&gt;
  &lt;li&gt;A message says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API key created&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Restrict Key&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Change name to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Maps Geocoding API key&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Choose an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application Restriction&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API restrictions&lt;/code&gt; change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Restrict key&lt;/code&gt; and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Geocoding API&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try again. I will explain the setup later:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps_geo.geocode(address=&quot;1600 Amphitheatre Parkway, Mountain View, CA&quot;)

&amp;gt;&amp;gt;&amp;gt; place
[{'access_points': [{'access_point_type': 'TYPE_SEGMENT', 'location': {'latitude': 37.4213102, 'longitude': -122.0852443}, 'location_on_segment': {'latitude': 37.4212816, 'lngitude': -122.0852472}, 'place_id': 'ChIJpdYZQgK6j4ARnmfrthhmnZ8', 'segment_position': 0.5404474139213562, 'unsuitable_travel_modes': []}], 'address_components': [{'long_nae': '1600', 'short_name': '1600', 'types': ['street_number']}, {'long_name': 'Amphitheatre Parkway', 'short_name': 'Amphitheatre Pkwy', 'types': ['route']}, {'long_name': 'Muntain View', 'short_name': 'Mountain View', 'types': ['locality', 'political']}, {'long_name': 'Santa Clara County', 'short_name': 'Santa Clara County', 'types': ['administative_area_level_2', 'political']}, {'long_name': 'California', 'short_name': 'CA', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'sort_name': 'US', 'types': ['country', 'political']}, {'long_name': '94043', 'short_name': '94043', 'types': ['postal_code']}], 'formatted_address': '1600 Amphitheatre Pkwy, ountain View, CA 94043, USA', 'geometry': {'location': {'lat': 37.4223105, 'lng': -122.0846329}, 'location_type': 'ROOFTOP', 'viewport': {'northeast': {'lat': 37.423659480295, 'lng': -122.0832839197085}, 'southwest': {'lat': 37.42096151970851, 'lng': -122.0859818802915}}}, 'place_id': 'ChIJtYuu0V25j4ARwu5e4wwRYgE', 'plus_code': {'compound_code' 'CWC8+W4 Mountain View, CA, United States', 'global_code': '849VCWC8+W4'}, 'types': ['street_address']}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python-client-library-or-httpclient-or-requests&quot;&gt;Python client library or http.client or requests&lt;/h2&gt;

&lt;p&gt;You can use any of these options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Maps has a Python client library. &lt;a href=&quot;https://github.com/googlemaps/google-maps-services-python&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.client&lt;/code&gt; is a Python native library, part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urllib.request&lt;/code&gt; module. &lt;a href=&quot;https://docs.python.org/3/library/urllib.request.html&quot;&gt;Python docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; is a Python external library. &lt;a href=&quot;https://requests.readthedocs.io/en/master/&quot;&gt;Readthedocs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A quick search of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests vs http.client&lt;/code&gt; shows &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Why is Python 3 http.client so much faster than python-requests?&lt;/code&gt;. An answer says that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.client&lt;/code&gt; is at a lower level on the stack, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; can be slower because it adds other features. &lt;a href=&quot;https://stackoverflow.com/questions/39435443/why-is-python-3-http-client-so-much-faster-than-python-requests&quot;&gt;Stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another more popular query was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests vs urllib&lt;/code&gt;, which shows &lt;a href=&quot;https://stackoverflow.com/questions/2018026/what-are-the-differences-between-the-urllib-urllib2-urllib3-and-requests-modul&quot;&gt;this&lt;/a&gt; question: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;What are the differences between the urllib, urllib2, urllib3 and requests module?&lt;/code&gt;. The answer with the most votes recommends to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; for its simplicity and added features.&lt;/p&gt;

&lt;p&gt;The Google Maps Python client library requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; upon installation. I think that this library might be just a wrapper for requests.&lt;/p&gt;

&lt;h2 id=&quot;google-maps-api-with-google-maps-python-client-library&quot;&gt;Google Maps API with Google Maps Python client library&lt;/h2&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googlemaps/google-maps-services-python&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/googlemaps/google-maps-services-python/tree/master/tests&quot;&gt;Tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://googlemaps.github.io/google-maps-services-python/docs/index.html&quot;&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install -U googlemaps --user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output of installation was:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Downloading https://files.pythonhosted.org/packages/cb/87/5cbe65cd19defe67472db7afd84963a77fbbbe4a764320a67d4a64282b61/googlemaps-4.4.1.tar.gz
Requirement already satisfied, skipping upgrade: requests&amp;lt;3.0,&amp;gt;=2.20.0 in /usr/lib/python3.7/site-packages (from googlemaps) (2.22.0)
Requirement already satisfied, skipping upgrade: chardet&amp;lt;3.1.0,&amp;gt;=3.0.2 in /usr/lib/python3.7/site-packages (from requests&amp;lt;3.0,&amp;gt;=2.20.0-&amp;gt;googlemaps) (3.0.4)
Requirement already satisfied, skipping upgrade: idna&amp;lt;2.9,&amp;gt;=2.5 in /usr/lib/python3.7/site-packages (from requests&amp;lt;3.0,&amp;gt;=2.20.0-&amp;gt;googlemaps) (2.8)
Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,&amp;lt;1.26,&amp;gt;=1.21.1 in /usr/lib/python3.7/site-packages (from requests&amp;lt;3.0,&amp;gt;=2.20.0-&amp;gt;googlemaps) (1.25.7)
Installing collected packages: googlemaps
 Running setup.py install for googlemaps ... done
Successfully installed googlemaps-4.4.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docs on the Python shell:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; help(googlemaps)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setup code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import googlemaps
&amp;gt;&amp;gt;&amp;gt; gmaps = googlemaps.Client(key='YOUR KEY')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Search for a stakehouse near Google’s office:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.find_place(input=&quot;stakehouse&quot;, input_type=&quot;textquery&quot;, location_bias=&quot;circle:2000@37.4222339,-122.0854804&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'candidates': [{'place_id': 'ChIJsUEYn56wj4ARMg1qK1EVHyw'}], 'status': 'OK'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It doesn’t return much. Let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic fields&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.find_place(input=&quot;stakehouse&quot;, input_type=&quot;textquery&quot;, fields=[&quot;name&quot;, &quot;formatted_address&quot;, &quot;business_status&quot;, &quot;geometry&quot;, &quot;photos&quot;, &quot;types&quot;], location_bias=&quot;circle:2000@37.4222339,-122.0854804&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'candidates': [{'business_status': 'CLOSED_TEMPORARILY', 'formatted_address': '545 San Antonio Rd Suite 31, Mountain View, CA 94040, United States', 'geometry': {'location': {'lat': 37.4032079, 'lng': -122.1118804}, 'viewport': {'northeast': {'lat': 37.40471237989271, 'lng': -122.1105114701073}, 'southwest': {'lat': 37.40201272010727, 'lng': -12.1132111298927}}}, 'name': &quot;Paul Martin's America Mountain View&quot;, 'photos': [{'height': 4048, 'html_attributions': ['&amp;lt;a href=&quot;https://maps.google.com/maps/contrib/11203600442766896285&quot;&amp;gt;Casey DuBose&amp;lt;/a&amp;gt;'], 'photo_reference': 'CmRaAAAAit6MjPA4tMxwkAx61ZquIzBYndTl5zAcCV-bjUPhl0dm0S3giXjEANdqAvxvxsJvCehIChMcOCPVJwxIzHAQWW9Igv01P_R-gilhmU52I0MSRgBgWXh4g5N7wRQDPQKEhC2y0uoOD03_XFjS6o7xi0UGhTiLFIHq8rbIF68PRZaCoEjumKy_Q', 'width': 3036}], 'types': ['restaurant', 'food', 'point_of_interest', 'establishment']}], 'status': 'OK'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Search for anything that contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startup&lt;/code&gt; near Google’s office within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5,000 meters&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=5000, keyword=&quot;startup&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'html_attributions': [], 'results': [], 'status': 'ZERO_RESULTS'}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No results. Let’s try again within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10,000 meters&lt;/code&gt; (Max is 50,000)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; place = gmaps.places_nearby(location=(37.4222339,-122.0854804), radius=10000, keyword=&quot;startup&quot;, language=&quot;en&quot;)

&amp;gt;&amp;gt;&amp;gt; place
{'html_attributions': [], 'next_page_token': 'CqQCGQEAALespF2ND-o3SI0I5SZR267A4XxtZ4LDBCBCG8SJ_IRp9ttbncIziuYJtpUNuP3pPan80VgualTqejpOwMQyHVIIKNv7MKqdJTBwVpbb6SOoSjskx6yDgaB
d5WGiKBfi7TkrCtxe5yOvJYbU6t5KH2jLrqHMLg_4woyq0_TuZTICEpU1veSLv49pLfltDXPg0bKjZSwXejRSUrwFmSfEfRlopfUhBPZNFgGhl1_Qg2XG8R9aHhrPDNhYUoZWQ3HejWw3xVeMpS5_4w_43Qy0wRemnVCPSw7FHz3o
AoCfFDFtGp66i3LlQlwQ2Vdraen-NyxoMOLKonL4YfSYst-6kyFzzCIy_Cr-w6VKCCoGJmPxLR07fjZoiE-c6pCfqepxIQC67lM0MvZV-sSAKkgp8eQRoUnTTz_OZwMEsZqsG7PzWFuQffv7Y', 'results': [{'business_st
tus': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.4522222, 'lng': -122.1661111}, 'viewport': {'northeast': {'lat': 37.45368197989271, 'lng': -122.1650791201073}, 'sou
hwest': {'lat': 37.45098232010727, 'lng': -122.1677787798927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '83aa3dba2f9f4aeb
b49ed92f74abe010398f16a', 'name': 'BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp;amp; Event Space', 'opening_hours': {'open_now': False}, 'photos': [{'height': 1
24, 'html_attributions': ['&amp;lt;a href=&quot;https://maps.google.com/maps/contrib/109071310568073474532&quot;&amp;gt;Boost Ventures&amp;lt;/a&amp;gt;'], 'photo_reference': 'CmRaAAAAVHi9Mc5N4rwtg7oSunQr545R18P
sgHgh92ODUQ4pL_Sc_s6nhBkk4_xK027AdctQEofpwVFlpTTkM2Bs-URTUqISKYOZqWBFgupe7NDTUSb68oC32Y8AV5x5iUbh65OEhAO71DTWNwWYDK2X04iPiaMGhTPZrlZvJcTN38b7lcMAXhOMevL5g', 'width': 2152}],
'place_id': 'ChIJS7Ac0Qu7j4ARkgnXFqygEM8', 'plus_code': {'compound_code': 'FR2M+VH Menlo Park, California', 'global_code': '849VFR2M+VH'}, 'rating': 4.8, 'reference': 'ChIJS
Ac0Qu7j4ARkgnXFqygEM8', 'scope': 'GOOGLE', 'types': ['point_of_interest', 'establishment'], 'user_ratings_total': 63, 'vicinity': '68 Willow Rd, Menlo Park'}, {'business_sta
us': 'OPERATIONAL', 'geometry': {'location': {'lat': 37.458447, 'lng': -122.1729745}, 'viewport': {'northeast': {'lat': 37.45983937989272, 'lng': -122.1715244701073}, 'south
est': {'lat': 37.45713972010728, 'lng': -122.1742241298927}}}, 'icon': 'https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png', 'id': '1a4337e0ce2b385bb9
05778fbc45fb6a0daba2c', 'name': 'Startup Capital Ventures', '

&amp;gt;&amp;gt;&amp;gt; [item['name'] for item in place['results']]
['BootUp Ventures: Startup Ecosystem Co-Working, Office Suites &amp;amp; Event Space', 'Startup Capital Ventures', 'Startup Rabbit', 'Cab Startup', 'Startup Launchpad, Inc', 'BootUpWorld', 'Startup Realty', 'Plug and Play Tech Center', 'Mercury', 'Palo-Alto Startup House', 'Bay Area Startups Services, Inc', 'Nuro', 'The Hive', 'Starship Technologies', EquityBee', 'Fyde', 'HelloStartups', 'sFoundation Inc.', 'Y Combinator', 'Osaka Innovation Hub Silicon Valley Office']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Find the lat,long of Google’s office:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; gmaps_geo = googlemaps.Client(key='YOUR GEOCODING KEY')
&amp;gt;&amp;gt;&amp;gt; place = gmaps_geo.geocode(address=&quot;1600 Amphitheatre Parkway, Mountain View, CA&quot;)

&amp;gt;&amp;gt;&amp;gt; place
[{'access_points': [{'access_point_type': 'TYPE_SEGMENT', 'location': {'latitude': 37.4213102, 'longitude': -122.0852443}, 'location_on_segment': {'latitude': 37.4212816, 'lngitude': -122.0852472}, 'place_id': 'ChIJpdYZQgK6j4ARnmfrthhmnZ8', 'segment_position': 0.5404474139213562, 'unsuitable_travel_modes': []}], 'address_components': [{'long_nae': '1600', 'short_name': '1600', 'types': ['street_number']}, {'long_name': 'Amphitheatre Parkway', 'short_name': 'Amphitheatre Pkwy', 'types': ['route']}, {'long_name': 'Muntain View', 'short_name': 'Mountain View', 'types': ['locality', 'political']}, {'long_name': 'Santa Clara County', 'short_name': 'Santa Clara County', 'types': ['administative_area_level_2', 'political']}, {'long_name': 'California', 'short_name': 'CA', 'types': ['administrative_area_level_1', 'political']}, {'long_name': 'United States', 'sort_name': 'US', 'types': ['country', 'political']}, {'long_name': '94043', 'short_name': '94043', 'types': ['postal_code']}], 'formatted_address': '1600 Amphitheatre Pkwy, ountain View, CA 94043, USA', 'geometry': {'location': {'lat': 37.4223105, 'lng': -122.0846329}, 'location_type': 'ROOFTOP', 'viewport': {'northeast': {'lat': 37.423659480295, 'lng': -122.0832839197085}, 'southwest': {'lat': 37.42096151970851, 'lng': -122.0859818802915}}}, 'place_id': 'ChIJtYuu0V25j4ARwu5e4wwRYgE', 'plus_code': {'compound_code' 'CWC8+W4 Mountain View, CA, United States', 'global_code': '849VCWC8+W4'}, 'types': ['street_address']}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/tomordonez/&quot;&gt;&lt;img src=&quot;/assets/images/ama-linkedin-tomordonez.png&quot; alt=&quot;Ask me anything on Linkedin&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>tom</name></author><category term="analytics" /><category term="API" /><category term="Python" /><category term="Google Maps" /><summary type="html">This is a tutorial to extract data from the Google Maps API using Python.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/3.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/3.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Static Website with Jekyll and Github Pages</title><link href="https://www.tomordonez.com/static-website-jekyll-github-pages/" rel="alternate" type="text/html" title="Static Website with Jekyll and Github Pages" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>https://www.tomordonez.com/static-website-jekyll-github-pages</id><content type="html" xml:base="https://www.tomordonez.com/static-website-jekyll-github-pages/">&lt;p&gt;This is a step by step tutorial to build a &lt;strong&gt;static website with Jekyll and Github Pages&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Install Ruby&lt;/li&gt;
  &lt;li&gt;Jekyll and Github Pages&lt;/li&gt;
  &lt;li&gt;Customizing the theme&lt;/li&gt;
  &lt;li&gt;Using SEO&lt;/li&gt;
  &lt;li&gt;Creating blog posts&lt;/li&gt;
  &lt;li&gt;Github Pages custom domain&lt;/li&gt;
  &lt;li&gt;Change your DNS name server&lt;/li&gt;
  &lt;li&gt;Deploying custom plugins&lt;/li&gt;
  &lt;li&gt;Google Analytics&lt;/li&gt;
  &lt;li&gt;Pagination&lt;/li&gt;
  &lt;li&gt;Jekyll without Plugins&lt;/li&gt;
  &lt;li&gt;Reading Time&lt;/li&gt;
  &lt;li&gt;Search Box&lt;/li&gt;
  &lt;li&gt;Text Expand/Collapse&lt;/li&gt;
  &lt;li&gt;Open external site in new window&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cheat-sheet-for-building-and-deploying&quot;&gt;Cheat Sheet for Building and Deploying&lt;/h2&gt;

&lt;p&gt;Build in development and test in localhost:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Backup development files to Github:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
$ git commit -m &quot;Awesome commit message here&quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deploy to production:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ JEKYLL_ENV=production jgd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More details below…&lt;/p&gt;

&lt;h2 id=&quot;install-ruby&quot;&gt;Install Ruby&lt;/h2&gt;

&lt;p&gt;Install RVM as seen &lt;a href=&quot;http://rvm.io/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
$ \curl -sSL https://get.rvm.io | bash -s stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are on Linux/Gnome. As seen &lt;a href=&quot;https://rvm.io/integration/gnome-terminal&quot;&gt;here&lt;/a&gt;. Go to the Terminal preferences and find a checkbox that says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run command as a login shell&lt;/code&gt;. This must be checked.&lt;/p&gt;

&lt;p&gt;Close the terminal and open it again.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source ~/.rvm/scripts/rvm
$ type rvm | head -n 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm is a function&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Restart the shell and Install Ruby. Stable version on 5/24/20 is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.7.1&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rvm install 2.7.1
$ rvm use 2.7.1 --default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a gemset for the blog&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rvm use 2.7.1@blog --create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List gemsets with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rvm gemset list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Switch gemsets with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rvm gemset use name-of-gemset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;install-jekyll&quot;&gt;Install Jekyll&lt;/h2&gt;

&lt;p&gt;Setup Jekyll:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install bundler jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go to the root directory where you want to install. Then create a new jekyll blog.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll new blog
$ cd blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;404.html
about.markdown
_config.yml
Gemfile
Gemfile.lock
index.markdown
_posts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the blog:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt; and Ctrl+C to stop&lt;/p&gt;

&lt;h2 id=&quot;jekyll-and-markdown&quot;&gt;Jekyll and Markdown&lt;/h2&gt;

&lt;p&gt;Jekyll uses Kramdown. Github Pages uses a customized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CommonMark&lt;/code&gt; markdown.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/configuration/markdown/&quot;&gt;Jekyll Kramdown markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kramdown.gettalong.org/syntax.html&quot;&gt;Kramdown syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://commonmark.org/&quot;&gt;CommonMark doc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/github/jekyll-commonmark-ghpages&quot;&gt;CommonMark Github Pages version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyll-and-github-pages&quot;&gt;Jekyll and Github Pages&lt;/h2&gt;

&lt;p&gt;Look at Github pages dependency &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;versions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As of 5/24/20:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jekyll: 3.8.5 (even though latest stable was 4.0.1)&lt;/li&gt;
  &lt;li&gt;github pages: 204&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Modify the Gemfile to use Github pages as shown.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Comment this line: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll&quot;, &quot;~&amp;gt; 4.0.1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Uncomment this line: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;github-pages&quot;, group: :jekyll_plugins&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Upgrade:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output was:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Note: jekyll version regressed from 4.0.1 to 3.8.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run bundle:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bundle complete! 6 Gemfile dependencies, 85 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test again:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;more-about-github-pages&quot;&gt;More about Github Pages&lt;/h2&gt;

&lt;p&gt;Official docs &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/getting-started-with-github-pages&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few important details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are three types of sites: project, user, and organization.&lt;/li&gt;
  &lt;li&gt;The default publishing source for project sites is the root of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch. For user/org sites the default source might be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;. Review below a section on setting up a user site with custom plugins with the gh-pages branch.&lt;/li&gt;
  &lt;li&gt;The site cannot be larger than 1GB.&lt;/li&gt;
  &lt;li&gt;Bandwidth limit of 100GB per month.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;troubleshooting-dependency-errors&quot;&gt;Troubleshooting dependency errors&lt;/h2&gt;

&lt;p&gt;When testing the site. For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-3.8.5&lt;/code&gt; it says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warning: Using the last argument as keyword parameters is deprecated&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Also for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathutil-0.16.2&lt;/code&gt; it says the same.&lt;/li&gt;
  &lt;li&gt;More &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/7947&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And &lt;a href=&quot;https://github.com/jekyll/jekyll/pull/7948&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and comment this line again &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;github-pages&quot;, group: :jekyll_plugins&lt;/code&gt;. Then add this one:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'jekyll', github: 'jekyll/jekyll'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; update them to this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;group :jekyll_plugins do
    gem 'jekyll-feed', github: 'jekyll/jekyll-feed'
    gem 'jekyll-sitemap', github: 'jekyll/jekyll-sitemap'
    gem 'jekyll-paginate', github: 'jekyll/jekyll-paginate'
    gem 'jekyll-seo-tag', github: 'jekyll/jekyll-seo-tag'
    gem 'jekyll-redirect-from', github: 'jekyll/jekyll-redirect-from'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; currently looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source &quot;https://rubygems.org&quot;

gem 'jekyll', github: 'jekyll/jekyll'

gem &quot;minima&quot;, &quot;~&amp;gt; 2.5&quot;

group :jekyll_plugins do
    gem 'jekyll-feed', github: 'jekyll/jekyll-feed'
    gem 'jekyll-sitemap', github: 'jekyll/jekyll-sitemap'
    gem 'jekyll-paginate', github: 'jekyll/jekyll-paginate'
    gem 'jekyll-seo-tag', github: 'jekyll/jekyll-seo-tag'
    gem 'jekyll-redirect-from', github: 'jekyll/jekyll-redirect-from'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-a-theme-and-edit-_configyml&quot;&gt;Using a theme and edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default theme is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt;. The &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;docs&lt;/a&gt; have good details on how to set it up.&lt;/p&gt;

&lt;p&gt;It has instructions on how to set your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/p&gt;

&lt;details&gt;
	&lt;summary&gt;Here is a template:&lt;/summary&gt;
	&lt;pre&gt;
	title: Name and Title of My Blog
	email: 
	description: &amp;gt;-
	  Some awesome description here
	baseurl: &quot;&quot;
	url: &quot;https://www.mywebsite.com&quot;
	twitter_username: mytwitter
	github_username:  mygithub
	permalink: /:title/

	# Build settings
	theme: minima
	minima:
	  skin: solarized

	header_pages:
	  - about.md

	disqus:
	    shortname: mydisqus_shortname

	author:
	  name: My Name

	show_excerpts: true

	minima:
	  social_links:
	    twitter: mytwitter
	    github: mygithub
	    linkedin: mylinkedin_shortname

	google_analytics: myGAcode

	plugins:
	  - jekyll-feed
	  - jekyll-feed
	  - jekyll-sitemap
	  - jekyll-paginate
	  - jekyll-seo-tag
	  - jekyll-redirect-from

	exclude:
	  - .sass-cache/
	  - .jekyll-cache/
	  - gemfiles/
	  - Gemfile
	&lt;/pre&gt;
&lt;/details&gt;

&lt;h2 id=&quot;customizing-the-theme-minima&quot;&gt;Customizing the theme ‘minima’&lt;/h2&gt;

&lt;p&gt;The default theme is installed as a gem and you won’t see the source files in your blog directory. To find the source files run this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle info minima
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My output was this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* minima (2.5.1)
Summary: A beautiful, minimal theme for Jekyll.
Homepage: https://github.com/jekyll/minima
Path: /home/tom/.rvm/gems/ruby-2.7.1@blog/gems/minima-2.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you open this path, the README file shows where files are located:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; directory define the markup for your theme.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory has snippets of code that can be inserted in layouts.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt; directory define the theme’s styles.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.scss&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.scss&lt;/code&gt; imports sass files from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt; directory. It gets processed into the theme’s main stylesheet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.css&lt;/code&gt; called by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To override the default structure and style, create the specific directory at the root of the blog, copy the file to that directory, and then edit the file.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head.html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory in the root of your blog.&lt;/li&gt;
  &lt;li&gt;Copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head.html&lt;/code&gt; from minima gem folder to this directory.&lt;/li&gt;
  &lt;li&gt;Edit that file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;updating-the-default-css&quot;&gt;Updating the default CSS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the gem path.&lt;/li&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/&lt;/code&gt; folder to your blog root.&lt;/li&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets/main.scss&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-seo&quot;&gt;Using SEO&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme comes with the plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-seo-tag&lt;/code&gt; which is approved by Github Pages.&lt;/p&gt;

&lt;p&gt;Follow the &lt;a href=&quot;https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/usage.md&quot;&gt;usage docs&lt;/a&gt; and &lt;a href=&quot;https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/advanced-usage.md&quot;&gt;advanced usage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use the following in your post/page YAML header:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-a-different-theme&quot;&gt;Using a different theme&lt;/h2&gt;

&lt;p&gt;I tried a theme that looked like &lt;a href=&quot;https://wowthemesnet.github.io/mundana-theme-jekyll/index.html&quot;&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of installing Jekyll as shown above, do the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/wowthemesnet/mundana-theme-jekyll.git blog
$ cd blog
$ bundle
$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I liked it for a while but it had some weird bugs. I spent many hours trying to fix them but then I gave up and switched back to the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme.&lt;/p&gt;

&lt;h2 id=&quot;creating-an-about-page&quot;&gt;Creating an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about&lt;/code&gt; page&lt;/h2&gt;

&lt;p&gt;In your root blog create edit the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about&lt;/code&gt; and modify it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: &quot;About&quot;
permalink: &quot;/about.html&quot;
comments: false
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-blog-posts&quot;&gt;Creating blog posts&lt;/h2&gt;

&lt;p&gt;These go in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder. I got a template that I follow for each new blog post:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: &quot;Title in Double Quotes&quot;
author: tom
categories: [A category]
tags: [some tags here]
---

file: YYYY-MM-DD-title.md (or it won't show up)
title: Don't forget to update this
Add images with: ![Image Name]({{ site.baseurl }}/assets/images/add_image.jpg)
Add local URL with: [Local URL](../local-url)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-redirects&quot;&gt;Creating redirects&lt;/h2&gt;

&lt;p&gt;Add this to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'jekyll-redirect-from', github: 'jekyll/jekyll-redirect-from'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As seen in the docs &lt;a href=&quot;https://github.com/jekyll/jekyll-redirect-from&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- jekyll-redirect-from
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My problem was that for my previous website, the blog posts had this format:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;blog_post_name.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This new website removes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; and a lot of blog posts crawled by google are being sent to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;404 File not found page&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I want to redirect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_post_name.html&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_post_name/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the blog post the header should show something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;title: &quot;Blog Post Name&quot;
redirect_from:
  - /blog_post_name.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;404-page&quot;&gt;404 page&lt;/h2&gt;

&lt;p&gt;More about 404 pages &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;404.md&lt;/code&gt; file if you add this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: &quot;Not Found&quot;
permalink: &quot;/404.html&quot;
comments: false
redirect_from:
  - /index2.html
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_from:&lt;/code&gt; to redirect bad URLs from Google search results. Or use the same approach for blog posts. You can also try to fix them in your Google Search Console.&lt;/p&gt;

&lt;h2 id=&quot;add-a-favicon&quot;&gt;Add a Favicon&lt;/h2&gt;

&lt;p&gt;Based on your theme, it should allow you to add a Favicon on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. Otherwise you would need to add it directly to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme, the docs say that you can add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/custom-head.html&lt;/code&gt; to your root folder and add your code for the favicon files. However, this didn’t work for me as shown on &lt;a href=&quot;https://github.com/jekyll/minima/issues/472&quot;&gt;2.5.1 can’t include custom-head.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I added the favicon code directly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup-github&quot;&gt;Setup Github&lt;/h2&gt;

&lt;p&gt;Go to Github:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new repo with the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setup the repo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
$ git remote add origin link-to-repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cname-robotstxt&quot;&gt;CNAME, robots.txt&lt;/h2&gt;

&lt;p&gt;If you have a custom domain, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; file, add a line with your website, and save it to your local blog root directory:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www.yoursite.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;robots.txt&lt;/code&gt; and add this line to the file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User-agent: *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disallow&lt;/code&gt; for bad URLs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User-agent: *
Disallow: /bad.html
Allow: /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deploy-to-github&quot;&gt;Deploy to Github&lt;/h2&gt;

&lt;p&gt;If you want to cache your credentials&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global credential.helper 'cache --timeout=3600'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two way to build your blog, development and production.&lt;/p&gt;

&lt;p&gt;Build in development and test in localhost:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build in development uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build to production using an environment variable:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ JEKYLL_ENV=production jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you prefer to use a separate deploy configuration you can add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config-deploy.yml&lt;/code&gt; to your blog root.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp _config.yml _config-deploy.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add this line to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config-deploy.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;environment: production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build the blog like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll build --config _config-deploy.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then deploy:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
$ git commit -m &quot;Awesome commit message here&quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also build to production using a gem called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jgd&lt;/code&gt; as explained below in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploying custom plugins&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;change-your-dns-name-server&quot;&gt;Change your DNS name server&lt;/h2&gt;

&lt;p&gt;Setup an account with Cloudflare if you don’t have one. Find the DNS name server&lt;/p&gt;

&lt;p&gt;In your DNS provider point it to Cloudflare.&lt;/p&gt;

&lt;h2 id=&quot;cloudflare-settings&quot;&gt;Cloudflare settings&lt;/h2&gt;

&lt;p&gt;Create these records in Cloudflare:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Type    Name               Content
ALIAS   yoursite.com       youruser.github.io
CNAME   www.yoursite.com   youruser.github.io
TXT     yoursite.com       youruser.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; records as seen on &lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/&quot;&gt;Setting up an Apex domain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TXT&lt;/code&gt; record to verify Google webmaster tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add property&lt;/li&gt;
  &lt;li&gt;Add TXT google verification code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setup these Page rules. As seen &lt;a href=&quot;https://www.jonathan-petitcolas.com/2017/01/13/using-https-with-custom-domain-name-on-github-pages.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.yoursite.com/*
Cache Level: Cache Everything

https://yoursite.com/*
Forwarding URL: (Status Code: 301 - Permanent Redirect, URl: https://www.yoursite.com$1)

http://www.yoursite.com/*
Always Use HTTPS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your Overview dashboard set these (if you are on the free plan)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Security level: medium&lt;/li&gt;
  &lt;li&gt;SSL: Full&lt;/li&gt;
  &lt;li&gt;Caching level: Standard&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;migrating-content&quot;&gt;Migrating content&lt;/h2&gt;

&lt;p&gt;Here is where I was challenged.&lt;/p&gt;

&lt;p&gt;With the Pelican Python static website generator the files were named as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title.md&lt;/code&gt;. With Jekyll they need to be in the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-title.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For Pelican the header looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Title: Powerful things you can do with the Markdown editor&quot;
Date: 2020-02-09 20:00
Category: Jekyll, tutorial
Tags: featured
Slug: powerful-things
Author: Tom Ordonez
Status: published
Summary: A blog post about Markdown editor.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Jekyll it needs to look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title:  &quot;Powerful things you can do with the Markdown editor&quot;
author: tom
categories: [ Jekyll, tutorial ]
image: assets/images/11.jpg
tags: [featured]
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How to make this change to about 100 blog posts?&lt;/p&gt;

&lt;p&gt;I needed to extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; from the header and use it to rename the file. Then extract other content like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Title&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Category&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tags&lt;/code&gt;. Then replace this header with the new header.&lt;/p&gt;

&lt;p&gt;Also the blog posts used this syntax to insert images in the content &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{static}/images/&lt;/code&gt; while Jekyll uses:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ {site.baseurl} }/assets/images/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read more in &lt;a href=&quot;../python-files-os-module&quot;&gt;Python, Files, and OS Module&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;deploying-custom-plugins&quot;&gt;Deploying custom plugins&lt;/h2&gt;

&lt;p&gt;As shown on the &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages-and-jekyll#plugins&quot;&gt;Github Pages docs&lt;/a&gt;. Github Pages cannot build sites using unsupported plugins.&lt;/p&gt;

&lt;p&gt;Here is the list of approved plugins. Go to &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;dependency versions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As shown in this blog post &lt;a href=&quot;https://www.yegor256.com/2014/06/24/jekyll-github-deploy.html&quot;&gt;Deploy Jekyll to Github Pages&lt;/a&gt;. You can use a gem to setup deployment of Jekyll when you are using custom plugins.&lt;/p&gt;

&lt;p&gt;Update your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'jgd'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching trollop 2.9.9
Installing trollop 2.9.9
Fetching jgd 1.12
Installing jgd 1.12

Post-install message from trollop:
!    The 'trollop' gem has been deprecated and has been replaced by 'optimist'.
!    See: https://rubygems.org/gems/optimist
!    And: https://github.com/ManageIQ/optimist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trollop&lt;/code&gt; in the &lt;a href=&quot;https://www.manageiq.org/optimist/&quot;&gt;official doc&lt;/a&gt; and this tutorial: &lt;a href=&quot;https://kundeveloper.com/blog/trollop/&quot;&gt;writing a Ruby CLI using Trollop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To deploy use this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ JEKYLL_ENV=production jgd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;change-the-source-of-your-github-pages&quot;&gt;Change the source of your Github Pages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Go to your Github repo&lt;/li&gt;
  &lt;li&gt;Settings&lt;/li&gt;
  &lt;li&gt;Options&lt;/li&gt;
  &lt;li&gt;Scroll down to Github Pages&lt;/li&gt;
  &lt;li&gt;Source&lt;/li&gt;
  &lt;li&gt;Change your branch from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Save&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then deploy again:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ JEKYLL_ENV=production jgd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
	&lt;summary&gt;Some of the output:&lt;/summary&gt;
	&lt;pre&gt;
	[DEPRECATION] This gem has been renamed to optimist 
	and will no longer be supported. Please switch to optimist 
	as soon as possible.
	+ set -e
	+ set -o pipefail
	+ URL=https://github.com/...git
	+ BRANCH=gh-pages
	+ BRANCH_FROM=master
	+ DEPLOY_CONFIG=_config-deploy.yml
	+ BUNDLE=
	+ DRAFTS=
	++ pwd
	+ SRC=/home/.../blog
	++ mktemp -d -t jgd-XXX
	+ TEMP=/tmp/jgd-NAn
	+ trap 'rm -rf /tmp/jgd-NAn' EXIT
	+ CLONE=/tmp/jgd-NAn/clone
	+ COPY=/tmp/jgd-NAn/copy
	+ echo -e 'Cloning Github repository:'
	
	Cloning Github repository:
	+ git clone -b master https://github.com/... /tmp/jgd-NAn/clone
	
	Cloning into '/tmp/jgd-NAn/clone'...
	remote: Enumerating objects: 3025, done.   
	remote: Counting objects: 100% (3025/3025), done.                                     
	remote: Compressing objects: 100% (1920/1920), done.                                  
	remote: Total 3025 (delta 1272), 
	  reused 2692 (delta 954), pack-reused 0               
	Receiving objects: 100% (3025/3025), 31.22 MiB 
	  | 13.20 MiB/s, done.
	Resolving deltas: 100% (1272/1272), done.
	+ cp -R /tmp/jgd-NAn/clone /tmp/jgd-NAn/copy
	+ cd /tmp/jgd-NAn/clone
	+ echo -e '\nBuilding Jekyll site:'
	
	Building Jekyll site:
	+ rm -rf _site
	+ '[' -r _config-deploy.yml ']'
	+ jekyll build
	Configuration file: /tmp/jgd-NAn/clone/_config.yml
	            Source: /tmp/jgd-NAn/clone
	       Destination: /tmp/jgd-NAn/clone/_site
	 Incremental build: disabled. Enable with --incremental
	      Generating... 
	       Jekyll Feed: Generating feed for posts
	                    done in 1.67 seconds.
	 Auto-regeneration: disabled. Use --watch to enable.
	+ '[' '!' -e _site ']'
	+ cp -R _site /tmp/jgd-NAn
	+ cd /tmp/jgd-NAn
	+ rm -rf /tmp/jgd-NAn/clone
	+ mv /tmp/jgd-NAn/copy /tmp/jgd-NAn/clone
	+ cd /tmp/jgd-NAn/clone
	+ echo -e '\nPreparing gh-pages branch:'

	Preparing gh-pages branch:
	++ git branch -a
	++ grep origin/gh-pages
	+ '[' -z '' ']'
	+ git checkout --orphan gh-pages
	
	Switched to a new branch 'gh-pages'
	+ echo -e '\nDeploying into gh-pages branch:'

	Deploying into gh-pages branch:
	+ rm -rf 404.md about.md assets CNAME _config.yml Gemfile 
	  Gemfile.lock _includes index.markdown _layouts _posts
	+ cp -R /tmp/jgd-NAn/_site/404.html /tmp/jgd-NAn/_site/about.html
	+ rm -f README.md
	+ git add .
	++ date
	+ git commit -am 'new version Thu 08 Oct 2020 
	  12:10:05 AM EDT' --allow-empty
	[gh-pages (root-commit) a36ecd2] new version 
	  Thu 08 Oct 2020 12:10:05 AM EDT
	 819 files changed, 61268 insertions(+)
	 create mode 100644 .github/FUNDING.yml
	 create mode 100644 .gitignore
	 create mode 100644 .jekyll-cache/Jekyll/Cache/Jekyll--Cache/b7
	 ...

    + git push origin gh-pages
	+ sed 's|https://github.com/...|[skipped]|g'
	remote: 
	remote: Create a pull request for 'gh-pages' on GitHub by visiting:        
	remote:      https://github.com/.../pull/new/gh-pages         
	remote: 
	To [skipped]
	 * [new branch]      gh-pages -&amp;gt; gh-pages
	+ echo -e '\nCleaning up:'

	Cleaning up:
	+ rm -rf /tmp/jgd-NAn/clone
	+ rm -rf ''
	+ rm -rf /tmp/jgd-NAn
	&lt;/pre&gt;
&lt;/details&gt;

&lt;h2 id=&quot;related-posts---jekyll-plugin&quot;&gt;Related Posts - Jekyll Plugin&lt;/h2&gt;

&lt;p&gt;This is a custom Jekyll plugin. Documentation &lt;a href=&quot;https://github.com/toshimaru/jekyll-tagging-related_posts&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Update your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'jekyll-tagging-related_posts'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching nuggets 1.6.0
Installing nuggets 1.6.0
Fetching jekyll-tagging 1.1.0
Installing jekyll-tagging 1.1.0
Fetching jekyll-tagging-related_posts 1.1.0 
Installing jekyll-tagging-related_posts 1.1.0

Post-install message from nuggets:

nuggets-1.6.0 [2018-07-12]:

* Added &amp;lt;tt&amp;gt;JSON.*_{multi,canonical}&amp;lt;/tt&amp;gt;.

Post-install message from jekyll-tagging:

jekyll-tagging-1.1.0 [2017-03-07]:

* Added ability to append extra data to all tag pages. (tfe)
* Provides compatibility to the current jekyll (3.4.1).
* A few fixes. (felipe)
* Some documentation improvements. (wsmoak, jonathanpberger)
* Prooves who is the worst open source maintainer. (pattex ^__^)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config-deploy.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins:
  - jekyll/tagging
  - jekyll-tagging-related_posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; directory in blog root:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir _layouts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.html&lt;/code&gt; layout from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme Gem to this new directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp /home/tom/.rvm/gems/ruby-2.7.1@blog/gems/minima-2.5.1/_layouts/post.html _layouts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add this code to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.html&lt;/code&gt; after the blog post content and before disqus code.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% if site.related_posts.size &amp;gt;= 1 %}
&amp;lt;div&amp;gt;
  &amp;lt;h3&amp;gt;Related Posts&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
  {% for related_post in site.related_posts limit: 5 %}
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;{{ related_post.url }}&quot;&amp;gt;{{ related_post.title }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {% endfor %}
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;google-analytics&quot;&gt;Google Analytics&lt;/h2&gt;

&lt;p&gt;The default theme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; comes with this line in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;google_analytics: UA-XXXXXX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enter your Google Analytics code there.&lt;/p&gt;

&lt;p&gt;For reference, this is inserted into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head.html&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{%- if jekyll.environment == 'production' and site.google_analytics -%}
	{%- include google-analytics.html -%}
{%- endif -%}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore the blog needs to be deployed either using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt; environment variable or a different deploy config file as previously shown.&lt;/p&gt;

&lt;p&gt;Using the environment variable:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ JEKYLL_ENV=production jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are using the gem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jgd&lt;/code&gt; then deploy like this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ JEKYLL_ENV=production jgd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pagination&quot;&gt;Pagination&lt;/h2&gt;

&lt;p&gt;Jekyll comes with a default plugin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt; that you can set by adding the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paginate: 5&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. This is the Jekyll &lt;a href=&quot;https://jekyllrb.com/docs/pagination/&quot;&gt;doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and make sure this line is under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins:
  - jekyll-paginate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add another line (outside of plugins):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;paginate: 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your theme’s index is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.markdown&lt;/code&gt;, change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; or you will get this error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Pagination: Pagination is enabled, but I couldn't find an index.html
page to use as the pagination template. Skipping pagination.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/home.html&lt;/code&gt;. Change this line, from this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for post in site.posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for post in paginator.posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For pagination links, add the code as shown on &lt;a href=&quot;https://jekyllrb.com/docs/pagination/#render-the-paginated-posts&quot;&gt;Jekyll’s Render the paginated posts&lt;/a&gt;. Before the closing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endif&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if site.posts.size &amp;gt; 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can center the CSS of pagination in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/main.scss&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.pagination {
	display: flex;
}
.previous, a.previous {
	flex: 1;
}
.page_number {
	flex: 1;
}
next, a.next {
	flex: 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;jekyll-without-plugins&quot;&gt;Jekyll without Plugins&lt;/h2&gt;

&lt;p&gt;An alternative option to using custom plugins restricted by Jekyll is by not using plugins at all.&lt;/p&gt;

&lt;p&gt;Here is a list of features to use &lt;a href=&quot;https://jekyllcodex.org/without-plugins/&quot;&gt;Jekyll without plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reading-time&quot;&gt;Reading Time&lt;/h3&gt;

&lt;p&gt;Similar to Medium you can show the time it will take to read the blog post.&lt;/p&gt;

&lt;p&gt;Here is the documentation to &lt;a href=&quot;https://jekyllcodex.org/without-plugin/reading-time-indicator/#&quot;&gt;reading time&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reading-time.html&lt;/code&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; and add the code shown on the doc.&lt;/p&gt;

&lt;p&gt;Go to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/post.html&lt;/code&gt; and include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reading-time.html&lt;/code&gt; line within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header&lt;/code&gt; tag, before the closing paragraph. You can test to see if it shows correctly on your blog post such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aug 29, 2020 • tom • 3 min read&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Deploy the source to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll build
$ git add .
$ git commit -m &quot;Added reading time&quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you installed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jgd&lt;/code&gt; gem, then deploy static pages to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ JEKYLL_ENV=production jgd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;search-box&quot;&gt;Search Box&lt;/h3&gt;

&lt;p&gt;Here is the documentation to &lt;a href=&quot;https://jekyllcodex.org/without-plugin/search-lunr/#&quot;&gt;Search with Lunr.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search-lunr.html&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;. In this file, you can exclude the types of documents to search. For example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if page.url contains '.xml' or page.url contains 'assets' or page.url contains '.json' or page.url contains 'about.html'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lunr.js&lt;/code&gt; into your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt; folder, then make sure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search-lunr.html&lt;/code&gt; indicates the correct location of the file. For example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src=&quot;/assets/js/lunr.js&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I copied the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default.html&lt;/code&gt; layout file from my Gem location to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp /home/tom/.rvm/gems/ruby-2.7.1@blog/gems/minima-2.5.1/_layouts/default.html _layouts/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default.html&lt;/code&gt; layout page, include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search-lunr.html&lt;/code&gt; as indicated in the docs inside curly percentage brackets. Add this in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; class, before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; tag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include search-lunr.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Customize the CSS for the search box. At the bottom of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search-lunr.html&lt;/code&gt; there is code with the form. You can wrap this in a class:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;search&quot;&amp;gt;
    &amp;lt;form onSubmit=&quot;return lunr_search(document.getElementById('lunrsearch').value);&quot;&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;lunrsearch&quot; name=&quot;q&quot; maxlength=&quot;255&quot; value=&quot;&quot; placeholder=&quot;Search&quot; /&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/main.scss&lt;/code&gt; you can try something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.search input {
    height: 30px;
    width: 60%;
    padding-left: 10px;
    border: 1px solid #D9D9D9;
    border-radius: 10px;
    font-size: 16px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;text-expandcollapse-or-collapbsible-markdown&quot;&gt;Text Expand/Collapse or Collapbsible Markdown&lt;/h2&gt;

&lt;p&gt;I often add whole output to every command I use. This can take a large space in a blog post and might disrupt reading focus.&lt;/p&gt;

&lt;p&gt;There are three options for hiding/display text that can be expanded, also known by these keywords: text expand, expand/collapse, collapsible markdown, details element.&lt;/p&gt;

&lt;p&gt;Use whatever works best.&lt;/p&gt;

&lt;h3 id=&quot;text-expand&quot;&gt;Text Expand&lt;/h3&gt;

&lt;p&gt;This is a JS that might need some tweaking. When you click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read more&lt;/code&gt; it expands the section but it scrolls back to the top.&lt;/p&gt;

&lt;p&gt;This is the doc for &lt;a href=&quot;https://jekyllcodex.org/without-plugin/text-expand/&quot;&gt;Jekyll Text Expand&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text-expand.html&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory. Then edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt; and add this before the closing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; tag:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include text-expand.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expand&lt;/code&gt; tag in a blog post by adding only one line for each of the open/closing tag such as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[expand]
Long content here
and here
...
[/expand]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;collapbsible-markdown-with-details-element&quot;&gt;Collapbsible Markdown with Details element&lt;/h3&gt;

&lt;p&gt;This uses the details disclosure element: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;details&lt;/code&gt;. More details in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details&quot;&gt;Mozilla details element doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have to wrap your content like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;details&amp;gt;
	&amp;lt;summary&amp;gt;Click to expand&amp;lt;/summary&amp;gt;
	Long content here
	and here
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To add a code block, you need to have a previous empty line, enclose the code block with three tildes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~~~&lt;/code&gt;, optionally you can add the language at the end of the first enclosing tildes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;details&amp;gt;
	&amp;lt;summary&amp;gt;Click to expand&amp;lt;/summary&amp;gt;
	
	~~~ python
	Code here
	~~~
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, you can encounter this issue &lt;a href=&quot;https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d#gistcomment-2710296&quot;&gt;Details is not formatted correctly in Jekyll/Github pages&lt;/a&gt;. You can enclose the content with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;I am using this for my long content output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;details&amp;gt;
	&amp;lt;summary&amp;gt;Click to expand&amp;lt;/summary&amp;gt;
	&amp;lt;pre&amp;gt;
		
	Long content here
	&amp;lt;/pre&amp;gt;

&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;details&gt;
	&lt;summary&gt;Click to expand&lt;/summary&gt;
	&lt;pre&gt;
	Long content here
	&lt;/pre&gt;
&lt;/details&gt;

&lt;p&gt;I also customized the CSS:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;details {
	padding-bottom: 20px;
	color: grey;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-text-in-details-not-processed-correctly&quot;&gt;The text in details not processed correctly&lt;/h3&gt;

&lt;p&gt;I haven’t tested this. This blog post shows &lt;a href=&quot;http://movb.de/jekyll-details-support.html&quot;&gt;adding support for HTML5 details element to Jekyll&lt;/a&gt;. It uses a custom plugin.&lt;/p&gt;

&lt;p&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt; code into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_plugins/details_tag.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then use like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% details Click to expand %}

	~~~ python
	Code here
	~~~
{% enddetails %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More troubleshooting in &lt;a href=&quot;https://gist.github.com/ericclemmons/b146fe5da72ca1f706b2ef72a20ac39d&quot;&gt;using details in Github&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/joyrexus/16041f2426450e73f5df9391f7f7ae5f&quot;&gt;collapsible markdown&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;open-external-site-in-new-window&quot;&gt;Open external site in new window&lt;/h2&gt;

&lt;p&gt;By default linking to external sites open in the same window using this syntax:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[External Title](link to external site)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jekyll uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kramdown&lt;/code&gt; and you can link like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[External Title](link to external site){:target=&quot;_blank&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I find annoying about this, is that it adds a weird highlighted row in SublimeText. I also think it’s a weird syntax to remember.&lt;/p&gt;

&lt;p&gt;An alternative option is this JS called &lt;a href=&quot;https://jekyllcodex.org/without-plugin/new-window-fix&quot;&gt;new window fix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the code into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/new-window-fix.html&lt;/code&gt; and remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PDF&lt;/code&gt; section if you don’t need it.&lt;/p&gt;

&lt;p&gt;Add this to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt; before the closing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; tag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include new-window-fix.html %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-external-site-to-menu&quot;&gt;Add external site to menu&lt;/h2&gt;

&lt;p&gt;There isn’t a clear way to add an external link to the menu as discussed on &lt;a href=&quot;https://github.com/jekyll/minima/issues/207&quot;&gt;navigation external links&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/jekyll/minima/issues/207#issuecomment-377095111&quot;&gt;comment&lt;/a&gt; shows a quick fix to add the external link to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/header.html&lt;/code&gt;. I added a link to my Linkedin profile as shown:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;trigger&quot;&amp;gt;
  {%- for path in page_paths -%}
    {%- assign my_page = site.pages | where: &quot;path&quot;, path | first -%}
    {%- if my_page.title -%}
    &amp;lt;a class=&quot;page-link&quot; href=&quot;{{ my_page.url | relative_url }}&quot;&amp;gt;{{ my_page.title | escape }}&amp;lt;/a&amp;gt;
    &amp;lt;a class=&quot;page-link&quot; href=&quot;https://www.linkedin.com/in/tomordonez/&quot;&amp;gt;Linkedin&amp;lt;/a&amp;gt;
    {%- endif -%}
  {%- endfor -%}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header_pages&lt;/code&gt; has to be enabled in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; for the menu to show. I have an about page here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;header_pages:
  - about.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Tom Ordonez</name></author><category term="jekyll" /><category term="github pages" /><summary type="html">This is a step by step tutorial to build a static website with Jekyll and Github Pages.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/5.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/5.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Python, Files, and OS Module</title><link href="https://www.tomordonez.com/python-files-os-module/" rel="alternate" type="text/html" title="Python, Files, and OS Module" /><published>2020-05-24T00:00:00-04:00</published><updated>2020-05-24T00:00:00-04:00</updated><id>https://www.tomordonez.com/python-files-os-module</id><content type="html" xml:base="https://www.tomordonez.com/python-files-os-module/">&lt;p&gt;Migrating from one static website to another, I had to rename multiple files, extract some content, remove it, and do other operations.&lt;/p&gt;

&lt;p&gt;For about 100 blog posts I had to rename the files from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title.md&lt;/code&gt; to the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-title.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The header of each post looked like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Title: Powerful things you can do with the Markdown editor&quot;
Date: 2020-02-09 20:00
Category: Jekyll, tutorial
Tags: featured
Slug: powerful-things
Author: Tom Ordonez
Status: published
Summary: A blog post about Markdown editor.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And I had to change it to this&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title:  &quot;Powerful things you can do with the Markdown editor&quot;
author: tom
categories: [ Jekyll, tutorial ]
image: assets/images/11.jpg
tags: [featured]
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some blog posts also contained images which used this syntax &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{static}/images/&lt;/code&gt;, and I had to change it to this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ {site.baseurl} }/assets/images/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what the Python script looks like, it’s not the best but it worked. This can give you an idea on how to work with files and Python OS module.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
import shutil
import random

lines = ['---', 'layout: post', 'title: ', 'author: tom', 'categories: ', 'image: ', 'tags: ', '---']
matches = ['Title: ', 'Date: ', 'Category: ', 'Tags: ', 'Slug: ', 'Author: ', 'Status: ', 'Summary: ']

dest_dir = 'path to ../newblog/_posts/'

# Extract data from old format
for blogpost in os.listdir():

	# Only for markdown files
	if &quot;.md&quot; in blogpost:
		print(blogpost)

		# Extract the metadata data from blogpost, then remove the header
		with open(blogpost, 'r+') as fh:
			content = fh.readlines()

			if content[0].startswith('Title'):
				title = content[0].rstrip('\r\n').split(': ')[1]
			else:
				title = ''

			date_prefix = content[1].split()[1]

			if content[2].startswith('Category'):
				categories = content[2].rstrip('\r\n').split(': ')[1]
			else:
				categories = ''

			# Category in old format: 'Data Analytics', 'Analytics', 'Python', 'Coding', 
			# 'Linux', 'Android', 'Mobile Dev', 'Tableau', 'Data Analysis'
			# 'Sourcing', 'Cloud', 'Recruiting', 'Data Science'

			if any(match in categories for match in ['Data Analytics', 'Analytics', 'Data Analysis', 'Data Science', 'Tableau']):
				image = 'assets/images/'+str(random.randint(1, 12))+'.jpg'
				categories = 'Data Analytics'
			elif any(match in categories for match in ['Python', 'Coding', 'Cloud']):
				image = 'assets/images/'+str(random.randint(1, 12))+'.jpg'
				categories = 'Code'
			elif any(match in categories for match in ['Linux']):
				image = 'assets/images/'+str(random.randint(1, 12))+'.jpg'
			elif any(match in categories for match in ['Android', 'Mobile Dev']):
				image = 'assets/images/'+str(random.randint(1, 12))+'.jpg'
				categories = 'Mobile'
			elif any(match in categories for match in ['Sourcing', 'Recruiting']):
				image = 'assets/images/'+str(random.randint(1, 12))+'.jpg'
				categories = 'Recruiting'

			if content[3].startswith('Tags'):
				tags = content[3].rstrip('\r\n').split(': ')[1]
			else:
				tags = ''

			# Create the jekyll header
			header = lines[0] + '\n' + lines[1] + '\n' + lines[2] + f'&quot;{title}&quot;' + '\n' + lines[3] + '\n' + lines[4] 
				+ '[' + categories + ']' + '\n' + lines[5] + image + '\n' + lines[6] + '[' + tags + ']' + '\n' + lines[7]

			# Remove the old header
			for index in range(len(content)):
				if any(content[index].startswith(match) for match in matches):
					last_index = index

			del content[:last_index+1]

			# Capture the blogpost content after the header
			flat_content = ''.join(content)

			# Copy to a new file with format year-month-day-title.md
			new_name = date_prefix+'-'+blogpost
			dest = dest_dir + new_name
			print(&quot;Copying {}&quot;.format(new_name))
			shutil.copy2(blogpost, dest)

			# Concat and write the new header and the cleaned content
			with open(dest, 'r+') as fh:
				fh.seek(0, 0)
				fh.write(header + '\n' + flat_content)

			# Correct image syntax in content
			# From this syntax: ![Scraping]({static}/images/scraping.jpg)
			# To this:![Scraping]({{ site.baseurl }}/assets/images/scraping.jpg)
			with open(dest, 'r') as fh:
				filedata = fh.read()

			
			filedata = filedata.replace(&quot;{static}/images/&quot;, &quot;{ {site.baseurl} }/assets/images/&quot;)
			

			with open(dest, 'w') as fh:
				fh.write(filedata)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Tom Ordonez</name></author><category term="python" /><summary type="html">Migrating from one static website to another, I had to rename multiple files, extract some content, remove it, and do other operations.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/11.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/11.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Curly Braces in Markdown with Jekyll</title><link href="https://www.tomordonez.com/curly-braces-markdown-jekyll/" rel="alternate" type="text/html" title="Curly Braces in Markdown with Jekyll" /><published>2020-05-23T00:00:00-04:00</published><updated>2020-05-23T00:00:00-04:00</updated><id>https://www.tomordonez.com/curly-braces-markdown-jekyll</id><content type="html" xml:base="https://www.tomordonez.com/curly-braces-markdown-jekyll/">&lt;p&gt;If you use double curly braces in code blocks in markdown with Jekyll. They just won’t show up.&lt;/p&gt;

&lt;p&gt;Enclose the code block in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raw&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endraw&lt;/code&gt; tags. Like this:&lt;/p&gt;

&lt;p&gt;{% raw % }&lt;/p&gt;

&lt;p&gt;some code here&lt;/p&gt;

&lt;p&gt;{% endraw % }&lt;/p&gt;

&lt;p&gt;Writing the previous line and make it appear correctly in this blog post sent me to a 4-hour bottomless pit of googling. I think it’s not possible to show the raw/endraw code in a code block using the raw/endraw tags. Basically I am trying to show:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open raw tag
some code here
close raw tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is mostly used to show code that has double curly braces:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ {site.baseurl} }/assets/images/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have also seen some strange behavior when adding a JavaScript code block and using Safari on mobile in Reader view mode. The HTML content is not displayed correctly. I thought that maybe my Jekyll template was broken.&lt;/p&gt;

&lt;p&gt;Here are other resources I read:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24102498/escaping-double-curly-braces-inside-a-markdown-code-block-in-jekyll&quot;&gt;Escaping double curly braces&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.w3.org/html5/html-author/charref&quot;&gt;HTML character encoding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/19352368/show-raw-tags-in-post-generated-by-jekyll&quot;&gt;Show raw tags in post generated by jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rmaicle.github.io/posts/71xXldY8KeKXWgw&quot;&gt;Liquid ‘raw’ Tag and Fenced Code Blocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37688226/include-jekyll-liquid-code-without-rendering-it&quot;&gt;Include Jekyll/Liquid code without rendering it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40734691/raw-endraw-throwing-warning-on-jekyll-3-3-1&quot;&gt;raw/endraw throwing warning on Jekyll 3.3.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll-help/issues/40&quot;&gt;raw endraw tags not being respected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shopify.github.io/liquid/tags/raw/&quot;&gt;Raw Doc on Liquid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://talk.jekyllrb.com/t/jekyll-is-escaping-an-anchor-tag-on-my-page/3374&quot;&gt;Jekyll is escaping an anchor tag on my page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://talk.jekyllrb.com/t/how-to-escape-in-markdown/4173&quot;&gt;How to escape curly brace percentage in markdown?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/11ty/eleventy/issues/737&quot;&gt;Issue with Jekyll liquid templates and raw tags&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tosbourn.com/liquid-raw-syntax/&quot;&gt;Jekyll Raw Code Block Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Tom Ordonez</name></author><category term="jekyll" /><category term="markdown" /><summary type="html">If you use double curly braces in code blocks in markdown with Jekyll. They just won’t show up.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/7.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/7.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">D3 Troubleshooting</title><link href="https://www.tomordonez.com/d3-troubleshooting/" rel="alternate" type="text/html" title="D3 Troubleshooting" /><published>2020-02-09T00:00:00-05:00</published><updated>2020-02-09T00:00:00-05:00</updated><id>https://www.tomordonez.com/d3-troubleshooting</id><content type="html" xml:base="https://www.tomordonez.com/d3-troubleshooting/">&lt;p&gt;D3 is a great JavaScript library for data visualization. However, like every technology, it can be annoying when you don’t know why things don’t work as expected.&lt;/p&gt;

&lt;p&gt;A good way for troubleshooting D3 is by using the browser console.&lt;/p&gt;

&lt;p&gt;Let’s run a small project as shown on the D3 tutorial above. It can be as simple as creating an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and linking to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3.js&lt;/code&gt; library.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://d3js.org/d3.v5.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run the webserver like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -m http.server 8888 --bind 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the browser on: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:8888/&lt;/code&gt;. For this test I used Firefox 72.&lt;/p&gt;

&lt;p&gt;Open the console on the browser. (You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear()&lt;/code&gt; to clear the output)&lt;/p&gt;

&lt;h2 id=&quot;d3-methods&quot;&gt;D3 Methods&lt;/h2&gt;

&lt;p&gt;On the console, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3&lt;/code&gt;. Then expand the result, which shows all these methods. Now you can investigate which methods are available:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{…}
​
__esModule: true
​
active: function active()​
arc: function arc()​
area: function ry()​
areaRadial: function ly()​
ascending: function n()​
axisBottom: function axisBottom()​
axisLeft: function axisLeft()​
axisRight: function axisRight()​
...
...
it has about 500 methods...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, two useful methods are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.min&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.max&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create an array:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;numbers = [3, 9, 1, 0, 2, 8, 2];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It shows this output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array(7) [ 3, 9, 1, 0, 2, 8, 2 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the min and max can be easily calculated:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.min(numbers)
0

d3.max(numbers)
9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be helpful when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scales&lt;/code&gt; to define the input domain.&lt;/p&gt;

&lt;h2 id=&quot;array-methods&quot;&gt;Array methods&lt;/h2&gt;

&lt;p&gt;Type the name of the array we created&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;numbers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expand the result to see the values of the array and the array methods&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(7) […]
​0: 3
​1: 9
​2: 1
​3: 0
​4: 2
​5: 8
​6: 2
​length: 7
​
&amp;lt;prototype&amp;gt;: []
​​concat: function concat()
​​constructor: function Array()
​​copyWithin: function copyWithin()
​​entries: function entries()
​​every: function every()
​​fill: function fill()
​​filter: function filter()
​​find: function find()
​​findIndex: function findIndex()
​​flat: function flat()
​​flatMap: function flatMap()
​​forEach: function forEach()
​​includes: function includes()
​​indexOf: function indexOf()
​​join: function join()
​​keys: function keys()
​​lastIndexOf: function lastIndexOf()
​​length: 0
​​map: function map()
​​pop: function pop()
​​push: function push()
​​reduce: function reduce()
​​reduceRight: function reduceRight()
​​reverse: function reverse()
​​shift: function shift()
​​slice: function slice()
​​some: function some()
​​sort: function sort()
​​splice: function splice()
​​toLocaleString: function toLocaleString()
​​toSource: function toSource()
​​toString: function toString()
​​unshift: function unshift()
​​values: function values()
​​Symbol(Symbol.iterator): function values()
​​Symbol(Symbol.unscopables): Object { copyWithin: true, entries: true, fill: true, … }
​​&amp;lt;prototype&amp;gt;: Object { … } ​
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;numbers.sort()
Array(7) [ 0, 1, 2, 2, 3, 8, 9 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;numbers.length
7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;object-methods&quot;&gt;Object Methods&lt;/h2&gt;

&lt;p&gt;Let’s create an object.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;simpsons = { name: &quot;Homer&quot;, age: 40, city: &quot;Springfield&quot;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simpsons&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Object { name: &quot;Homer&quot;, age: 40, city: &quot;Springfield&quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create an array from this object:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;simpsonsArray = d3.values(simpsons)
Array(3) [ &quot;Homer&quot;, 40, &quot;Springfield&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see methods available for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; simpsons, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simpsons&lt;/code&gt; and expand the output.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{…}
​age: 40
​city: &quot;Springfield&quot;
​name: &quot;Homer&quot;
​
&amp;lt;prototype&amp;gt;: {…}
​​__defineGetter__: function __defineGetter__()
​​__defineSetter__: function __defineSetter__()
​​__lookupGetter__: function __lookupGetter__()
​​__lookupSetter__: function __lookupSetter__()
​​__proto__: 
​​constructor: function Object()
​​hasOwnProperty: function hasOwnProperty()
​​isPrototypeOf: function isPrototypeOf()
​​propertyIsEnumerable: function propertyIsEnumerable()
​​toLocaleString: function toLocaleString()
​​toSource: function toSource()
​​toString: function toString()
​​valueOf: function valueOf()
​​&amp;lt;get __proto__()&amp;gt;: function __proto__()
​​&amp;lt;set __proto__()&amp;gt;: function __proto__()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;consolelog-on-callback-function&quot;&gt;Console.log on callback function&lt;/h2&gt;

&lt;p&gt;On your D3 script, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt; on a callback function to see the data before and after such as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var someFunction (d) {
	console.log(&quot;Before something happens&quot;);
	console.log(d);
	somethingHappens(d);
	console.log(&quot;After something happens&quot;);
	console.log(d);
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;d3nest-reformats-a-date-object-to-string&quot;&gt;d3.nest reformats a Date object to string&lt;/h2&gt;

&lt;p&gt;As seen &lt;a href=&quot;https://stackoverflow.com/questions/25576853/d3-nest-formatting-date-incorrectly&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/d3/d3-collection/issues/19&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.nest()&lt;/code&gt; to group data that has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;. Nest will force the value into a string.&lt;/p&gt;

&lt;p&gt;Given a dataset where you parse the year:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const parseTime = d3.timeParse(&quot;%Y&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After loading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataset&lt;/code&gt;, then creating an array of objects:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const data = dataset.map(d =&amp;gt; {
	return {
	  year: parseTime(d.year),
	  count: +d.sale
	};
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The parsed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d.year&lt;/code&gt; stored into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;year&lt;/code&gt; should be like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Date Sat Jan 01 2011 00:00:00 GMT-0500 (Eastern Standard Time)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to summarize the data and calculate amount per year:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const salesYear = d3.nest()
.key(d =&amp;gt; d.year)
.rollup(amount =&amp;gt; d3.sum(amount, d =&amp;gt; d.sale))
.entries(data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.key(d =&amp;gt; d.year)&lt;/code&gt; forces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; object to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;Sat Jan 01 2011 00:00:00 GMT-0500 (Eastern Standard Time)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you were to plot &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sales Amount vs Year&lt;/code&gt; by using a scale that maps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Year&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; objects. You will get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaN&lt;/code&gt;. Because now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Year&lt;/code&gt; is not a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; object, but a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const line = d3.line()
   .x(d =&amp;gt; xScale(d.year))
   .y(d =&amp;gt; yScale(d.amount));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You need to convert the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date string&lt;/code&gt; back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date object&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const line = d3.line()
	.x(d =&amp;gt; xScale(new Date(d.year)))
	.y(d =&amp;gt; yScale(d.amount));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;d3-examples&quot;&gt;D3 examples&lt;/h2&gt;

&lt;p&gt;There are two websites that have a lot of examples. However, keep in mind some use different versions of D3, and the syntax might change in different versions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bl.ocks.org/&quot;&gt;Blocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://observablehq.com/&quot;&gt;Observable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/d3/d3/wiki&quot;&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Tom Ordonez</name></author><category term="analytics" /><category term="data visualization" /><category term="D3" /><category term="javascript" /><summary type="html">D3 is a great JavaScript library for data visualization. However, like every technology, it can be annoying when you don’t know why things don’t work as expected.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/1.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">D3 Tutorial for Data Visualization</title><link href="https://www.tomordonez.com/d3-tutorial-data-visualization/" rel="alternate" type="text/html" title="D3 Tutorial for Data Visualization" /><published>2020-02-02T00:00:00-05:00</published><updated>2020-02-02T00:00:00-05:00</updated><id>https://www.tomordonez.com/d3-tutorial-data-visualization</id><content type="html" xml:base="https://www.tomordonez.com/d3-tutorial-data-visualization/">&lt;p&gt;This is a detailed D3 tutorial for data visualization. Setup D3, build a barchart, and responsive D3. Updated June 2020.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;../d3-troubleshooting/&quot;&gt;D3 Troubleshooting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://alignedleft.com/work/d3-book-2e&quot;&gt;Interactive Data Visualization for the Web, 2nd Ed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d3js.org&quot;&gt;D3 Official Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bl.ocks.org/&quot;&gt;D3 Examples at Popular Blocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bost.ocks.org&quot;&gt;Blog, from the creator of D3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/d3/d3/blob/master/API.md&quot;&gt;D3 API Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bost.ocks.org/mike/map/&quot;&gt;D3 Making a Map&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://datawanderings.com/&quot;&gt;D3 Data Wanderings Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnwalley/d3-simple-slider&quot;&gt;D3 Making a Slider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/&quot;&gt;SVG Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.d3-graph-gallery.com/graph/custom_color.html&quot;&gt;Managing colors in D3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://colorbrewer2.org/#type=sequential&amp;amp;scheme=BuGn&amp;amp;n=3&quot;&gt;Color Brewer for Maps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/http.server.html&quot;&gt;Python HTTP Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://briancaffey.github.io/2016/05/13/d3js-on-jekyll.html&quot;&gt;D3.js on Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@louisemoxy/a-simple-way-to-make-d3-js-charts-svgs-responsive-7afb04bc2e4b&quot;&gt;D3.js charts responsive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dev-tips-and-tricks.com/create-responsive-bar-chart-d3-js&quot;&gt;Create a responsive bar chart with D3.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;JavaScript Date Object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;d3-version-and-compatibility&quot;&gt;D3 Version and Compatibility&lt;/h2&gt;

&lt;p&gt;Different versions of D3 don’t play along well. If you are following a book or tutorials, make sure to check which version of D3 is used or some things won’t work as expected.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-d3&quot;&gt;Setting up D3&lt;/h2&gt;

&lt;p&gt;First create three files, name them as you think is best, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.css&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3.js&lt;/code&gt; library from &lt;a href=&quot;https://d3js.org/&quot;&gt;D3 Website&lt;/a&gt; or use the external reference.&lt;/p&gt;

&lt;p&gt;If you downloaded the file into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; folder, then add this to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;lib/d3.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to use an external reference use one of these, depending on the version:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://d3js.org/d3.v4.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://d3js.org/d3.v5.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-an-html-template&quot;&gt;Create an HTML template&lt;/h2&gt;

&lt;p&gt;Here is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; template example including the references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.css&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt;. I also recommend putting a favicon so you can quickly find the tab. I downloaded a favicon and saved it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icon.png&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
        &amp;lt;title&amp;gt;D3 Canvas&amp;lt;/title&amp;gt;
        &amp;lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;icon.png&quot;&amp;gt;
        &amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://d3js.org/d3.v5.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;main.css&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;script type=&quot;text/javascript&quot; src=&quot;project.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;example-of-a-d3js-file&quot;&gt;Example of a D3.js file&lt;/h2&gt;

&lt;p&gt;This is an example of some of a D3 Javascript file just to see what it looks like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 700;
var h = 500;
var barPadding = 3;
var padding = 40;
var parseTime = d3.timeParse(&quot;%Y&quot;);
var formatTime = d3.timeFormat(&quot;%Y&quot;);

var svg = d3.select(&quot;body&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;width&quot;, w)
            .attr(&quot;height&quot;, h);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        total: +d.running_total
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run-a-web-server-with-python&quot;&gt;Run a web server with Python&lt;/h2&gt;

&lt;p&gt;In your project folder, run the web server with Python.&lt;/p&gt;

&lt;p&gt;Run it like this if you want the process to run in the background with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;.&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -m http.server 8888 --bind 127.0.0.1 &amp;amp;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or like this if you want to see the output. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--bind&lt;/code&gt; to explicitly use localhost only:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -m http.server 8888 --bind 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then open the browser on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:8888/&lt;/code&gt; and browse to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Serving HTTP on 127.0.0.1 port 8888 (http://127.0.0.1:8888/)
127.0.0.1 - - [06/Jun/2020 08:24:06] &quot;GET /index.html HTTP/1.1&quot; 200 -
127.0.0.1 - - [06/Jun/2020 08:24:06] &quot;GET /main.css HTTP/1.1&quot; 200 -
127.0.0.1 - - [06/Jun/2020 08:24:06] &quot;GET /project.js HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the browser verify that you see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag from the template:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;title&amp;gt;D3 Canvas&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stop the server with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl C&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;cdd-or-console-driven-development&quot;&gt;CDD or Console Driven Development&lt;/h1&gt;

&lt;p&gt;It’s a good idea to follow a Console Driven Development approach as you make changes to your files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css&lt;/code&gt;. When you interact with the visualization, you can see the result in the console and see if it works as expected.&lt;/p&gt;

&lt;p&gt;Go to the browser, right click Inspect and find the Console.&lt;/p&gt;

&lt;h2 id=&quot;the-dataset&quot;&gt;The dataset&lt;/h2&gt;

&lt;p&gt;For this tutorial, I am using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.csv&lt;/code&gt; that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;year&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;population&lt;/code&gt; as shown:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;year,population
1950,5
1951,10
1955,15
1959,20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;about-asynchronous&quot;&gt;About Asynchronous&lt;/h2&gt;

&lt;p&gt;JavaScript runs asynchronous. Here is a good explanation about it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call&quot;&gt;How do I return the response from an asynchronous call?
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The answer provides a great analogy for synchronous and asynchronous.&lt;/p&gt;

&lt;p&gt;Synchronous is like making a phone call to tech support to fix your Internet. While they figure out the problem, you wait on the call, until the problem is solved then you end the call.&lt;/p&gt;

&lt;p&gt;Asynchronous is making the same phone call. Instead of waiting on the call you ask them to call you back when they fix the problem. You end the call, go about your day, then wait for them to call back.&lt;/p&gt;

&lt;p&gt;I assume that asynchronous on an app means if you are loading a page, it will load the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;. If there is a feature that is not working, only that feature won’t load. If you change the data on a feature, then you won’t have to reload the page, the feature changes as you interact with the features.&lt;/p&gt;

&lt;h2 id=&quot;about-anonymous-functions&quot;&gt;About Anonymous functions&lt;/h2&gt;

&lt;p&gt;If you know Python, this is like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This is what loading a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3 v4&lt;/code&gt; looks like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, function(data) {
    somethingHappens(data);
});
console.log(data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is an anonymous callback function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function(data)&lt;/code&gt;. It runs the code inside the curly braces and then it is called back to this function.&lt;/p&gt;

&lt;p&gt;There is a problem here. The script will continue and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(data)&lt;/code&gt;, regardless if the data was not completely loaded. Then the console won’t display any data.&lt;/p&gt;

&lt;p&gt;You could hack this code and perhaps put some sort of a timer but then how much time are you supposed to pass to that function?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, function(data) {
    somethingHappens(data);
});

someSortOfTimer(60);
console.log(data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead, within the callback function, write all the code that uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; that is loaded:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, function(data) {
    somethingHappens(data);
    console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;loading-a-csv-file---incompatible-d3-versionssyntax&quot;&gt;Loading a CSV file - Incompatible D3 versions/syntax&lt;/h2&gt;

&lt;p&gt;Loading a CSV file changes in different versions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3&lt;/code&gt; and this incompatibility is very confusing.&lt;/p&gt;

&lt;p&gt;As shown in &lt;a href=&quot;http://datawanderings.com/2018/08/15/d3-js-v5-promise-syntax-examples/&quot;&gt;this&lt;/a&gt; blog post. There are differences loading a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3.v4&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3.v5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3.v4&lt;/code&gt; you can use this syntax:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, function(data) {
    somethingHappens(data);
    console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s try this using the Console Driven Development approach. Make sure that you created these files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;: Using the template as shown before.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.css&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.csv&lt;/code&gt;: Add the data as shown before&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; is using this source &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://d3js.org/d3.v5.min.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, function(data) {
    console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reload the browser and look at the console:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Navigated to http://127.0.0.1:8888/index.html
project.js:2 {year: &quot;1950&quot;, population: &quot;5&quot;}
project.js:2 {year: &quot;1951&quot;, population: &quot;10&quot;}
project.js:2 {year: &quot;1955&quot;, population: &quot;15&quot;}
project.js:2 {year: &quot;1959&quot;, population: &quot;20&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works so far and we are using the source for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D3.v5&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Clear the console with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + L&lt;/code&gt; or type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear()&lt;/code&gt; (this won’t clear if you set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preserve log&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This syntax from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4&lt;/code&gt; won’t work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v5&lt;/code&gt; as shown on &lt;a href=&quot;https://github.com/d3/d3-fetch/blob/v1.1.2/README.md#csv&quot;&gt;D3 API docs&lt;/a&gt;. Actually this documentation is pretty confusing as it doesn’t specify which D3 version is used on the examples:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, function(data) {

}).then(function(data) {
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The data is not loaded and the console shows this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Navigated to http://127.0.0.1:8888/index.html
[columns: Array(2)]
 columns: Array(2)
     0: &quot;year&quot;
     1: &quot;population&quot;
     length: 2
     __proto__: Array(0)
     ...
     ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This doesn’t work either:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var mydata = d3.csv(&quot;file.csv&quot;, function(data) {
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. Then calling the variable:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mydata
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shows this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Promise {&amp;lt;resolved&amp;gt;: Array(0)}
__proto__: Promise
[[PromiseStatus]]: &quot;resolved&quot;
[[PromiseValue]]: Array(0)
columns: (2) [&quot;year&quot;, &quot;population&quot;]
length: 0
__proto__: Array(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;loading-a-csv-file-in-d3v5-with-promises&quot;&gt;Loading a CSV file in D3.v5 with Promises&lt;/h2&gt;

&lt;p&gt;Following the previous example.&lt;/p&gt;

&lt;p&gt;D3 version 5 uses a feature called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promises&lt;/code&gt;. Use this syntax:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;).then(function(dataset) {
    console.log(dataset);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The console shows this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Promise {&amp;lt;pending&amp;gt;}

(4) [{…}, {…}, {…}, {…}, columns: Array(2)]
    0: {year: &quot;1950&quot;, population: &quot;5&quot;}
    1: {year: &quot;1951&quot;, population: &quot;10&quot;}
    2: {year: &quot;1955&quot;, population: &quot;15&quot;}
    3: {year: &quot;1959&quot;, population: &quot;20&quot;}
    columns: (2) [&quot;year&quot;, &quot;population&quot;]
    length: 4
    __proto__: Array(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or use this syntax, it shows the same console output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var mydata = d3.csv(&quot;file.csv&quot;)

mydata.then(function(dataset) {
    console.log(dataset);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can load multiple datasets like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var data1 = d3.csv(&quot;file1.csv&quot;)
var data2 = d3.csv(&quot;file2.csv&quot;)

Promise.all([data1, data2]).then(someFunction)

function someFunction(values) {
    somethingFunHere(values);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Promises&lt;/code&gt; in the &lt;a href=&quot;https://observablehq.com/@observablehq/introduction-to-promises&quot;&gt;Observable blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;loading-data-with-csv-dsv-tsv-or-json&quot;&gt;Loading data with CSV, DSV, TSV or JSON&lt;/h2&gt;

&lt;p&gt;There are a few methods to load data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.dsv&lt;/code&gt; this means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delimiter separated values&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.csv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.tsv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.dsv&lt;/code&gt; like this and explicitly define the separator:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.dsv(&quot;,&quot;, &quot;file.csv&quot;).then(function(dataset) {
    console.log(dataset);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Console shows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Promise {&amp;lt;pending&amp;gt;}

(4) [{…}, {…}, {…}, {…}, columns: Array(2)]
    0: {year: &quot;1950&quot;, population: &quot;5&quot;}
    1: {year: &quot;1951&quot;, population: &quot;10&quot;}
    2: {year: &quot;1955&quot;, population: &quot;15&quot;}
    3: {year: &quot;1959&quot;, population: &quot;20&quot;}
    columns: (2) [&quot;year&quot;, &quot;population&quot;]
    length: 4
    __proto__: Array(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.csv&lt;/code&gt; as I have shown before:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;).then(function(dataset) {
    console.log(dataset);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.json&lt;/code&gt; like this. Let’s create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.json&lt;/code&gt; and add this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
    &quot;year&quot;: 1950,
    &quot;population&quot;: 5
  },
  {
    &quot;year&quot;: 1951,
    &quot;population&quot;: 10
  },
  {
    &quot;year&quot;: 1955,
    &quot;population&quot;: 15
  },
  {
    &quot;year&quot;: 1959,
    &quot;population&quot;: 20
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then load the data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.json(&quot;data.json&quot;).then(function(dataset) {
    console.log(dataset);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Console shows the same output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Promise {&amp;lt;pending&amp;gt;}

(4) [{…}, {…}, {…}, {…}]
    0: {year: 1950, population: 5}
    1: {year: 1951, population: 10}
    2: {year: 1955, population: 15}
    3: {year: 1959, population: 20}
    length: 4
    __proto__: Array(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;converting-string-to-other-types&quot;&gt;Converting String to other Types&lt;/h2&gt;

&lt;p&gt;When loading a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; file, the data is parsed as strings.&lt;/p&gt;

&lt;p&gt;If this is the data contained in the CSV:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;year,population
1950,5
1951,10
1955,15
1959,20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will parse the years as strings and the population as strings. You need to convert these strings to the correct type.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;year&lt;/code&gt;: From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date&lt;/code&gt; format.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;population&lt;/code&gt;: From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integer&lt;/code&gt; format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;parsing-and-formatting-the-year&quot;&gt;Parsing and formatting the year&lt;/h2&gt;

&lt;p&gt;You can use this syntax and see the resources for more details&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var parseTime = d3.timeParse(&quot;%Y&quot;);
var formatTime = d3.timeFormat(specifier);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;More details here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%Y&lt;/code&gt;: Parse year in decimal number such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;specifier&lt;/code&gt;: More details &lt;a href=&quot;https://github.com/d3/d3-time-format/blob/v2.2.3/README.md#locale_format&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/d3/d3-time-format/blob/v2.2.3/README.md#timeParse&quot;&gt;d3.timeParse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/d3/d3-time-format/blob/v2.2.3/README.md#timeFormat&quot;&gt;d3.timeFormat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now let’s add this code to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var parseTime = d3.timeParse(&quot;%Y&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to pass a function as a parameter when loading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt;. First we need to create the function.&lt;/p&gt;

&lt;h2 id=&quot;a-function-to-parse-every-row-of-the-csv-file&quot;&gt;A function to parse every row of the CSV file&lt;/h2&gt;

&lt;p&gt;This function is passed as a parameter of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.csv&lt;/code&gt; method. It takes every row as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;. It parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;year&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseTime(d.year)&lt;/code&gt; and for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;population&lt;/code&gt;, it uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; operator to force the string to numbers on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+d.population&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s add this to our code so now it shows this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clear the console and reload the browser. See if there are any errors in the console or in the Python server.&lt;/p&gt;

&lt;h2 id=&quot;loading-a-csv-file-with-rowconverter&quot;&gt;Loading a CSV file with rowConverter&lt;/h2&gt;

&lt;p&gt;Load the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csv&lt;/code&gt; file and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rowConverter&lt;/code&gt;. Add this to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt; and reload the browser:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    };
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {
    console.log(dataset);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what the code does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It opens &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.csv&lt;/code&gt; and passes the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rowConverter&lt;/code&gt; as a parameter.&lt;/li&gt;
  &lt;li&gt;It takes every row using the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.csv&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;year&lt;/code&gt; from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseTime(d.year)&lt;/code&gt; format.&lt;/li&gt;
  &lt;li&gt;Parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;population&lt;/code&gt; from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; to an integer using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+d.population&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Then print the values in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The console shows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(4) [{…}, {…}, {…}, {…}, columns: Array(2)]
    0: {year: Sun Jan 01 1950 00:00:00 GMT-0500 (Eastern Standard Time), population: 5}
    1: {year: Mon Jan 01 1951 00:00:00 GMT-0500 (Eastern Standard Time), population: 10}
    2: {year: Sat Jan 01 1955 00:00:00 GMT-0500 (Eastern Standard Time), population: 15}
    3: {year: Thu Jan 01 1959 00:00:00 GMT-0500 (Eastern Standard Time), population: 20}
    columns: (2) [&quot;year&quot;, &quot;population&quot;]
    length: 4
    __proto__: Array(0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bind-the-dataset-values-to-elements-in-the-dom&quot;&gt;Bind the dataset values to elements in the DOM&lt;/h2&gt;

&lt;p&gt;Now we need to use the data and bind it to elements in the DOM.&lt;/p&gt;

&lt;p&gt;This is the cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; elements with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.select()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add the data with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Bind the data to elements with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.enter()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Append elements to the DOM with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.append()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s add some code inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.csv&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    };
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    d3.select(&quot;body&quot;).selectAll(&quot;p&quot;)
    .data(dataset)
    .enter()
    .append(&quot;p&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how it works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It selects the element &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Then it selects all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; elements. However, no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; elements exist yet.&lt;/li&gt;
  &lt;li&gt;Use the attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt; to read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataset&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.enter()&lt;/code&gt; to bind the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataset&lt;/code&gt; values with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; elements&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.append(&quot;p&quot;)&lt;/code&gt; to append the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; elements to the DOM.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stop and reload the server. Also, reload the page. It seems as if nothing happened. Since we removed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(dataset)&lt;/code&gt;, there is also no output on the console.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elements&lt;/code&gt; tab to see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; code. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; section has this now:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;project.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It created four &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; tags. Let’s go back to the console and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.selectAll(&quot;p&quot;);&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Pt {_groups: Array(1), _parents: Array(1)}
_groups: [NodeList(4)]
_parents: [html]
__proto__: Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;groups&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_groups: Array(1)
0: NodeList(4) [p, p, p, p]
length: 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeList&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: NodeList(4)
    0: p
    1: p
    2: p
    3: p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expand the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0: p&lt;/code&gt;. It’s pretty long, scroll down to the bottom:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__data__: {year: Sun Jan 01 1950 00:00:00 GMT-0500 (Eastern Standard Time), population: 5}
__proto__: HTMLParagraphElement
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__data__:
population: 5
year: Sun Jan 01 1950 00:00:00 GMT-0500 (Eastern Standard Time) {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;drawing-svg&quot;&gt;Drawing SVG&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scalable Vector Graphics&lt;/code&gt;. More info on &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;Wikipedia&lt;/a&gt;. This is used to draw a sort of canvas to add the elements of our visualization.&lt;/p&gt;

&lt;p&gt;Create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; element with width &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; and height &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt;. Add this code to the top of the example as shown:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3; # This will be used later for bar charts
var padding = 40; # This too
var svg = d3.select(&quot;body&quot;)
            .append(&quot;svg&quot;);
            .attr(&quot;width&quot;, w)
            .attr(&quot;height&quot;, h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    };
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    d3.select(&quot;body&quot;).selectAll(&quot;p&quot;)
    .data(dataset)
    .enter()
    .append(&quot;p&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reload the page and look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; code. An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; tag has been created:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg width=&quot;500&quot; height=&quot;300&quot;&amp;gt;&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; on the page shows a small rectangle:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-svg.jpg&quot; alt=&quot;D3 SVG Canvas&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-bar-chart&quot;&gt;Creating a Bar Chart&lt;/h2&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; dataset:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;year,population
1950,5
1951,10
1955,15
1959,20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are loading it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.csv&lt;/code&gt; and we will add the bar chart code inside the callback function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {
    // add code here
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create rectangle shapes by adding attributes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x,y)&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; is measured from left to right of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; is measured from top to bottom of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt;. The coordinate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0,0)&lt;/code&gt; is the top left corner. The coordinates increase to the right for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and down for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; points to the bottom left of the rectangle, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; points to the top left of the rectangle. You are drawing kind of upside down. That’s how weird SVG is.&lt;/p&gt;

&lt;h2 id=&quot;drawing-each-rectangle-for-the-bar-chart&quot;&gt;Drawing each rectangle for the bar chart&lt;/h2&gt;

&lt;p&gt;In this example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt; draws &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20px&lt;/code&gt; to the right, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt; draws &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100px&lt;/code&gt; downwards from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; coordinate. In other words, all rectangles of the bar chart are drawn downwards, following the characteristics of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; having its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0,0)&lt;/code&gt; on the top left corner.&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect1.jpg&quot; alt=&quot;D3 One Bar Rectangle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far we have this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;body&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;width&quot;, w)
            .attr(&quot;height&quot;, h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, 0)
       .attr(&quot;y&quot;, 0)
       .attr(&quot;width&quot;, 20)
       .attr(&quot;height&quot;, 100);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reload the browser to see the result and the HTML:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg width=&quot;500&quot; height=&quot;300&quot;&amp;gt;
    &amp;lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;20&quot; height=&quot;100&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;20&quot; height=&quot;100&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;20&quot; height=&quot;100&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;20&quot; height=&quot;100&quot;&amp;gt;&amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.attr(&quot;x&quot;, 0)&lt;/code&gt;, it makes the bar chart rectangles to overlap on top of each other, as they are all drawn at the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x, y)&lt;/code&gt; position.&lt;/p&gt;

&lt;h2 id=&quot;scaling-the-coordinates-of-the-rectangles&quot;&gt;Scaling the coordinates of the rectangles&lt;/h2&gt;

&lt;p&gt;The coordinates of the rectangles need to scale dynamically. For example for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x values&lt;/code&gt;, use an anonymous function to pass each value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; of the dataset, and the index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; for each value. Then compute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; times the width &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; over the length of the dataset.&lt;/p&gt;

&lt;p&gt;Do the calculation by hand and you will understand how it works. Update the code to this and reload the browser:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;body&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;width&quot;, w)
            .attr(&quot;height&quot;, h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    svg.selectAll(&quot;rect&quot;)
        .data(dataset)
        .enter()
        .append(&quot;rect&quot;)
        .attr(&quot;x&quot;, function(d, i) {
            return i * (w/dataset.length);
            })
        .attr(&quot;y&quot;, function(d) {
            return h - d.population;
            })
        .attr(&quot;width&quot;, w/dataset.length - barPadding)
        .attr(&quot;height&quot;, function(d) {
            return d.population;
            })
        .attr(&quot;fill&quot;, &quot;teal&quot;);

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result is this:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect2.jpg&quot; alt=&quot;D3 BarChart Rectangles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The HTML shows this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg width=&quot;500&quot; height=&quot;300&quot;&amp;gt;
    &amp;lt;rect x=&quot;0&quot; y=&quot;295&quot; width=&quot;122&quot; height=&quot;5&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;125&quot; y=&quot;290&quot; width=&quot;122&quot; height=&quot;10&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;250&quot; y=&quot;285&quot; width=&quot;122&quot; height=&quot;15&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;375&quot; y=&quot;280&quot; width=&quot;122&quot; height=&quot;20&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-this-works-attrx-functiond-i&quot;&gt;How this works: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr(&quot;x&quot;, function(d, i)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We need to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; position of each rectangle. This points to the bottom left of each rectangle.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;attr(&quot;x&quot;, function(d, i) {
    return i * (w/dataset.length);
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For each value of the dataset:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;year     population
1950        5
1951        10
1955        15
1959        20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; values are as follows. Keep in mind the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; values are not used for the calculation, only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; (i) of each value. First, let’s look at the indices:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   d           i (index)
[1950, 5]       0
[1951, 10]      1
[1955, 15]      2
[1950, 20]      3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The calculation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(w/dataset.length)&lt;/code&gt; is done to evenly position each rectangle across the width &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt; was set before as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var w = 500&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; of the dataset is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; is used to find a starting position for each rectangle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The calculations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i * (w/dataset.length)&lt;/code&gt; are.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 * (500/4)
1 * (500/4)
2 * (500/4)
3 * (500/4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then they are returned to the call back function as a parameter of each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; attribute.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;x&quot;, 0)
.attr(&quot;x&quot;, 125)
.attr(&quot;x&quot;, 250)
.attr(&quot;x&quot;, 375)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means the first rectangle is positioned at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x = 0&lt;/code&gt;, then second rectangle at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x = 125&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h2 id=&quot;how-this-works-attry-functiond&quot;&gt;How this works: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.attr(&quot;y&quot;, function(d)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We need to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; position of each rectangle. This points to the top left of each rectangle.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;y&quot;, function(d) {
    return h - d.population;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt; was previously set as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var h = 300;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The call back function is passing every row of the dataset as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; and we need the second value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;population&lt;/code&gt; of each row to calculate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; coordinate of each rectangle.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return h - d.population;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given these values, where a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; corresponds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[d.year, d.population]&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   d
[1950, 5]
[1951, 10]
[1955, 15]
[1950, 20]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The subtractions are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;300 - 5 = 295
300 - 10 = 290
300 - 15 = 285
300 - 20 = 280
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0,0)&lt;/code&gt; is at the top left. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;295&lt;/code&gt; means measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;295px&lt;/code&gt; from top moving downwards.&lt;/p&gt;

&lt;p&gt;These are returned to the call back function to form these:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;y&quot;, 295)
.attr(&quot;y&quot;, 290)
.attr(&quot;y&quot;, 285)
.attr(&quot;y&quot;, 280)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Putting these two attributes together, we can get the coordinates for each rectangle&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;x&quot;, 0)        .attr(&quot;y&quot;, 295)
.attr(&quot;x&quot;, 125)        .attr(&quot;y&quot;, 290)
.attr(&quot;x&quot;, 250)        .attr(&quot;y&quot;, 285)
.attr(&quot;x&quot;, 375)        .attr(&quot;y&quot;, 280)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rectangles are at these coordinates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rectangle 1: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0, 295)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rectangle 2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(125, 290)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rectangle 3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(250, 285)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rectangle 4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(375, 280)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-this-works-attrwidth-wdatasetlength---barpadding&quot;&gt;How this works: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.attr(&quot;width&quot;, w/dataset.length - barPadding)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now that we got the coordinates for each rectangle, then we need to draw them.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.attr&lt;/code&gt; width, draws each rectangle from left to right.&lt;/p&gt;

&lt;p&gt;We know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(w/dataset.length) = 500 / 4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are using a variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barPadding&lt;/code&gt; that we should have defined previously to make some separation between the rectangles.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var barPadding = 3;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt; is the same for all rectangles:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;w/dataset.length - barPadding = 500/4 - 3 = 122
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This value is then used as a parameter:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;width&quot;, w/dataset.length - barPadding)
.attr(&quot;width&quot;, 122)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-this-works-attrheight-functiond&quot;&gt;How this works: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.attr(&quot;height&quot;, function(d)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;As seen here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;height&quot;, function(d) {
    return d.population;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set the height starting from the position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; by returning the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d.population&lt;/code&gt; on the dataset. In other words, build the rectangle downwards from top to bottom starting at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Putting it all together using this format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x, width, y, height)&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rectangle 1: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0,   122, 295, 5)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rectangle 2: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(125, 122, 290, 10)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rectangle 3: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(250, 122, 285, 15)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Rectangle 4: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(375, 122, 280, 20)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a description of the first two rectangles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rect1&lt;/code&gt; starts at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x=0&lt;/code&gt;, draw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width=122&lt;/code&gt; towards the right, at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y=295&lt;/code&gt;, draw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height=5&lt;/code&gt; towards the bottom.&lt;/li&gt;
  &lt;li&gt;There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barPadding = 3&lt;/code&gt; towards the right, separating Rect1 from Rect2.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rect2&lt;/code&gt; starts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x=125&lt;/code&gt;, draw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width=122&lt;/code&gt; towards the right, at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y=290&lt;/code&gt;, draw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height=10&lt;/code&gt; towards the bottom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind again the weird &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; way of positioning/drawing elements left to right, top to bottom.&lt;/p&gt;

&lt;h2 id=&quot;using-scales&quot;&gt;Using Scales&lt;/h2&gt;

&lt;p&gt;This is where things get interesting and you can spend countless hours trying to fix the drawing in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; way.&lt;/p&gt;

&lt;p&gt;Definitions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Input domain&lt;/code&gt; is the range of input data values&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Output range&lt;/code&gt; is the range of output values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the example having an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input domain&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[5, 20]&lt;/code&gt; (From &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dataset = [5, 10, 15, 20]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output range&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[10, 250]&lt;/code&gt; in pixels. Where the minimum input value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt; is represented as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10px&lt;/code&gt;, and the maximum value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20&lt;/code&gt; is represented as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;250px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The input value can be normalized and this result can be scaled to the output. For example normalizing input values to a range of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. Then maybe the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; can be represented as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0px&lt;/code&gt; and the maximum of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As shown below. The bar chart rectangles look too short compared to the SVG canvas. We can scale the rectangles to improve the visualization:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect2.jpg&quot; alt=&quot;D3 BarChart Rectangles&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-linear-scale-with-scalelinear&quot;&gt;Create a linear scale with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaleLinear()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Following the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; with this data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;year     population
1950        5
1951        10
1955        15
1959        20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yScale&lt;/code&gt; is used to scale the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;population&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The input domain could start at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, up to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;population&lt;/code&gt; column&lt;/li&gt;
  &lt;li&gt;The output range is to limit the drawing to the padded limits of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; height.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As seen here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yScale = d3.scaleLinear()
           .domain([0, d3.max(dataset, function(d) { return d.population; })])
           .range([h - padding, padding]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; way is that the coordinates increase left to right, top to bottom. For this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.range([h - padding, padding]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The height &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt; is the height of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; previously defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var h = 300;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;padding&lt;/code&gt; was defined previously as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var padding = 40;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h - padding&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;300 - 40&lt;/code&gt; which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;260&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the range is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.range([260, 40])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No, the range is not backwards. For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SVG&lt;/code&gt; means the range is between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; coordinate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;260&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; coordinate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40&lt;/code&gt;. Which is the padded region of the height of the SVG.&lt;/p&gt;

&lt;h2 id=&quot;create-a-band-scale-with-scaleband&quot;&gt;Create a Band scale with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaleBand()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;More about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaleBand()&lt;/code&gt; in the &lt;a href=&quot;https://github.com/d3/d3-scale/blob/v2.2.2/README.md#band-scales&quot;&gt;D3 Scale Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The D3 Docs have this great image to help visualize the different methods:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3_scaleBand.png&quot; alt=&quot;D3 scaleBand&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are the methods available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.domain()&lt;/li&gt;
  &lt;li&gt;.range()&lt;/li&gt;
  &lt;li&gt;.rangeRound()&lt;/li&gt;
  &lt;li&gt;.round()&lt;/li&gt;
  &lt;li&gt;.paddingInner()&lt;/li&gt;
  &lt;li&gt;.paddingOuter()&lt;/li&gt;
  &lt;li&gt;.padding()&lt;/li&gt;
  &lt;li&gt;.align()&lt;/li&gt;
  &lt;li&gt;.bandwidth()&lt;/li&gt;
  &lt;li&gt;.step()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; with this data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;year     population
1950        5
1951        10
1955        15
1959        20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;d3scalebanddomain&quot;&gt;d3.scaleBand().domain()&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xScale&lt;/code&gt; is used to scale the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;year&lt;/code&gt; column. Instead of using it as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;, it maps the range of the dataset length to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt; range.:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xScale = d3.scaleBand()
           .domain(d3.range(dataset.length))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.domain(d3.range(dataset.length))&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataset.length&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.range(dataset.length)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; function to test:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {
    console.log(dataset.length);
    console.log(d3.range(dataset.length));
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The console should output this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4
Array(4) [ 0, 1, 2, 3 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaleBand()&lt;/code&gt; is using this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.domain([0, 1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;d3scalebandrange&quot;&gt;d3.scaleBand().range()&lt;/h3&gt;

&lt;p&gt;Setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt; to fit within the width of the SVG:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xScale = d3.scaleBand()
           .domain(d3.range(dataset.length))
           .range([0, w]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt; calculates even bars using this formula &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(w - 0) / .domain().length&lt;/code&gt;. In our case that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500/4 = 125&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;d3scalebandpaddinginner&quot;&gt;d3.scaleBand().paddingInner()&lt;/h3&gt;

&lt;p&gt;As explained in the API docs. It says that if you don’t specify a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paddingInner&lt;/code&gt;, the default is zero &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;. If you specify one, the number must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;= 1&lt;/code&gt;. A value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; means there is no blank space between the bars. A value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; means a bandwidth of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xScale = d3.scaleBand()
           .domain(d3.range(dataset.length))
           .range([0, w])
           .paddingInner(0.1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;d3scalebandpaddingouter&quot;&gt;d3.scaleBand().paddingOuter()&lt;/h3&gt;

&lt;p&gt;This is the padding to apply before the first bar and after the last bar. The number is in the range of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0, 1]&lt;/code&gt;. If not specified, the padding returns zero.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xScale = d3.scaleBand()
           .domain(d3.range(dataset.length))
           .range([0, w])
           .paddingInner(0.1)
           .paddingOuter(0.1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;d3scalebandrangeround&quot;&gt;d3.scaleBand().rangeRound()&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt; can calculate long decimal numbers such as this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg width=&quot;500&quot; height=&quot;300&quot;&amp;gt;
    &amp;lt;rect x=&quot;12.195121951219477&quot; y=&quot;205&quot; width=&quot;122&quot; height=&quot;55&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;134.14634146341461&quot; y=&quot;150&quot; width=&quot;122&quot; height=&quot;110&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;256.0975609756098&quot; y=&quot;95&quot; width=&quot;122&quot; height=&quot;165&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;378.04878048780483&quot; y=&quot;40&quot; width=&quot;122&quot; height=&quot;220&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rangeRound&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xScale = d3.scaleBand()
           .domain(d3.range(dataset.length))
           .rangeRound([padding, w])
           .paddingInner(0.1)
           .paddingOuter(0.1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; now shows something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg width=&quot;500&quot; height=&quot;300&quot;&amp;gt;
    &amp;lt;rect x=&quot;14&quot; y=&quot;205&quot; width=&quot;122&quot; height=&quot;55&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;135&quot; y=&quot;150&quot; width=&quot;122&quot; height=&quot;110&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;256&quot; y=&quot;95&quot; width=&quot;122&quot; height=&quot;165&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;377&quot; y=&quot;40&quot; width=&quot;122&quot; height=&quot;220&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;d3scalebandbandwidth&quot;&gt;d3.scaleBand().bandwidth()&lt;/h3&gt;

&lt;p&gt;This is used later to return the width of each bar.&lt;/p&gt;

&lt;h2 id=&quot;applying-scales-scaleband-and-scalelinear&quot;&gt;Applying scales &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaleBand()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaleLinear()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We need to update the code and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale&lt;/code&gt; functions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;body&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;width&quot;, w)
            .attr(&quot;height&quot;, h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(d3.range(dataset.length))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, function(d) { return d.population; })])
               .range([h - padding, padding]);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, function(d, i) {
           return xScale(i);
       })
       .attr(&quot;y&quot;, function(d) {
           return yScale(d.population);
       })
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, function(d) {
           return h - padding - yScale(d.population);
       })
       .attr(&quot;fill&quot;, &quot;teal&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result is this bar chart:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect3.jpg&quot; alt=&quot;D3 scaleBand&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; is this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg width=&quot;500&quot; height=&quot;300&quot;&amp;gt;
    &amp;lt;rect x=&quot;52&quot; y=&quot;205&quot; width=&quot;101&quot; height=&quot;55&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;164&quot; y=&quot;150&quot; width=&quot;101&quot; height=&quot;110&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;276&quot; y=&quot;95&quot; width=&quot;101&quot; height=&quot;165&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;rect x=&quot;388&quot; y=&quot;40&quot; width=&quot;101&quot; height=&quot;220&quot; fill=&quot;teal&quot;&amp;gt;&amp;lt;/rect&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not exactly sure how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt; was calculated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;101&lt;/code&gt;. I know that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rangeRound([padding, w])&lt;/code&gt; calculates each bar width to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(w-40)/domain().length&lt;/code&gt; equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(500 - 40) / 4 = 115&lt;/code&gt;. Using the inner and outer padding, somehow this is reduced to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;101&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; to test the output such as in here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.selectAll(&quot;rect&quot;)
   .data(dataset)
   .enter()
   .append(&quot;rect&quot;)
   .attr(&quot;x&quot;, function(d, i) {

       console.log(&quot;x&quot;);
       console.log(d);
       console.log(xScale.domain());
       console.log(xScale.range());
       console.log(xScale.paddingInner());
       console.log(xScale.paddingOuter());
       console.log(xScale.bandwidth());
       console.log(xScale(i));

       return xScale(i);
   })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;barchart-visualization&quot;&gt;Barchart Visualization&lt;/h2&gt;

&lt;p&gt;This how the bar chart looks like:&lt;/p&gt;

&lt;p&gt;(This is a D3 vis)&lt;/p&gt;

&lt;div id=&quot;d3-barchart-vis&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;d3-responsive-visualization-on-indexhtml-and-projectjs&quot;&gt;D3 Responsive Visualization on index.html and project.js&lt;/h2&gt;

&lt;p&gt;Continuing adding responsive to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt;, we need to make two changes:&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; now says this. I added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div id=&quot;d3-barchart-vis&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
        &amp;lt;title&amp;gt;D3 Canvas&amp;lt;/title&amp;gt;
        &amp;lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;icon.png&quot;&amp;gt;
        &amp;lt;script type=&quot;text/javascript&quot; src=&quot;assets/js/d3.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;main.css&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id=&quot;d3-barchart-vis&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&quot;text/javascript&quot; src=&quot;project.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt; needs to be modified when creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt;. It selects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div id=&quot;d3-barchart-vis&quot;&lt;/code&gt;. It uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preserveAspectRatio&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewBox&lt;/code&gt; for responsive. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewBox&lt;/code&gt; follows this syntax &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;min-x min-y width height&quot;&lt;/code&gt;. I concatenated the numbers and the spaces:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.js&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(d3.range(dataset.length))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, function(d) { return d.population; })])
               .range([h - padding, padding]);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, function(d, i) {
           return xScale(i);
       })
       .attr(&quot;y&quot;, function(d) {
           return yScale(d.population);
       })
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, function(d) {
           return h - padding - yScale(d.population);
       })
       .attr(&quot;fill&quot;, &quot;teal&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-arrow-functions&quot;&gt;Using Arrow Functions&lt;/h2&gt;

&lt;p&gt;More about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions on Mozilla&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given this example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elements.map(function(element) {
    return element.length;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be simplified to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elements.map((element) =&amp;gt; {
    return element.length;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If there is only one parameter and the only statement is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; then it can be simplified to this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elements.map(element =&amp;gt; element.length);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Refactoring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg.selectAll(&quot;rect&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(d3.range(dataset.length))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, function(d) { return d.population; })])
               .range([h - padding, padding]);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, function(d, i) {
           return xScale(i);
       })
       .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
       .attr(&quot;fill&quot;, &quot;teal&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-axes-to-our-bar-chart&quot;&gt;Adding Axes to our Bar Chart&lt;/h2&gt;

&lt;p&gt;Use any of these: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.axisTop&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.axisBottom&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.axisLeft&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.axisRight&lt;/code&gt;. Then append a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g&lt;/code&gt; (group) element to the end of the SVG.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var xAxis = d3.axisBottom(xScale);
var yAxis = d3.axisLeft(yScale);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Put this at the end of the script, since the graphics lay on top of each other, making the axes the last visible graph at the top of the SVG.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.append(&quot;g&quot;)
   .attr(&quot;class&quot;, &quot;axis&quot;)
   .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (h - padding) + &quot;)&quot;)
   .call(xAxis);

svg.append(&quot;g&quot;)
   .attr(&quot;class&quot;, &quot;axis&quot;)
   .attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,0)&quot;)
   .call(yAxis);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This line is a string concatenation:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;transform&quot;, &quot;translate(0,&quot; + (h - padding) + &quot;)&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It computes to the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.attr(&quot;transform&quot;, &quot;translate(0&quot;, + (300 -  40  ) + &quot;)&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the result is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.append(&quot;g&quot;)
   .attr(&quot;class&quot;, &quot;axis&quot;)
   .attr(&quot;transform&quot;, &quot;translate(0,260)&quot;)
   .call(xAxis);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt; function moves the object by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;. More details in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform&quot;&gt;MDN Web Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The bar chart should now look like this:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect4.jpg&quot; alt=&quot;D3 barchart with Axes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The complete code with x and y axes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(d3.range(dataset.length))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, function(d) { return d.population; })])
               .range([h - padding, padding]);

    var xAxis = d3.axisBottom(xScale);
    var yAxis = d3.axisLeft(yScale);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, function(d, i) {
           return xScale(i);
       })
       .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
       .attr(&quot;fill&quot;, &quot;teal&quot;);

    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;x axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (h - padding) + &quot;)&quot;)
       .call(xAxis);

    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;y axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,0)&quot;)
       .call(yAxis);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-ticks-on-the-axes&quot;&gt;Adding ticks on the Axes&lt;/h2&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ticks()&lt;/code&gt;. However, D3 will override this if it wants to divide the input domain evenly.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tickValues([an array of values])&lt;/code&gt; to set them manually.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tickFormat&lt;/code&gt; to format the axis labels.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var xAxis = d3.axisBottom(xScale)
              .ticks(someParameterHere);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For now I will not use this.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-title-to-the-graph&quot;&gt;Adding a Title to the Graph&lt;/h2&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append(&quot;text&quot;)&lt;/code&gt; to append a title to the graph:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.append(&quot;text&quot;)
   .attr(&quot;x&quot;, w/2)
   .attr(&quot;y&quot;, padding)
   .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
   .style(&quot;font-size&quot;, &quot;16px&quot;)
   .text(&quot;Awesome Barchart&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-a-label-for-the-x-axis&quot;&gt;Add a label for the x Axis&lt;/h2&gt;

&lt;p&gt;A label can be added to the x Axis by appending a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; and using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt; to position the text.&lt;/p&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate&lt;/code&gt; uses a string concatenation to get to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate(w/2, h-10)&lt;/code&gt; which is calculated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate(500/2, 300-10)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;translate(250, 290)&lt;/code&gt;. Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; is in the middle of the SVG and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10px&lt;/code&gt; from the bottom (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;290px&lt;/code&gt; from the top).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.append(&quot;text&quot;)
   .attr(&quot;transform&quot;, &quot;translate(&quot; + (w/2) + &quot; ,&quot; + (h-10) + &quot;)&quot;)
   .style(&quot;text-anchor&quot;, &quot;middle&quot;)
   .text(&quot;Year&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-a-label-for-the-y-axis&quot;&gt;Add a label for the y Axis&lt;/h2&gt;

&lt;p&gt;The label for the y Axis is a bit different. First we need to rotate the label vertically with a negative &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-90&lt;/code&gt; degrees. Then the point of reference for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0,0)&lt;/code&gt; changes. If I am not mistaken it’s now on the top right relative to the rotated text.&lt;/p&gt;

&lt;p&gt;To center the text vertically. Move it half way to the left at an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; distance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-(h/2)&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; is set relative to the rotated position. If you move it down (to the right) it will be a positive number (towards the y Axis). If you move it up (to the left) it will be a negative number (away from the y Axis).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.append(&quot;text&quot;)
   .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)
   .attr(&quot;x&quot;, -(h/2))
   .attr(&quot;y&quot;, 15)
   .style(&quot;text-anchor&quot;, &quot;middle&quot;)
   .text(&quot;Population&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The barchart looks like this:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect5.jpg&quot; alt=&quot;D3 barchart with Axes and Labels&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code with the labels is now this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var w = 500;
var h = 300;
var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(d3.range(dataset.length))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, function(d) { return d.population; })])
               .range([h - padding, padding]);

    var xAxis = d3.axisBottom(xScale);
    var yAxis = d3.axisLeft(yScale);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, function(d, i) {
           return xScale(i);
       })
       .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
       .attr(&quot;fill&quot;, &quot;teal&quot;);

    // Add the x Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;x axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (h - padding) + &quot;)&quot;)
       .call(xAxis);

    // Label for x Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + (w/2) + &quot; ,&quot; + (h-10) + &quot;)&quot;)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .text(&quot;Year&quot;);

    // Add the y Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;y axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,0)&quot;)
       .call(yAxis);

    // Label for y Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)
       .attr(&quot;x&quot;, -(h/2))
       .attr(&quot;y&quot;, 15)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .text(&quot;Population&quot;);

    svg.append(&quot;text&quot;)
       .attr(&quot;x&quot;, w/2)
       .attr(&quot;y&quot;, padding)
       .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;16px&quot;)
       .text(&quot;Awesome Barchart&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-margins&quot;&gt;Adding Margins&lt;/h2&gt;

&lt;p&gt;The label for the y Axis is too close to the left. I had to plug a few different numbers in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.attr(&quot;y&quot;, 15)&lt;/code&gt; to make it fit.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Label for y Axis
svg.append(&quot;text&quot;)
   .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)
   .attr(&quot;x&quot;, -(h/2))
   .attr(&quot;y&quot;, 15)
   .style(&quot;text-anchor&quot;, &quot;middle&quot;)
   .text(&quot;Population&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can add the margins like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var margin = {top: 20, right: 20, bottom: 20, left: 20},
    w = 500 - margin.left - margin.right,
    h = 300 - margin.top - margin.bottom;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perhaps the labels are too big. They are the same size as the title. I added a font size for the labels, changed the position of the y label, and added the margins.&lt;/p&gt;

&lt;p&gt;The barchart looks like this:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect6.jpg&quot; alt=&quot;D3 barchart with Margins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code with the margins is now this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var margin = {top: 20, right: 20, bottom: 20, left: 20},
        w = 500 - margin.left - margin.right,
        h = 300 - margin.top - margin.bottom;

var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(d3.range(dataset.length))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, function(d) { return d.population; })])
               .range([h - padding, padding]);

    var xAxis = d3.axisBottom(xScale);
    var yAxis = d3.axisLeft(yScale);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, function(d, i) {
           return xScale(i);
       })
       .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
       .attr(&quot;fill&quot;, &quot;teal&quot;);

    // Add the x Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;x axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (h - padding) + &quot;)&quot;)
       .call(xAxis);

    // Label for x Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + (w/2) + &quot; ,&quot; + (h-10) + &quot;)&quot;)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;12px&quot;)
       .text(&quot;Year&quot;);

    // Add the y Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;y axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,0)&quot;)
       .call(yAxis);

    // Label for y Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)
       .attr(&quot;x&quot;, -(h/2))
       .attr(&quot;y&quot;, 10)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;12px&quot;)
       .text(&quot;Population&quot;);

    svg.append(&quot;text&quot;)
       .attr(&quot;x&quot;, w/2)
       .attr(&quot;y&quot;, padding)
       .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;16px&quot;)
       .text(&quot;Awesome Barchart&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;troubleshooting-the-year-on-the-x-axis&quot;&gt;Troubleshooting the Year on the x Axis&lt;/h2&gt;

&lt;p&gt;The barchart still doesn’t look correct. The ticks on the x Axis are supposed to be years and not integers starting at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect6.jpg&quot; alt=&quot;D3 barchart with Margins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I need to modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaleBand()&lt;/code&gt; so the domain maps to the years on the converted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; objects from the CSV file.&lt;/p&gt;

&lt;p&gt;It currently looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xScale = d3.scaleBand()
           .domain(d3.range(dataset.length))
           .rangeRound([padding, w])
           .paddingInner(0.1)
           .paddingOuter(0.1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I changed it to this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xScale = d3.scaleBand()
           .domain(dataset.map(d =&amp;gt; d.year.getFullYear()))
           .rangeRound([padding, w])
           .paddingInner(0.1)
           .paddingOuter(0.1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can test what this does on the console &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataset.map(d =&amp;gt; d.year.getFullYear())&lt;/code&gt; inside this section:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {
    console.log(dataset.map(d =&amp;gt; d.year.getFullYear()))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output should be:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array(4) [ 1950, 1951, 1955, 1959 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then modify implementing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xScale&lt;/code&gt; in this section. From this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return xScale(i)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.selectAll(&quot;rect&quot;)
   .data(dataset)
   .enter()
   .append(&quot;rect&quot;)
   .attr(&quot;x&quot;, function(d, i) {
       return xScale(i);
   })
   .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
   .attr(&quot;width&quot;, xScale.bandwidth())
   .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
   .attr(&quot;fill&quot;, &quot;teal&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modified to this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return xScale(d.year.getFullYear())&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.selectAll(&quot;rect&quot;)
   .data(dataset)
   .enter()
   .append(&quot;rect&quot;)
   .attr(&quot;x&quot;, function(d, i) {
       return xScale(d.year.getFullYear());
   })
   .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
   .attr(&quot;width&quot;, xScale.bandwidth())
   .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
   .attr(&quot;fill&quot;, &quot;teal&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The corrected barchart looks like this:&lt;/p&gt;

&lt;p&gt;(This is an image)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3-rect7.jpg&quot; alt=&quot;D3 barchart with corrected Year&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code with a bit more arrow functions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var margin = {top: 20, right: 20, bottom: 20, left: 20},
        w = 500 - margin.left - margin.right,
        h = 300 - margin.top - margin.bottom;

var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(dataset.map(d =&amp;gt; d.year.getFullYear()))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, d =&amp;gt; d.population)])
               .range([h - padding, padding]);

    var xAxis = d3.axisBottom(xScale);
    var yAxis = d3.axisLeft(yScale);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, d =&amp;gt; xScale(d.year.getFullYear()))
       .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
       .attr(&quot;fill&quot;, &quot;teal&quot;);

    // Add the x Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;x axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (h - padding) + &quot;)&quot;)
       .call(xAxis);

    // Label for x Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + (w/2) + &quot; ,&quot; + (h-10) + &quot;)&quot;)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;12px&quot;)
       .text(&quot;Year&quot;);

    // Add the y Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;y axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,0)&quot;)
       .call(yAxis);

    // Label for y Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)
       .attr(&quot;x&quot;, -(h/2))
       .attr(&quot;y&quot;, 10)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;12px&quot;)
       .text(&quot;Population&quot;);

    svg.append(&quot;text&quot;)
       .attr(&quot;x&quot;, w/2)
       .attr(&quot;y&quot;, padding)
       .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;16px&quot;)
       .text(&quot;Awesome Barchart&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;d3-mouse-event-handler&quot;&gt;D3 Mouse Event Handler&lt;/h2&gt;

&lt;p&gt;I want the barchart to change colors when you mouse over a bin to highlight what you are pointing at.&lt;/p&gt;

&lt;p&gt;Add two functions here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svg.selectAll(&quot;rect&quot;)
   .data(dataset)
   .enter()
   .append(&quot;rect&quot;)
   .attr(&quot;x&quot;, d =&amp;gt; xScale(d.year.getFullYear()))
   .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
   .attr(&quot;width&quot;, xScale.bandwidth())
   .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
   .attr(&quot;fill&quot;, &quot;teal&quot;)
   .on(&quot;mouseover&quot;, handleMouseOver)
   .on(&quot;mouseout&quot;, handleMouseOut);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add the functions to process each interaction at the end, before the closing of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.csv&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function handleMouseOver(d, i) {
    d3.select(this)
      .attr(&quot;fill&quot;, &quot;red&quot;);
}

function handleMouseOut(d, i) {
    d3.select(this)
      .attr(&quot;fill&quot;, &quot;teal&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The barchart with mouse event handler looks like this:&lt;/p&gt;

&lt;p&gt;(This is a D3 vis)&lt;/p&gt;

&lt;div id=&quot;d3-barchart-vis-final&quot;&gt;&lt;/div&gt;

&lt;p&gt;The final code is this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var margin = {top: 20, right: 20, bottom: 20, left: 20},
        w = 500 - margin.left - margin.right,
        h = 300 - margin.top - margin.bottom;

var barPadding = 3;
var padding = 40;
var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);

var parseTime = d3.timeParse(&quot;%Y&quot;);

var rowConverter = function(d) {
    return {
        year: parseTime(d.year),
        population: +d.population
    }
}

d3.csv(&quot;file.csv&quot;, rowConverter).then(function(dataset) {

    xScale = d3.scaleBand()
               .domain(dataset.map(d =&amp;gt; d.year.getFullYear()))
               .rangeRound([padding, w])
               .paddingInner(0.1)
               .paddingOuter(0.1);

    yScale = d3.scaleLinear()
               .domain([0, d3.max(dataset, d =&amp;gt; d.population)])
               .range([h - padding, padding]);

    var xAxis = d3.axisBottom(xScale);
    var yAxis = d3.axisLeft(yScale);

    svg.selectAll(&quot;rect&quot;)
       .data(dataset)
       .enter()
       .append(&quot;rect&quot;)
       .attr(&quot;x&quot;, d =&amp;gt; xScale(d.year.getFullYear()))
       .attr(&quot;y&quot;, d =&amp;gt; yScale(d.population))
       .attr(&quot;width&quot;, xScale.bandwidth())
       .attr(&quot;height&quot;, d =&amp;gt; h - padding - yScale(d.population))
       .attr(&quot;fill&quot;, &quot;teal&quot;)
       .on(&quot;mouseover&quot;, handleMouseOver)
       .on(&quot;mouseout&quot;, handleMouseOut);

    // Add the x Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;x axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(0,&quot; + (h - padding) + &quot;)&quot;)
       .call(xAxis);

    // Label for x Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + (w/2) + &quot; ,&quot; + (h-10) + &quot;)&quot;)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;12px&quot;)
       .text(&quot;Year&quot;);

    // Add the y Axis
    svg.append(&quot;g&quot;)
       .attr(&quot;class&quot;, &quot;y axis&quot;)
       .attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,0)&quot;)
       .call(yAxis);

    // Label for y Axis
    svg.append(&quot;text&quot;)
       .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)
       .attr(&quot;x&quot;, -(h/2))
       .attr(&quot;y&quot;, 10)
       .style(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;12px&quot;)
       .text(&quot;Population&quot;);

    svg.append(&quot;text&quot;)
       .attr(&quot;x&quot;, w/2)
       .attr(&quot;y&quot;, padding)
       .attr(&quot;text-anchor&quot;, &quot;middle&quot;)
       .style(&quot;font-size&quot;, &quot;16px&quot;)
       .text(&quot;Awesome Barchart&quot;);

    function handleMouseOver(d, i) {
        d3.select(this)
          .attr(&quot;fill&quot;, &quot;red&quot;);
    }

    function handleMouseOut(d, i) {
        d3.select(this)
          .attr(&quot;fill&quot;, &quot;teal&quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;embedding-d3-visualization-on-a-blog-post&quot;&gt;Embedding D3 Visualization on a blog post&lt;/h2&gt;

&lt;p&gt;You can also add a D3 visualization to a blog post. My blog follows this directory structure:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;assets/
  csv/
    file.csv
  js/
    d3.min.js
    d3-barchart-vis.js
_posts/
  this-blog-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;div&lt;/code&gt; with a descriptive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; to the section of your blog post where you want to add your visualization:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;d3-barchart-vis&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3-barchart-vis.js&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; selects this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div id&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var svg = d3.select(&quot;#d3-barchart-vis&quot;)
            .append(&quot;svg&quot;)
            .attr(&quot;preserveAspectRatio&quot;, &quot;xMinYMin meet&quot;)
            .attr(&quot;viewBox&quot;, &quot;0 0 &quot; + w + &quot; &quot; + h);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csv&lt;/code&gt; file is called like this so it points at the correct directory:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d3.csv(&quot;../assets/csv/file.csv&quot;, rowConverter).then(function(dataset) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the end of the blog post, after all content, add a reference to the JavaScript files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/d3.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/d3-barchart-vis.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/d3.min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/d3-barchart-vis.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/d3-barchart-vis-final.js&quot;&gt;&lt;/script&gt;</content><author><name>Tom Ordonez</name></author><category term="data analytics" /><category term="data visualization" /><category term="D3" /><category term="javascript" /><summary type="html">This is a detailed D3 tutorial for data visualization. Setup D3, build a barchart, and responsive D3. Updated June 2020.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/2.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Wrangling with OpenRefine on Linux</title><link href="https://www.tomordonez.com/data-wrangling-openrefine-linux/" rel="alternate" type="text/html" title="Data Wrangling with OpenRefine on Linux" /><published>2020-02-01T00:00:00-05:00</published><updated>2020-02-01T00:00:00-05:00</updated><id>https://www.tomordonez.com/data-wrangling-openrefine-linux</id><content type="html" xml:base="https://www.tomordonez.com/data-wrangling-openrefine-linux/">&lt;p&gt;OpenRefine is an open source desktop application for data wrangling.&lt;/p&gt;

&lt;p&gt;Source:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openrefine.org/download.html&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenRefine/OpenRefine/wiki/Installation-Instructions&quot;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openrefine-on-windows&quot;&gt;OpenRefine on Windows&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Download the file&lt;/li&gt;
  &lt;li&gt;Unzip and run the executable&lt;/li&gt;
  &lt;li&gt;To stop the web server, on the command line do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openrefine-on-linux&quot;&gt;OpenRefine on Linux&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Download the tar file. Size is about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100 MB&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tar the file. For example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar xzf openrefine-linux-3.2.tar.gz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Open the directory: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd openrefine-3.2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./refine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Shut down the webserver with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl C&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Upon start the terminal shows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARNING: OpenRefine is not tested and not recommended for use with Java versions greater than 12.
You have 7653M of free memory.
Your current configuration is set to use 1400M of memory.
OpenRefine can run better when given more memory. Read our FAQ on how to allocate more memory here:
https://github.com/OpenRefine/OpenRefine/wiki/FAQ:-Allocate-More-Memory
Starting OpenRefine at 'http://127.0.0.1:3333/'

10:40:59.487 [refine_server] Starting Server bound to '127.0.0.1:3333' (0ms)
10:40:59.488 [refine_server] refine.memory size: 1400M JVM Max heap: 1468006400 (1ms)
10:40:59.499 [refine_server] Initializing context: '/' from '/home/tom/Documents/projects/openrefine-3.2/webapp' (11ms)
10:41:01.007 [refine_server] Creating new workspace directory /home/tom/.local/share/openrefine (1508ms)
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/tom/Documents/projects/openrefine-3.2/server/target/lib/slf4j-log4j12-1.7.18.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/tom/Documents/projects/openrefine-3.2/webapp/WEB-INF/lib/slf4j-log4j12-1.7.18.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
10:41:01.390 [refine] Starting OpenRefine 3.2 [55c921b]... (383ms)
10:41:01.390 [refine] initializing FileProjectManager with dir (0ms)
10:41:01.390 [refine] /home/tom/.local/share/openrefine (0ms)
10:41:01.417 [FileProjectManager] Failed to load workspace from any attempted alternatives. (27ms)
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.python.core.PySystemState (file:/home/tom/Documents/projects/openrefine-3.2/webapp/extensions/jython/module/MOD-INF/lib/jython-standalone-2.7.1.jar) to method java.io.Console.encoding()
WARNING: Please consider reporting this to the maintainers of org.python.core.PySystemState
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
Fontconfig warning: &quot;/usr/share/fontconfig/conf.avail/05-reset-dirs-sample.conf&quot;, line 6: unknown element &quot;reset-dirs&quot;
Opening in existing browser session.
10:41:19.486 [refine] POST /command/core/load-language (18069ms)
10:41:19.578 [refine] GET /command/core/get-preference (92ms)
10:41:19.624 [refine] POST /command/core/load-language (46ms)
10:41:19.641 [refine] POST /command/core/load-language (17ms)
10:41:19.833 [refine] POST /command/core/get-importing-configuration (192ms)
10:41:19.885 [refine] GET /command/core/get-all-project-tags (52ms)
10:41:19.975 [refine] GET /command/core/get-all-project-metadata (90ms)
10:41:20.077 [refine] GET /command/core/get-languages (102ms)
10:41:20.342 [refine] GET /command/core/get-version (265ms)
10:41:20.566 [refine] GET /command/database/saved-connection (224ms)
10:41:20.632 [refine] POST /command/core/set-preference (66ms)
10:41:20.664 [refine] POST /command/core/set-preference (32ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the browser OpenRefine opens on:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:3333/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;uploading-data-to-openrefine&quot;&gt;Uploading data to OpenRefine&lt;/h2&gt;

&lt;p&gt;Get data from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This computer&lt;/li&gt;
  &lt;li&gt;Web Addresses&lt;/li&gt;
  &lt;li&gt;Clipboard&lt;/li&gt;
  &lt;li&gt;Database&lt;/li&gt;
  &lt;li&gt;Google data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting data from your computer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This creates a preview with some options.&lt;/li&gt;
  &lt;li&gt;On the top right corner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Project&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;text-facet-to-group-data&quot;&gt;Text Facet to Group data&lt;/h2&gt;

&lt;p&gt;Go to a column drop down.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Facet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text Facet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the left side, it groups together identical cells for that column, including the number of cells for each group.&lt;/p&gt;

&lt;p&gt;As seen on &lt;a href=&quot;https://www.youtube.com/watch?time_continue=13&amp;amp;v=B70J_H_zAWM&amp;amp;feature=emb_title&quot;&gt;this&lt;/a&gt; Youtube video. Selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text Facet&lt;/code&gt; for one of the columns to review all the data related &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, selecting one of the groups that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; and a count of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;512&lt;/code&gt;, filters the data on the right view.&lt;/p&gt;

&lt;p&gt;The next group is also called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; with a count of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt; for that group to see why. It has an empty trailing whitespace at the end of the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP_&lt;/code&gt;. Remove the blank space and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;. The groups then will merge. Now the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; group has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;513&lt;/code&gt; rows and a total of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;814&lt;/code&gt; groups.&lt;/p&gt;

&lt;h2 id=&quot;remove-leading-and-trailing-whitespace&quot;&gt;Remove leading and trailing whitespace&lt;/h2&gt;

&lt;p&gt;Go to a column drop down.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit cells&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Common transforms&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trim leading and trailing whitespace&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the same video. After removing leading and trailing whitespace. The group count changed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;814&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;785&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The column is renamed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firm Fixed Price&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sort-the-facets&quot;&gt;Sort the Facets&lt;/h2&gt;

&lt;p&gt;On the left view, sort the facets by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; or by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; to see the largest groups.&lt;/p&gt;

&lt;p&gt;The video shows that there are all sorts of combinations of the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firm Fixed Price&lt;/code&gt; which can be changed to group all the data better.&lt;/p&gt;

&lt;h2 id=&quot;cluster-facets&quot;&gt;Cluster Facets&lt;/h2&gt;

&lt;p&gt;After sorting by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;, next to it there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; button. This feature tries to group the groups based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keying Functions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keying Functions&lt;/code&gt; show a drop down with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fingerprint&lt;/li&gt;
  &lt;li&gt;ngram-fingerprint&lt;/li&gt;
  &lt;li&gt;double-metaphone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select the groups that you want to merge. There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkbox &lt;/code&gt;for each group. Next to the checkbox there is a field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New Cell Value&lt;/code&gt; if you want to change the name of the cell.&lt;/p&gt;

&lt;p&gt;If you feel wild, you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Select All&lt;/code&gt; on the bottom left and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Merge Selected &amp;amp; Close&lt;/code&gt; on the bottom right.&lt;/p&gt;

&lt;h2 id=&quot;correcting-mistakes&quot;&gt;Correcting Mistakes&lt;/h2&gt;

&lt;p&gt;On the left view, there is a tab &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Undo/Redo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then select one of the rows that made a previous change. Then click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-a-numeric-facet&quot;&gt;Create a Numeric Facet&lt;/h2&gt;

&lt;p&gt;On the video, one of the columns says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Total value&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Facet&lt;/li&gt;
  &lt;li&gt;Numeric Facet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the left view, it shows a range of the values, going from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20,000,000.00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It also shows a mini visualization of the distribution. In this case the distribution only shows a rectangle on the leftmost side.&lt;/p&gt;

&lt;p&gt;On the top right of this visualization, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A popup window says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit Facet's Expression based on Column Total value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a field called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expression&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.log()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It shows a preview of the change…then click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It now shows a normal distribution. It has some options below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Numeric &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5173&lt;/code&gt; (checked)&lt;/li&gt;
  &lt;li&gt;Non-numeric &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; (not checked)&lt;/li&gt;
  &lt;li&gt;Blank &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; (not checked)&lt;/li&gt;
  &lt;li&gt;Error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;27&lt;/code&gt; (checked)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; rows. Which shows all the values as zero.&lt;/p&gt;

&lt;p&gt;When calculating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.log()&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, the result is negative infinity. In the video she asks, why is there a zero value for total value?&lt;/p&gt;

&lt;p&gt;You can drag the margins of the distribution visualization to preview data on the right view.&lt;/p&gt;

&lt;h2 id=&quot;getting-data-from-a-wikipedia-list&quot;&gt;Getting data from a Wikipedia list&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://www.youtube.com/watch?v=cO8NVCs_Ba0&amp;amp;feature=emb_title&quot;&gt;video&lt;/a&gt; blew my mind. I didn’t know you could do this:&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://en.wikipedia.org/wiki/Filmfare_Award_for_Best_Actress&quot;&gt;this&lt;/a&gt; page that shows awards about movies.&lt;/p&gt;

&lt;p&gt;Scroll down to the section that says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Winners and nominees&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt; to the right of this title.&lt;/p&gt;

&lt;p&gt;It now shows some code as seen here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;==Winners and nominees==

{| class=&quot;wikitable&quot;
|+ Table key
|-
!scope=&quot;row&quot; style=&quot;text-align:center;&quot; style=&quot;background:#FAEB86; height:20px; width:20px&quot;
| Indicates the winner
|}
===1950s===

{| class=&quot;wikitable sortable&quot; rowspan=2 style=&quot;text-align: left;&quot; border=&quot;2&quot; cellpadding=&quot;5&quot;
|-
!scope=&quot;col&quot; style=&quot;width:3%; text-align:center;&quot;| Year
!scope=&quot;col&quot; style=&quot;width:3%;text-align:center;&quot;| Photos of winners
!scope=&quot;col&quot; style=&quot;width:15%;text-align:center;&quot;| Actor
!scope=&quot;col&quot; style=&quot;width:15%;text-align:center;&quot;| Role(s)
!scope=&quot;col&quot; style=&quot;width:15%;text-align:center;&quot;| Film
|-
! scope=&quot;row&quot; rowspan=2 style=&quot;text-align:center&quot; | 1954 &amp;lt;br /&amp;gt;&amp;lt;small&amp;gt;[[1st Filmfare Awards|(1st)]] &amp;lt;/small&amp;gt;
|rowspan=2 style=&quot;text-align:center&quot;|
| style=&quot;background:#FAEB86;&quot; |
| style=&quot;background:#FAEB86;&quot; |
| style=&quot;background:#FAEB86;&quot; | '''''[[Baiju Bawra (film)|Baiju Bawra]]'''''
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy all the code that appears on that window and save it into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Import this file into OpenRefine.&lt;/p&gt;

&lt;p&gt;For the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;When parsing text files&lt;/code&gt; uncheck &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Split into columns&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Header lines&lt;/code&gt; change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Project&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cleaning-wikipedia-data-code&quot;&gt;Cleaning Wikipedia data code&lt;/h2&gt;

&lt;p&gt;Remove the rows that show years such as this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;===1950s===
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the column drop down, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the left view that has a field titled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column&lt;/code&gt;. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;===&lt;/code&gt;, which filters the table on the right to all rows that contain these characters.&lt;/p&gt;

&lt;p&gt;On this filtered view go to drop down:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit rows&lt;/li&gt;
  &lt;li&gt;Remove all matching rows&lt;/li&gt;
  &lt;li&gt;Then clear the text filter on the left view (close the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column&lt;/code&gt; window)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the video, she explains the strategy for using OpenRefine as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Isolating all the rows you want to change using filters and facets&lt;/li&gt;
  &lt;li&gt;Change them all at the same time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove all the characters that describe a bolded text. In the code, bold text is enclosed within three single quotes such as this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'''content&amp;lt;article class=&quot;post h-entry&quot; itemscope itemtype=&quot;http://schema.org/BlogPosting&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;header class=&quot;post-header&quot;&gt;
    &lt;h1 class=&quot;post-title p-name&quot; itemprop=&quot;name headline&quot;&gt;Python Jupyter Notebook in Linux&lt;/h1&gt;
    &lt;p class=&quot;post-meta&quot;&gt;
      &lt;time class=&quot;dt-published&quot; datetime=&quot;2020-01-14T00:00:00-05:00&quot; itemprop=&quot;datePublished&quot;&gt;Jan 14, 2020
      &lt;/time&gt;• &lt;span&gt;

&lt;/span&gt;
    &lt;/p&gt;
  &lt;/header&gt;

&lt;div class=&quot;post-content e-content&quot; itemprop=&quot;articleBody&quot;&gt;
    &lt;p&gt;Update conda&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ conda update conda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yml&lt;/code&gt; file, use a name and dependencies. Example:&lt;/p&gt;

&lt;p&gt;File: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env_py_3.7.6.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Contents of this file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: awesome_name
dependencies:
- python=3.7.6
- jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the environment using this file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ conda env create --file env_py_3.7.6.yml
$ conda activate awesome_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check Python version&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ which python
$ python -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run Jupyter Notebook:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this doesn’t work. Try it like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jupyter notebook --ip=127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cell-timer-for-jupyter-notebook&quot;&gt;Cell timer for Jupyter notebook&lt;/h2&gt;

&lt;p&gt;As seen &lt;a href=&quot;https://stackoverflow.com/questions/32565829/simple-way-to-measure-cell-execution-time-in-ipython-notebook/50384459#50384459&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install jupyter_contrib_nbextensions
$ jupyter contrib nbextension install --user
$ jupyter nbextension enable execute_time/ExecuteTime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

  &lt;/div&gt;

&lt;div&gt;
    &lt;h3&gt;Related Posts&lt;/h3&gt;
    &lt;ul&gt;
    
      &lt;li&gt;&lt;a href=&quot;/python-files-os-module/&quot;&gt;Python, Files, and OS Module&lt;/a&gt;&lt;/li&gt;
    
      &lt;li&gt;&lt;a href=&quot;/install-miniconda-linux/&quot;&gt;Install Miniconda on Linux&lt;/a&gt;&lt;/li&gt;
    
      &lt;li&gt;&lt;a href=&quot;/make-static-website-python-github-pages/&quot;&gt;Make a Static Website with Python and Github Pages&lt;/a&gt;&lt;/li&gt;
    
      &lt;li&gt;&lt;a href=&quot;/web-scraping-with-python/&quot;&gt;Web Scraping with Python&lt;/a&gt;&lt;/li&gt;
    
      &lt;li&gt;&lt;a href=&quot;/python-unit-testing-tutorial/&quot;&gt;Python Unit Testing Tutorial&lt;/a&gt;&lt;/li&gt;
    
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    var disqus_config = function () {
      this.page.url = 'https://www.tomordonez.com/python-jupyter-notebook-linux/';
      this.page.identifier = 'https://www.tomordonez.com/python-jupyter-notebook-linux/';
    };

    (function() {
      var d = document, s = d.createElement('script');

      s.src = 'https://tomordonez-com.disqus.com/embed.js';

      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
    })();
  &lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot; rel=&quot;nofollow&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;a class=&quot;u-url&quot; href=&quot;/python-jupyter-notebook-linux/&quot; hidden=&quot;&quot;&gt;&lt;/a&gt;
&amp;lt;/article&amp;gt;
highlighter_prefix
highlighter_suffix
jekyllJekyll::Drops::JekyllDroplayout{“layout”=&amp;gt;”default”}pageOpenRefine is an open source desktop application for data wrangling.&lt;/p&gt;

&lt;p&gt;Source:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openrefine.org/download.html&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenRefine/OpenRefine/wiki/Installation-Instructions&quot;&gt;Install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openrefine-on-windows-1&quot;&gt;OpenRefine on Windows&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Download the file&lt;/li&gt;
  &lt;li&gt;Unzip and run the executable&lt;/li&gt;
  &lt;li&gt;To stop the web server, on the command line do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openrefine-on-linux-1&quot;&gt;OpenRefine on Linux&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Download the tar file. Size is about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100 MB&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tar the file. For example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar xzf openrefine-linux-3.2.tar.gz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Open the directory: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd openrefine-3.2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./refine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Shut down the webserver with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl C&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Upon start the terminal shows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARNING: OpenRefine is not tested and not recommended for use with Java versions greater than 12.
You have 7653M of free memory.
Your current configuration is set to use 1400M of memory.
OpenRefine can run better when given more memory. Read our FAQ on how to allocate more memory here:
https://github.com/OpenRefine/OpenRefine/wiki/FAQ:-Allocate-More-Memory
Starting OpenRefine at 'http://127.0.0.1:3333/'

10:40:59.487 [refine_server] Starting Server bound to '127.0.0.1:3333' (0ms)
10:40:59.488 [refine_server] refine.memory size: 1400M JVM Max heap: 1468006400 (1ms)
10:40:59.499 [refine_server] Initializing context: '/' from '/home/tom/Documents/projects/openrefine-3.2/webapp' (11ms)
10:41:01.007 [refine_server] Creating new workspace directory /home/tom/.local/share/openrefine (1508ms)
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/tom/Documents/projects/openrefine-3.2/server/target/lib/slf4j-log4j12-1.7.18.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/tom/Documents/projects/openrefine-3.2/webapp/WEB-INF/lib/slf4j-log4j12-1.7.18.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
10:41:01.390 [refine] Starting OpenRefine 3.2 [55c921b]... (383ms)
10:41:01.390 [refine] initializing FileProjectManager with dir (0ms)
10:41:01.390 [refine] /home/tom/.local/share/openrefine (0ms)
10:41:01.417 [FileProjectManager] Failed to load workspace from any attempted alternatives. (27ms)
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.python.core.PySystemState (file:/home/tom/Documents/projects/openrefine-3.2/webapp/extensions/jython/module/MOD-INF/lib/jython-standalone-2.7.1.jar) to method java.io.Console.encoding()
WARNING: Please consider reporting this to the maintainers of org.python.core.PySystemState
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
Fontconfig warning: &quot;/usr/share/fontconfig/conf.avail/05-reset-dirs-sample.conf&quot;, line 6: unknown element &quot;reset-dirs&quot;
Opening in existing browser session.
10:41:19.486 [refine] POST /command/core/load-language (18069ms)
10:41:19.578 [refine] GET /command/core/get-preference (92ms)
10:41:19.624 [refine] POST /command/core/load-language (46ms)
10:41:19.641 [refine] POST /command/core/load-language (17ms)
10:41:19.833 [refine] POST /command/core/get-importing-configuration (192ms)
10:41:19.885 [refine] GET /command/core/get-all-project-tags (52ms)
10:41:19.975 [refine] GET /command/core/get-all-project-metadata (90ms)
10:41:20.077 [refine] GET /command/core/get-languages (102ms)
10:41:20.342 [refine] GET /command/core/get-version (265ms)
10:41:20.566 [refine] GET /command/database/saved-connection (224ms)
10:41:20.632 [refine] POST /command/core/set-preference (66ms)
10:41:20.664 [refine] POST /command/core/set-preference (32ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the browser OpenRefine opens on:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:3333/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;uploading-data-to-openrefine-1&quot;&gt;Uploading data to OpenRefine&lt;/h2&gt;

&lt;p&gt;Get data from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This computer&lt;/li&gt;
  &lt;li&gt;Web Addresses&lt;/li&gt;
  &lt;li&gt;Clipboard&lt;/li&gt;
  &lt;li&gt;Database&lt;/li&gt;
  &lt;li&gt;Google data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting data from your computer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This creates a preview with some options.&lt;/li&gt;
  &lt;li&gt;On the top right corner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Project&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;text-facet-to-group-data-1&quot;&gt;Text Facet to Group data&lt;/h2&gt;

&lt;p&gt;Go to a column drop down.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Facet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text Facet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the left side, it groups together identical cells for that column, including the number of cells for each group.&lt;/p&gt;

&lt;p&gt;As seen on &lt;a href=&quot;https://www.youtube.com/watch?time_continue=13&amp;amp;v=B70J_H_zAWM&amp;amp;feature=emb_title&quot;&gt;this&lt;/a&gt; Youtube video. Selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text Facet&lt;/code&gt; for one of the columns to review all the data related &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, selecting one of the groups that has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; and a count of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;512&lt;/code&gt;, filters the data on the right view.&lt;/p&gt;

&lt;p&gt;The next group is also called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; with a count of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt; for that group to see why. It has an empty trailing whitespace at the end of the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP_&lt;/code&gt;. Remove the blank space and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;. The groups then will merge. Now the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; group has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;513&lt;/code&gt; rows and a total of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;814&lt;/code&gt; groups.&lt;/p&gt;

&lt;h2 id=&quot;remove-leading-and-trailing-whitespace-1&quot;&gt;Remove leading and trailing whitespace&lt;/h2&gt;

&lt;p&gt;Go to a column drop down.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit cells&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Common transforms&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trim leading and trailing whitespace&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the same video. After removing leading and trailing whitespace. The group count changed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;814&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;785&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The column is renamed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FFP&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firm Fixed Price&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sort-the-facets-1&quot;&gt;Sort the Facets&lt;/h2&gt;

&lt;p&gt;On the left view, sort the facets by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; or by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; to see the largest groups.&lt;/p&gt;

&lt;p&gt;The video shows that there are all sorts of combinations of the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firm Fixed Price&lt;/code&gt; which can be changed to group all the data better.&lt;/p&gt;

&lt;h2 id=&quot;cluster-facets-1&quot;&gt;Cluster Facets&lt;/h2&gt;

&lt;p&gt;After sorting by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;, next to it there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cluster&lt;/code&gt; button. This feature tries to group the groups based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keying Functions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Keying Functions&lt;/code&gt; show a drop down with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fingerprint&lt;/li&gt;
  &lt;li&gt;ngram-fingerprint&lt;/li&gt;
  &lt;li&gt;double-metaphone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select the groups that you want to merge. There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkbox &lt;/code&gt;for each group. Next to the checkbox there is a field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New Cell Value&lt;/code&gt; if you want to change the name of the cell.&lt;/p&gt;

&lt;p&gt;If you feel wild, you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Select All&lt;/code&gt; on the bottom left and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Merge Selected &amp;amp; Close&lt;/code&gt; on the bottom right.&lt;/p&gt;

&lt;h2 id=&quot;correcting-mistakes-1&quot;&gt;Correcting Mistakes&lt;/h2&gt;

&lt;p&gt;On the left view, there is a tab &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Undo/Redo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then select one of the rows that made a previous change. Then click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;create-a-numeric-facet-1&quot;&gt;Create a Numeric Facet&lt;/h2&gt;

&lt;p&gt;On the video, one of the columns says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Total value&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Facet&lt;/li&gt;
  &lt;li&gt;Numeric Facet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the left view, it shows a range of the values, going from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20,000,000.00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It also shows a mini visualization of the distribution. In this case the distribution only shows a rectangle on the leftmost side.&lt;/p&gt;

&lt;p&gt;On the top right of this visualization, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A popup window says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit Facet's Expression based on Column Total value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a field called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expression&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.log()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It shows a preview of the change…then click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It now shows a normal distribution. It has some options below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Numeric &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5173&lt;/code&gt; (checked)&lt;/li&gt;
  &lt;li&gt;Non-numeric &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; (not checked)&lt;/li&gt;
  &lt;li&gt;Blank &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; (not checked)&lt;/li&gt;
  &lt;li&gt;Error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;27&lt;/code&gt; (checked)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; rows. Which shows all the values as zero.&lt;/p&gt;

&lt;p&gt;When calculating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.log()&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, the result is negative infinity. In the video she asks, why is there a zero value for total value?&lt;/p&gt;

&lt;p&gt;You can drag the margins of the distribution visualization to preview data on the right view.&lt;/p&gt;

&lt;h2 id=&quot;getting-data-from-a-wikipedia-list-1&quot;&gt;Getting data from a Wikipedia list&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://www.youtube.com/watch?v=cO8NVCs_Ba0&amp;amp;feature=emb_title&quot;&gt;video&lt;/a&gt; blew my mind. I didn’t know you could do this:&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://en.wikipedia.org/wiki/Filmfare_Award_for_Best_Actress&quot;&gt;this&lt;/a&gt; page that shows awards about movies.&lt;/p&gt;

&lt;p&gt;Scroll down to the section that says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Winners and nominees&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edit&lt;/code&gt; to the right of this title.&lt;/p&gt;

&lt;p&gt;It now shows some code as seen here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;==Winners and nominees==

{| class=&quot;wikitable&quot;
|+ Table key
|-
!scope=&quot;row&quot; style=&quot;text-align:center;&quot; style=&quot;background:#FAEB86; height:20px; width:20px&quot;
| Indicates the winner
|}
===1950s===

{| class=&quot;wikitable sortable&quot; rowspan=2 style=&quot;text-align: left;&quot; border=&quot;2&quot; cellpadding=&quot;5&quot;
|-
!scope=&quot;col&quot; style=&quot;width:3%; text-align:center;&quot;| Year
!scope=&quot;col&quot; style=&quot;width:3%;text-align:center;&quot;| Photos of winners
!scope=&quot;col&quot; style=&quot;width:15%;text-align:center;&quot;| Actor
!scope=&quot;col&quot; style=&quot;width:15%;text-align:center;&quot;| Role(s)
!scope=&quot;col&quot; style=&quot;width:15%;text-align:center;&quot;| Film
|-
! scope=&quot;row&quot; rowspan=2 style=&quot;text-align:center&quot; | 1954 &amp;lt;br /&amp;gt;&amp;lt;small&amp;gt;[[1st Filmfare Awards|(1st)]] &amp;lt;/small&amp;gt;
|rowspan=2 style=&quot;text-align:center&quot;|
| style=&quot;background:#FAEB86;&quot; |
| style=&quot;background:#FAEB86;&quot; |
| style=&quot;background:#FAEB86;&quot; | '''''[[Baiju Bawra (film)|Baiju Bawra]]'''''
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy all the code that appears on that window and save it into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Import this file into OpenRefine.&lt;/p&gt;

&lt;p&gt;For the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;When parsing text files&lt;/code&gt; uncheck &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Split into columns&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Header lines&lt;/code&gt; change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Project&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cleaning-wikipedia-data-code-1&quot;&gt;Cleaning Wikipedia data code&lt;/h2&gt;

&lt;p&gt;Remove the rows that show years such as this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;===1950s===
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the column drop down, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the left view that has a field titled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column&lt;/code&gt;. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;===&lt;/code&gt;, which filters the table on the right to all rows that contain these characters.&lt;/p&gt;

&lt;p&gt;On this filtered view go to drop down:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit rows&lt;/li&gt;
  &lt;li&gt;Remove all matching rows&lt;/li&gt;
  &lt;li&gt;Then clear the text filter on the left view (close the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column&lt;/code&gt; window)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the video, she explains the strategy for using OpenRefine as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Isolating all the rows you want to change using filters and facets&lt;/li&gt;
  &lt;li&gt;Change them all at the same time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove all the characters that describe a bolded text. In the code, bold text is enclosed within three single quotes such as this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'''{{sort|Gauri|Gauri}}'''
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit cells&lt;/li&gt;
  &lt;li&gt;Transform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It opens a popup window &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Custom text transform on column Column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expression&lt;/code&gt; field, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.replace(&quot;'''&quot;, &quot;&quot;)&lt;/code&gt;, which means to replace three single quotes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;'''&quot;&lt;/code&gt; with empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;. Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; to apply.&lt;/p&gt;

&lt;h2 id=&quot;create-another-column-from-existing-column&quot;&gt;Create another column from existing column&lt;/h2&gt;

&lt;p&gt;The current code is a bit different than the one shown on the video.&lt;/p&gt;

&lt;p&gt;On the video, it shows that each winner is on a bullet point, and the nominees on an indented sub bullet point.&lt;/p&gt;

&lt;p&gt;On the code, the idented rows start with two stars &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a column that describes if the row corresponds to a winner or a nominee.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is Winner&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not(value.startsWith(&quot;**&quot;))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the new column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is Winner&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Facet&lt;/li&gt;
  &lt;li&gt;Text facet&lt;/li&gt;
  &lt;li&gt;On the left view, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; to view the winner rows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extract the years&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Year&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value[1,5]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove the years from the original column&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column drop down&lt;/li&gt;
  &lt;li&gt;Edit cells&lt;/li&gt;
  &lt;li&gt;Transform&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.substring(6)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This means send to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; the substring starting from character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is Winner&lt;/code&gt; facet to view the new columns created with respective rows.&lt;/p&gt;

&lt;p&gt;The nominees are missing the year, however they appear right after a winner of the same year.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Year (column) drop down&lt;/li&gt;
  &lt;li&gt;Edit cells&lt;/li&gt;
  &lt;li&gt;Fill down&lt;/li&gt;
  &lt;li&gt;This copies each year into the blank cells below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Separate the first column into the columns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actress&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Film&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Split into several columns&lt;/li&gt;
  &lt;li&gt;By separator: ` - ` (space dash space)&lt;/li&gt;
  &lt;li&gt;Split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; columns at most&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column 2&lt;/code&gt; is created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Separate the data from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column 2&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column2 drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Split into several columns&lt;/li&gt;
  &lt;li&gt;Separator ` as ` (space as space)&lt;/li&gt;
  &lt;li&gt;Split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; columns at most&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then rename the columns. Drop down, edit column, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rename this column&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column 1: Actress&lt;/li&gt;
  &lt;li&gt;Column 2: Film&lt;/li&gt;
  &lt;li&gt;Column 3: Character&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Export the data into Wiki syntax&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Top right&lt;/li&gt;
  &lt;li&gt;Export&lt;/li&gt;
  &lt;li&gt;The default is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Follow the video to see how to setup the Wiki syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extract-operations&quot;&gt;Extract operations&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Undo/Redo&lt;/code&gt; allows the extract the operations done to a dataset.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Popup window &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract Operation History&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Operations selected on the left are encoded as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; (preview on the right)&lt;/li&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; code&lt;/li&gt;
  &lt;li&gt;Switch back to another project you want to clean&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Undo/Redo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Paste the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; code on that window&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Perform Operations&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-latitude-and-longitude-for-address-rows-from-an-external-source&quot;&gt;Get latitude and longitude for address rows from an external source&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://www.youtube.com/watch?v=5tsyz3ibYzk&amp;amp;feature=emb_title&quot;&gt;video&lt;/a&gt; shows a dataset with a column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Headquarter&lt;/code&gt; that has the addresses for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Company&lt;/code&gt; column.&lt;/p&gt;

&lt;p&gt;She wants to get the latitude and longitude for each address using the API from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nominatim.openstreetmap.org&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Headquarters column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column by fetching URLs&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'http://nominatim.openstreetmap.org/search?format=json&amp;amp;email=somemail@gmail.com%app=google-refine&amp;amp;q=' + escape(value, 'url')&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Throttle delay: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1500&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then it takes some time to load the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; appears on the right view with values for each row.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;json column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with(value.parseJson()[0], pair, pair.lat + ',' + pair.lon)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat/lon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;translate-rows-from-an-external-source&quot;&gt;Translate rows from an external source&lt;/h2&gt;

&lt;p&gt;If the dataset has rows in different languages in a column called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;. Follow the API requirements to construct the URL.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column by fetching URLs&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;http://ajax.googleapis.com/ajax/services/language/detect?...&quot; + escape(value.substring(0, 128), &quot;url&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Throttle delay: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; is loaded&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;json column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.parseJson().responseData.language&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reconcile-data-with-external-sources&quot;&gt;Reconcile data with external sources&lt;/h2&gt;

&lt;p&gt;The video also shows a way to reconcile your data with external sources.&lt;/p&gt;

&lt;p&gt;This dataset has two columns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;film&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rating&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;film column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Reconcile&lt;/li&gt;
  &lt;li&gt;Start reconciling&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Freebase&lt;/code&gt; reconciliation service&lt;/li&gt;
  &lt;li&gt;It loads a list of types&lt;/li&gt;
  &lt;li&gt;Select the type that matches this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;film&lt;/code&gt; column&lt;/li&gt;
  &lt;li&gt;Select the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Film&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start Reconciling&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fetch more data from Freebase&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;film column&lt;/li&gt;
  &lt;li&gt;drop down&lt;/li&gt;
  &lt;li&gt;edit column&lt;/li&gt;
  &lt;li&gt;Add columns from Freebase&lt;/li&gt;
  &lt;li&gt;Options appear for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Suggested Properties&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Directed by&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Netflix ID&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openrefine-docs&quot;&gt;OpenRefine Docs&lt;/h2&gt;

&lt;p&gt;Please follow these resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenRefine/OpenRefine/wiki&quot;&gt;OpenRefine wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenRefine/OpenRefine/wiki/Screencasts&quot;&gt;Screencasts&lt;/a&gt;paginatorsiteJekyll::Drops::SiteDrop’’’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit cells&lt;/li&gt;
  &lt;li&gt;Transform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It opens a popup window &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Custom text transform on column Column&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expression&lt;/code&gt; field, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.replace(&quot;'''&quot;, &quot;&quot;)&lt;/code&gt;, which means to replace three single quotes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;'''&quot;&lt;/code&gt; with empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;. Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; to apply.&lt;/p&gt;

&lt;h2 id=&quot;create-another-column-from-existing-column-1&quot;&gt;Create another column from existing column&lt;/h2&gt;

&lt;p&gt;The current code is a bit different than the one shown on the video.&lt;/p&gt;

&lt;p&gt;On the video, it shows that each winner is on a bullet point, and the nominees on an indented sub bullet point.&lt;/p&gt;

&lt;p&gt;On the code, the idented rows start with two stars &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a column that describes if the row corresponds to a winner or a nominee.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is Winner&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not(value.startsWith(&quot;**&quot;))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the new column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is Winner&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Facet&lt;/li&gt;
  &lt;li&gt;Text facet&lt;/li&gt;
  &lt;li&gt;On the left view, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; to view the winner rows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extract the years&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Year&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value[1,5]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove the years from the original column&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column drop down&lt;/li&gt;
  &lt;li&gt;Edit cells&lt;/li&gt;
  &lt;li&gt;Transform&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.substring(6)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This means send to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; the substring starting from character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is Winner&lt;/code&gt; facet to view the new columns created with respective rows.&lt;/p&gt;

&lt;p&gt;The nominees are missing the year, however they appear right after a winner of the same year.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Year (column) drop down&lt;/li&gt;
  &lt;li&gt;Edit cells&lt;/li&gt;
  &lt;li&gt;Fill down&lt;/li&gt;
  &lt;li&gt;This copies each year into the blank cells below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Separate the first column into the columns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actress&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Film&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Split into several columns&lt;/li&gt;
  &lt;li&gt;By separator: ` - ` (space dash space)&lt;/li&gt;
  &lt;li&gt;Split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; columns at most&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column 2&lt;/code&gt; is created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Separate the data from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Column 2&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column2 drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Split into several columns&lt;/li&gt;
  &lt;li&gt;Separator ` as ` (space as space)&lt;/li&gt;
  &lt;li&gt;Split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; columns at most&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then rename the columns. Drop down, edit column, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rename this column&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column 1: Actress&lt;/li&gt;
  &lt;li&gt;Column 2: Film&lt;/li&gt;
  &lt;li&gt;Column 3: Character&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Export the data into Wiki syntax&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Top right&lt;/li&gt;
  &lt;li&gt;Export&lt;/li&gt;
  &lt;li&gt;The default is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Follow the video to see how to setup the Wiki syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extract-operations-1&quot;&gt;Extract operations&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Undo/Redo&lt;/code&gt; allows the extract the operations done to a dataset.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Popup window &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extract Operation History&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Operations selected on the left are encoded as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; (preview on the right)&lt;/li&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; code&lt;/li&gt;
  &lt;li&gt;Switch back to another project you want to clean&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Undo/Redo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Paste the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; code on that window&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Perform Operations&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-latitude-and-longitude-for-address-rows-from-an-external-source-1&quot;&gt;Get latitude and longitude for address rows from an external source&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://www.youtube.com/watch?v=5tsyz3ibYzk&amp;amp;feature=emb_title&quot;&gt;video&lt;/a&gt; shows a dataset with a column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Headquarter&lt;/code&gt; that has the addresses for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Company&lt;/code&gt; column.&lt;/p&gt;

&lt;p&gt;She wants to get the latitude and longitude for each address using the API from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nominatim.openstreetmap.org&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Headquarters column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column by fetching URLs&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'http://nominatim.openstreetmap.org/search?format=json&amp;amp;email=somemail@gmail.com%app=google-refine&amp;amp;q=' + escape(value, 'url')&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Throttle delay: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1500&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then it takes some time to load the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; appears on the right view with values for each row.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;json column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with(value.parseJson()[0], pair, pair.lat + ',' + pair.lon)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat/lon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;translate-rows-from-an-external-source-1&quot;&gt;Translate rows from an external source&lt;/h2&gt;

&lt;p&gt;If the dataset has rows in different languages in a column called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;. Follow the API requirements to construct the URL.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column by fetching URLs&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;http://ajax.googleapis.com/ajax/services/language/detect?...&quot; + escape(value.substring(0, 128), &quot;url&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Throttle delay: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A new column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; is loaded&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;json column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Edit column&lt;/li&gt;
  &lt;li&gt;Add column based on this column&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value.parseJson().responseData.language&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New column name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reconcile-data-with-external-sources-1&quot;&gt;Reconcile data with external sources&lt;/h2&gt;

&lt;p&gt;The video also shows a way to reconcile your data with external sources.&lt;/p&gt;

&lt;p&gt;This dataset has two columns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;film&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rating&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;film column&lt;/li&gt;
  &lt;li&gt;Drop down&lt;/li&gt;
  &lt;li&gt;Reconcile&lt;/li&gt;
  &lt;li&gt;Start reconciling&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Freebase&lt;/code&gt; reconciliation service&lt;/li&gt;
  &lt;li&gt;It loads a list of types&lt;/li&gt;
  &lt;li&gt;Select the type that matches this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;film&lt;/code&gt; column&lt;/li&gt;
  &lt;li&gt;Select the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Film&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start Reconciling&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fetch more data from Freebase&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;film column&lt;/li&gt;
  &lt;li&gt;drop down&lt;/li&gt;
  &lt;li&gt;edit column&lt;/li&gt;
  &lt;li&gt;Add columns from Freebase&lt;/li&gt;
  &lt;li&gt;Options appear for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Suggested Properties&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Directed by&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Netflix ID&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;openrefine-docs-1&quot;&gt;OpenRefine Docs&lt;/h2&gt;

&lt;p&gt;Please follow these resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenRefine/OpenRefine/wiki&quot;&gt;OpenRefine wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OpenRefine/OpenRefine/wiki/Screencasts&quot;&gt;Screencasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Tom Ordonez</name></author><category term="data wrangling" /><category term="openrefine" /><category term="analytics" /><category term="linux" /><summary type="html">OpenRefine is an open source desktop application for data wrangling.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/9.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/9.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Python Jupyter Notebook in Linux</title><link href="https://www.tomordonez.com/python-jupyter-notebook-linux/" rel="alternate" type="text/html" title="Python Jupyter Notebook in Linux" /><published>2020-01-14T00:00:00-05:00</published><updated>2020-01-14T00:00:00-05:00</updated><id>https://www.tomordonez.com/python-jupyter-notebook-linux</id><content type="html" xml:base="https://www.tomordonez.com/python-jupyter-notebook-linux/">&lt;p&gt;Update conda&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ conda update conda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yml&lt;/code&gt; file, use a name and dependencies. Example:&lt;/p&gt;

&lt;p&gt;File: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env_py_3.7.6.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Contents of this file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: awesome_name
dependencies:
- python=3.7.6
- jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the environment using this file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ conda env create --file env_py_3.7.6.yml
$ conda activate awesome_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check Python version&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ which python
$ python -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run Jupyter Notebook:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this doesn’t work. Try it like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jupyter notebook --ip=127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cell-timer-for-jupyter-notebook&quot;&gt;Cell timer for Jupyter notebook&lt;/h2&gt;

&lt;p&gt;As seen &lt;a href=&quot;https://stackoverflow.com/questions/32565829/simple-way-to-measure-cell-execution-time-in-ipython-notebook/50384459#50384459&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install jupyter_contrib_nbextensions
$ jupyter contrib nbextension install --user
$ jupyter nbextension enable execute_time/ExecuteTime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Tom Ordonez</name></author><category term="python" /><category term="jupyter" /><category term="linux" /><summary type="html">Update conda</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.tomordonez.com/assets/images/6.jpg" /><media:content medium="image" url="https://www.tomordonez.com/assets/images/6.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>